/*-******************************************************* -- HEADER -{{{1- */
/*- flux-dlapi_gl : API definitions
 *
 * WARNING: auto-generated file! do not change!
 */
/*-***************************************************************** -}}}1- */

// generated on 2020-08-17 12:18

#ifndef FLUXDLAPI_GL_GL_HPP_CD5E1692_0F6A_4721_8758_9EAE1A91CC66
#define FLUXDLAPI_GL_GL_HPP_CD5E1692_0F6A_4721_8758_9EAE1A91CC66

//--//////////////////////////////////////////////////////////////////////////
//--    include                     ///{{{1///////////////////////////////////

#include <flux/setup.pkg>

#include "forward.hpp"
#include "types.hpp"

#include <cstddef>

//--    >>> namespace = dlapi::gl >>>            ///{{{1///////////////////////
FLUX_NAMESPACE_ENTER2(dlapi,gl)
//--    constants                       ///{{{2///////////////////////////////
/* See forward.hpp for documentation */
namespace GL {
//-//-- 
//- Core 1.1
enum GLcore_1_1
{
#	define FLUXGL_VERSION_1_1 1
	GLFALSE = 0u,
	NONE = 0u,
	ZERO = 0u,
	GLNO_ERROR = 0u,
	POINTS = 0x0000u,
	CURRENT_BIT = 0x00000001u,
	CLIENT_PIXEL_STORE_BIT = 0x00000001u,
	CLIENT_VERTEX_ARRAY_BIT = 0x00000002u,
	POINT_BIT = 0x00000002u,
	LINE_BIT = 0x00000004u,
	POLYGON_BIT = 0x00000008u,
	POLYGON_STIPPLE_BIT = 0x00000010u,
	PIXEL_MODE_BIT = 0x00000020u,
	LIGHTING_BIT = 0x00000040u,
	FOG_BIT = 0x00000080u,
	DEPTH_BUFFER_BIT = 0x00000100u,
	ACCUM_BUFFER_BIT = 0x00000200u,
	STENCIL_BUFFER_BIT = 0x00000400u,
	VIEWPORT_BIT = 0x00000800u,
	TRANSFORM_BIT = 0x00001000u,
	ENABLE_BIT = 0x00002000u,
	COLOR_BUFFER_BIT = 0x00004000u,
	HINT_BIT = 0x00008000u,
	LINES = 0x0001u,
	EVAL_BIT = 0x00010000u,
	LINE_LOOP = 0x0002u,
	LIST_BIT = 0x00020000u,
	LINE_STRIP = 0x0003u,
	TRIANGLES = 0x0004u,
	TEXTURE_BIT = 0x00040000u,
	TRIANGLE_STRIP = 0x0005u,
	TRIANGLE_FAN = 0x0006u,
	QUADS = 0x0007u,
	QUAD_STRIP = 0x0008u,
	SCISSOR_BIT = 0x00080000u,
	POLYGON = 0x0009u,
	ACCUM = 0x0100u,
	LOAD = 0x0101u,
	RETURN = 0x0102u,
	MULT = 0x0103u,
	ADD = 0x0104u,
	NEVER = 0x0200u,
	LESS = 0x0201u,
	EQUAL = 0x0202u,
	LEQUAL = 0x0203u,
	GREATER = 0x0204u,
	NOTEQUAL = 0x0205u,
	GEQUAL = 0x0206u,
	ALWAYS = 0x0207u,
	SRC_COLOR = 0x0300u,
	ONE_MINUS_SRC_COLOR = 0x0301u,
	SRC_ALPHA = 0x0302u,
	ONE_MINUS_SRC_ALPHA = 0x0303u,
	DST_ALPHA = 0x0304u,
	ONE_MINUS_DST_ALPHA = 0x0305u,
	DST_COLOR = 0x0306u,
	ONE_MINUS_DST_COLOR = 0x0307u,
	SRC_ALPHA_SATURATE = 0x0308u,
	FRONT_LEFT = 0x0400u,
	FRONT_RIGHT = 0x0401u,
	BACK_LEFT = 0x0402u,
	BACK_RIGHT = 0x0403u,
	FRONT = 0x0404u,
	BACK = 0x0405u,
	LEFT = 0x0406u,
	RIGHT = 0x0407u,
	FRONT_AND_BACK = 0x0408u,
	AUX0 = 0x0409u,
	AUX1 = 0x040Au,
	AUX2 = 0x040Bu,
	AUX3 = 0x040Cu,
	INVALID_ENUM = 0x0500u,
	INVALID_VALUE = 0x0501u,
	INVALID_OPERATION = 0x0502u,
	STACK_OVERFLOW = 0x0503u,
	STACK_UNDERFLOW = 0x0504u,
	OUT_OF_MEMORY = 0x0505u,
	GL2D = 0x0600u,
	GL3D = 0x0601u,
	GL3D_COLOR = 0x0602u,
	GL3D_COLOR_TEXTURE = 0x0603u,
	GL4D_COLOR_TEXTURE = 0x0604u,
	PASS_THROUGH_TOKEN = 0x0700u,
	POINT_TOKEN = 0x0701u,
	LINE_TOKEN = 0x0702u,
	POLYGON_TOKEN = 0x0703u,
	BITMAP_TOKEN = 0x0704u,
	DRAW_PIXEL_TOKEN = 0x0705u,
	COPY_PIXEL_TOKEN = 0x0706u,
	LINE_RESET_TOKEN = 0x0707u,
	EXP = 0x0800u,
	EXP2 = 0x0801u,
	CW = 0x0900u,
	CCW = 0x0901u,
	COEFF = 0x0A00u,
	ORDER = 0x0A01u,
	GLDOMAIN = 0x0A02u,
	CURRENT_COLOR = 0x0B00u,
	CURRENT_INDEX = 0x0B01u,
	CURRENT_NORMAL = 0x0B02u,
	CURRENT_TEXTURE_COORDS = 0x0B03u,
	CURRENT_RASTER_COLOR = 0x0B04u,
	CURRENT_RASTER_INDEX = 0x0B05u,
	CURRENT_RASTER_TEXTURE_COORDS = 0x0B06u,
	CURRENT_RASTER_POSITION = 0x0B07u,
	CURRENT_RASTER_POSITION_VALID = 0x0B08u,
	CURRENT_RASTER_DISTANCE = 0x0B09u,
	POINT_SMOOTH = 0x0B10u,
	POINT_SIZE = 0x0B11u,
	POINT_SIZE_RANGE = 0x0B12u,
	POINT_SIZE_GRANULARITY = 0x0B13u,
	LINE_SMOOTH = 0x0B20u,
	LINE_WIDTH = 0x0B21u,
	LINE_WIDTH_RANGE = 0x0B22u,
	LINE_WIDTH_GRANULARITY = 0x0B23u,
	LINE_STIPPLE = 0x0B24u,
	LINE_STIPPLE_PATTERN = 0x0B25u,
	LINE_STIPPLE_REPEAT = 0x0B26u,
	LIST_MODE = 0x0B30u,
	MAX_LIST_NESTING = 0x0B31u,
	LIST_BASE = 0x0B32u,
	LIST_INDEX = 0x0B33u,
	POLYGON_MODE = 0x0B40u,
	POLYGON_SMOOTH = 0x0B41u,
	POLYGON_STIPPLE = 0x0B42u,
	EDGE_FLAG = 0x0B43u,
	CULL_FACE = 0x0B44u,
	CULL_FACE_MODE = 0x0B45u,
	FRONT_FACE = 0x0B46u,
	LIGHTING = 0x0B50u,
	LIGHT_MODEL_LOCAL_VIEWER = 0x0B51u,
	LIGHT_MODEL_TWO_SIDE = 0x0B52u,
	LIGHT_MODEL_AMBIENT = 0x0B53u,
	SHADE_MODEL = 0x0B54u,
	COLOR_MATERIAL_FACE = 0x0B55u,
	COLOR_MATERIAL_PARAMETER = 0x0B56u,
	COLOR_MATERIAL = 0x0B57u,
	FOG = 0x0B60u,
	FOG_INDEX = 0x0B61u,
	FOG_DENSITY = 0x0B62u,
	FOG_START = 0x0B63u,
	FOG_END = 0x0B64u,
	FOG_MODE = 0x0B65u,
	FOG_COLOR = 0x0B66u,
	DEPTH_RANGE = 0x0B70u,
	DEPTH_TEST = 0x0B71u,
	DEPTH_WRITEMASK = 0x0B72u,
	DEPTH_CLEAR_VALUE = 0x0B73u,
	DEPTH_FUNC = 0x0B74u,
	ACCUM_CLEAR_VALUE = 0x0B80u,
	STENCIL_TEST = 0x0B90u,
	STENCIL_CLEAR_VALUE = 0x0B91u,
	STENCIL_FUNC = 0x0B92u,
	STENCIL_VALUE_MASK = 0x0B93u,
	STENCIL_FAIL = 0x0B94u,
	STENCIL_PASS_DEPTH_FAIL = 0x0B95u,
	STENCIL_PASS_DEPTH_PASS = 0x0B96u,
	STENCIL_REF = 0x0B97u,
	STENCIL_WRITEMASK = 0x0B98u,
	MATRIX_MODE = 0x0BA0u,
	NORMALIZE = 0x0BA1u,
	VIEWPORT = 0x0BA2u,
	MODELVIEW_STACK_DEPTH = 0x0BA3u,
	PROJECTION_STACK_DEPTH = 0x0BA4u,
	TEXTURE_STACK_DEPTH = 0x0BA5u,
	MODELVIEW_MATRIX = 0x0BA6u,
	PROJECTION_MATRIX = 0x0BA7u,
	TEXTURE_MATRIX = 0x0BA8u,
	ATTRIB_STACK_DEPTH = 0x0BB0u,
	CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1u,
	ALPHA_TEST = 0x0BC0u,
	ALPHA_TEST_FUNC = 0x0BC1u,
	ALPHA_TEST_REF = 0x0BC2u,
	DITHER = 0x0BD0u,
	BLEND_DST = 0x0BE0u,
	BLEND_SRC = 0x0BE1u,
	BLEND = 0x0BE2u,
	LOGIC_OP_MODE = 0x0BF0u,
	INDEX_LOGIC_OP = 0x0BF1u,
	LOGIC_OP = 0x0BF1u,
	COLOR_LOGIC_OP = 0x0BF2u,
	AUX_BUFFERS = 0x0C00u,
	DRAW_BUFFER = 0x0C01u,
	READ_BUFFER = 0x0C02u,
	SCISSOR_BOX = 0x0C10u,
	SCISSOR_TEST = 0x0C11u,
	INDEX_CLEAR_VALUE = 0x0C20u,
	INDEX_WRITEMASK = 0x0C21u,
	COLOR_CLEAR_VALUE = 0x0C22u,
	COLOR_WRITEMASK = 0x0C23u,
	INDEX_MODE = 0x0C30u,
	RGBA_MODE = 0x0C31u,
	DOUBLEBUFFER = 0x0C32u,
	STEREO = 0x0C33u,
	RENDER_MODE = 0x0C40u,
	PERSPECTIVE_CORRECTION_HINT = 0x0C50u,
	POINT_SMOOTH_HINT = 0x0C51u,
	LINE_SMOOTH_HINT = 0x0C52u,
	POLYGON_SMOOTH_HINT = 0x0C53u,
	FOG_HINT = 0x0C54u,
	TEXTURE_GEN_S = 0x0C60u,
	TEXTURE_GEN_T = 0x0C61u,
	TEXTURE_GEN_R = 0x0C62u,
	TEXTURE_GEN_Q = 0x0C63u,
	PIXEL_MAP_I_TO_I = 0x0C70u,
	PIXEL_MAP_S_TO_S = 0x0C71u,
	PIXEL_MAP_I_TO_R = 0x0C72u,
	PIXEL_MAP_I_TO_G = 0x0C73u,
	PIXEL_MAP_I_TO_B = 0x0C74u,
	PIXEL_MAP_I_TO_A = 0x0C75u,
	PIXEL_MAP_R_TO_R = 0x0C76u,
	PIXEL_MAP_G_TO_G = 0x0C77u,
	PIXEL_MAP_B_TO_B = 0x0C78u,
	PIXEL_MAP_A_TO_A = 0x0C79u,
	PIXEL_MAP_I_TO_I_SIZE = 0x0CB0u,
	PIXEL_MAP_S_TO_S_SIZE = 0x0CB1u,
	PIXEL_MAP_I_TO_R_SIZE = 0x0CB2u,
	PIXEL_MAP_I_TO_G_SIZE = 0x0CB3u,
	PIXEL_MAP_I_TO_B_SIZE = 0x0CB4u,
	PIXEL_MAP_I_TO_A_SIZE = 0x0CB5u,
	PIXEL_MAP_R_TO_R_SIZE = 0x0CB6u,
	PIXEL_MAP_G_TO_G_SIZE = 0x0CB7u,
	PIXEL_MAP_B_TO_B_SIZE = 0x0CB8u,
	PIXEL_MAP_A_TO_A_SIZE = 0x0CB9u,
	UNPACK_SWAP_BYTES = 0x0CF0u,
	UNPACK_LSB_FIRST = 0x0CF1u,
	UNPACK_ROW_LENGTH = 0x0CF2u,
	UNPACK_SKIP_ROWS = 0x0CF3u,
	UNPACK_SKIP_PIXELS = 0x0CF4u,
	UNPACK_ALIGNMENT = 0x0CF5u,
	PACK_SWAP_BYTES = 0x0D00u,
	PACK_LSB_FIRST = 0x0D01u,
	PACK_ROW_LENGTH = 0x0D02u,
	PACK_SKIP_ROWS = 0x0D03u,
	PACK_SKIP_PIXELS = 0x0D04u,
	PACK_ALIGNMENT = 0x0D05u,
	MAP_COLOR = 0x0D10u,
	MAP_STENCIL = 0x0D11u,
	INDEX_SHIFT = 0x0D12u,
	INDEX_OFFSET = 0x0D13u,
	RED_SCALE = 0x0D14u,
	RED_BIAS = 0x0D15u,
	ZOOM_X = 0x0D16u,
	ZOOM_Y = 0x0D17u,
	GREEN_SCALE = 0x0D18u,
	GREEN_BIAS = 0x0D19u,
	BLUE_SCALE = 0x0D1Au,
	BLUE_BIAS = 0x0D1Bu,
	ALPHA_SCALE = 0x0D1Cu,
	ALPHA_BIAS = 0x0D1Du,
	DEPTH_SCALE = 0x0D1Eu,
	DEPTH_BIAS = 0x0D1Fu,
	MAX_EVAL_ORDER = 0x0D30u,
	MAX_LIGHTS = 0x0D31u,
	MAX_CLIP_PLANES = 0x0D32u,
	MAX_TEXTURE_SIZE = 0x0D33u,
	MAX_PIXEL_MAP_TABLE = 0x0D34u,
	MAX_ATTRIB_STACK_DEPTH = 0x0D35u,
	MAX_MODELVIEW_STACK_DEPTH = 0x0D36u,
	MAX_NAME_STACK_DEPTH = 0x0D37u,
	MAX_PROJECTION_STACK_DEPTH = 0x0D38u,
	MAX_TEXTURE_STACK_DEPTH = 0x0D39u,
	MAX_VIEWPORT_DIMS = 0x0D3Au,
	MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3Bu,
	SUBPIXEL_BITS = 0x0D50u,
	INDEX_BITS = 0x0D51u,
	RED_BITS = 0x0D52u,
	GREEN_BITS = 0x0D53u,
	BLUE_BITS = 0x0D54u,
	ALPHA_BITS = 0x0D55u,
	DEPTH_BITS = 0x0D56u,
	STENCIL_BITS = 0x0D57u,
	ACCUM_RED_BITS = 0x0D58u,
	ACCUM_GREEN_BITS = 0x0D59u,
	ACCUM_BLUE_BITS = 0x0D5Au,
	ACCUM_ALPHA_BITS = 0x0D5Bu,
	NAME_STACK_DEPTH = 0x0D70u,
	AUTO_NORMAL = 0x0D80u,
	MAP1_COLOR_4 = 0x0D90u,
	MAP1_INDEX = 0x0D91u,
	MAP1_NORMAL = 0x0D92u,
	MAP1_TEXTURE_COORD_1 = 0x0D93u,
	MAP1_TEXTURE_COORD_2 = 0x0D94u,
	MAP1_TEXTURE_COORD_3 = 0x0D95u,
	MAP1_TEXTURE_COORD_4 = 0x0D96u,
	MAP1_VERTEX_3 = 0x0D97u,
	MAP1_VERTEX_4 = 0x0D98u,
	MAP2_COLOR_4 = 0x0DB0u,
	MAP2_INDEX = 0x0DB1u,
	MAP2_NORMAL = 0x0DB2u,
	MAP2_TEXTURE_COORD_1 = 0x0DB3u,
	MAP2_TEXTURE_COORD_2 = 0x0DB4u,
	MAP2_TEXTURE_COORD_3 = 0x0DB5u,
	MAP2_TEXTURE_COORD_4 = 0x0DB6u,
	MAP2_VERTEX_3 = 0x0DB7u,
	MAP2_VERTEX_4 = 0x0DB8u,
	MAP1_GRID_DOMAIN = 0x0DD0u,
	MAP1_GRID_SEGMENTS = 0x0DD1u,
	MAP2_GRID_DOMAIN = 0x0DD2u,
	MAP2_GRID_SEGMENTS = 0x0DD3u,
	TEXTURE_1D = 0x0DE0u,
	TEXTURE_2D = 0x0DE1u,
	FEEDBACK_BUFFER_POINTER = 0x0DF0u,
	FEEDBACK_BUFFER_SIZE = 0x0DF1u,
	FEEDBACK_BUFFER_TYPE = 0x0DF2u,
	SELECTION_BUFFER_POINTER = 0x0DF3u,
	SELECTION_BUFFER_SIZE = 0x0DF4u,
	TEXTURE_WIDTH = 0x1000u,
	TEXTURE_HEIGHT = 0x1001u,
	TEXTURE_COMPONENTS = 0x1003u,
	TEXTURE_INTERNAL_FORMAT = 0x1003u,
	TEXTURE_BORDER_COLOR = 0x1004u,
	TEXTURE_BORDER = 0x1005u,
	DONT_CARE = 0x1100u,
	FASTEST = 0x1101u,
	NICEST = 0x1102u,
	AMBIENT = 0x1200u,
	DIFFUSE = 0x1201u,
	SPECULAR = 0x1202u,
	POSITION = 0x1203u,
	SPOT_DIRECTION = 0x1204u,
	SPOT_EXPONENT = 0x1205u,
	SPOT_CUTOFF = 0x1206u,
	CONSTANT_ATTENUATION = 0x1207u,
	LINEAR_ATTENUATION = 0x1208u,
	QUADRATIC_ATTENUATION = 0x1209u,
	COMPILE = 0x1300u,
	COMPILE_AND_EXECUTE = 0x1301u,
	BYTE = 0x1400u,
	UNSIGNED_BYTE = 0x1401u,
	SHORT = 0x1402u,
	UNSIGNED_SHORT = 0x1403u,
	INT = 0x1404u,
	UNSIGNED_INT = 0x1405u,
	FLOAT = 0x1406u,
	GL2_BYTES = 0x1407u,
	GL3_BYTES = 0x1408u,
	GL4_BYTES = 0x1409u,
	DOUBLE = 0x140Au,
	CLEAR = 0x1500u,
	AND = 0x1501u,
	AND_REVERSE = 0x1502u,
	COPY = 0x1503u,
	AND_INVERTED = 0x1504u,
	NOOP = 0x1505u,
	XOR = 0x1506u,
	OR = 0x1507u,
	NOR = 0x1508u,
	EQUIV = 0x1509u,
	INVERT = 0x150Au,
	OR_REVERSE = 0x150Bu,
	COPY_INVERTED = 0x150Cu,
	OR_INVERTED = 0x150Du,
	NAND = 0x150Eu,
	SET = 0x150Fu,
	EMISSION = 0x1600u,
	SHININESS = 0x1601u,
	AMBIENT_AND_DIFFUSE = 0x1602u,
	COLOR_INDEXES = 0x1603u,
	MODELVIEW = 0x1700u,
	PROJECTION = 0x1701u,
	TEXTURE = 0x1702u,
	COLOR = 0x1800u,
	DEPTH = 0x1801u,
	STENCIL = 0x1802u,
	COLOR_INDEX = 0x1900u,
	STENCIL_INDEX = 0x1901u,
	DEPTH_COMPONENT = 0x1902u,
	RED = 0x1903u,
	GREEN = 0x1904u,
	BLUE = 0x1905u,
	ALPHA = 0x1906u,
	RGB = 0x1907u,
	RGBA = 0x1908u,
	LUMINANCE = 0x1909u,
	LUMINANCE_ALPHA = 0x190Au,
	BITMAP = 0x1A00u,
	POINT = 0x1B00u,
	LINE = 0x1B01u,
	FILL = 0x1B02u,
	RENDER = 0x1C00u,
	FEEDBACK = 0x1C01u,
	SELECT = 0x1C02u,
	FLAT = 0x1D00u,
	SMOOTH = 0x1D01u,
	KEEP = 0x1E00u,
	REPLACE = 0x1E01u,
	INCR = 0x1E02u,
	DECR = 0x1E03u,
	VENDOR = 0x1F00u,
	RENDERER = 0x1F01u,
	VERSION = 0x1F02u,
	EXTENSIONS = 0x1F03u,
	S = 0x2000u,
	T = 0x2001u,
	R = 0x2002u,
	Q = 0x2003u,
	MODULATE = 0x2100u,
	DECAL = 0x2101u,
	TEXTURE_ENV_MODE = 0x2200u,
	TEXTURE_ENV_COLOR = 0x2201u,
	TEXTURE_ENV = 0x2300u,
	EYE_LINEAR = 0x2400u,
	OBJECT_LINEAR = 0x2401u,
	SPHERE_MAP = 0x2402u,
	TEXTURE_GEN_MODE = 0x2500u,
	OBJECT_PLANE = 0x2501u,
	EYE_PLANE = 0x2502u,
	NEAREST = 0x2600u,
	LINEAR = 0x2601u,
	NEAREST_MIPMAP_NEAREST = 0x2700u,
	LINEAR_MIPMAP_NEAREST = 0x2701u,
	NEAREST_MIPMAP_LINEAR = 0x2702u,
	LINEAR_MIPMAP_LINEAR = 0x2703u,
	TEXTURE_MAG_FILTER = 0x2800u,
	TEXTURE_MIN_FILTER = 0x2801u,
	TEXTURE_WRAP_S = 0x2802u,
	TEXTURE_WRAP_T = 0x2803u,
	CLAMP = 0x2900u,
	REPEAT = 0x2901u,
	POLYGON_OFFSET_UNITS = 0x2A00u,
	POLYGON_OFFSET_POINT = 0x2A01u,
	POLYGON_OFFSET_LINE = 0x2A02u,
	R3_G3_B2 = 0x2A10u,
	V2F = 0x2A20u,
	V3F = 0x2A21u,
	C4UB_V2F = 0x2A22u,
	C4UB_V3F = 0x2A23u,
	C3F_V3F = 0x2A24u,
	N3F_V3F = 0x2A25u,
	C4F_N3F_V3F = 0x2A26u,
	T2F_V3F = 0x2A27u,
	T4F_V4F = 0x2A28u,
	T2F_C4UB_V3F = 0x2A29u,
	T2F_C3F_V3F = 0x2A2Au,
	T2F_N3F_V3F = 0x2A2Bu,
	T2F_C4F_N3F_V3F = 0x2A2Cu,
	T4F_C4F_N3F_V4F = 0x2A2Du,
	CLIP_PLANE0 = 0x3000u,
	CLIP_PLANE1 = 0x3001u,
	CLIP_PLANE2 = 0x3002u,
	CLIP_PLANE3 = 0x3003u,
	CLIP_PLANE4 = 0x3004u,
	CLIP_PLANE5 = 0x3005u,
	LIGHT0 = 0x4000u,
	LIGHT1 = 0x4001u,
	LIGHT2 = 0x4002u,
	LIGHT3 = 0x4003u,
	LIGHT4 = 0x4004u,
	LIGHT5 = 0x4005u,
	LIGHT6 = 0x4006u,
	LIGHT7 = 0x4007u,
	POLYGON_OFFSET_FILL = 0x8037u,
	POLYGON_OFFSET_FACTOR = 0x8038u,
	ALPHA4 = 0x803Bu,
	ALPHA8 = 0x803Cu,
	ALPHA12 = 0x803Du,
	ALPHA16 = 0x803Eu,
	LUMINANCE4 = 0x803Fu,
	LUMINANCE8 = 0x8040u,
	LUMINANCE12 = 0x8041u,
	LUMINANCE16 = 0x8042u,
	LUMINANCE4_ALPHA4 = 0x8043u,
	LUMINANCE6_ALPHA2 = 0x8044u,
	LUMINANCE8_ALPHA8 = 0x8045u,
	LUMINANCE12_ALPHA4 = 0x8046u,
	LUMINANCE12_ALPHA12 = 0x8047u,
	LUMINANCE16_ALPHA16 = 0x8048u,
	INTENSITY = 0x8049u,
	INTENSITY4 = 0x804Au,
	INTENSITY8 = 0x804Bu,
	INTENSITY12 = 0x804Cu,
	INTENSITY16 = 0x804Du,
	RGB4 = 0x804Fu,
	RGB5 = 0x8050u,
	RGB8 = 0x8051u,
	RGB10 = 0x8052u,
	RGB12 = 0x8053u,
	RGB16 = 0x8054u,
	RGBA2 = 0x8055u,
	RGBA4 = 0x8056u,
	RGB5_A1 = 0x8057u,
	RGBA8 = 0x8058u,
	RGB10_A2 = 0x8059u,
	RGBA12 = 0x805Au,
	RGBA16 = 0x805Bu,
	TEXTURE_RED_SIZE = 0x805Cu,
	TEXTURE_GREEN_SIZE = 0x805Du,
	TEXTURE_BLUE_SIZE = 0x805Eu,
	TEXTURE_ALPHA_SIZE = 0x805Fu,
	TEXTURE_LUMINANCE_SIZE = 0x8060u,
	TEXTURE_INTENSITY_SIZE = 0x8061u,
	PROXY_TEXTURE_1D = 0x8063u,
	PROXY_TEXTURE_2D = 0x8064u,
	TEXTURE_PRIORITY = 0x8066u,
	TEXTURE_RESIDENT = 0x8067u,
	TEXTURE_BINDING_1D = 0x8068u,
	TEXTURE_BINDING_2D = 0x8069u,
	VERTEX_ARRAY = 0x8074u,
	NORMAL_ARRAY = 0x8075u,
	COLOR_ARRAY = 0x8076u,
	INDEX_ARRAY = 0x8077u,
	TEXTURE_COORD_ARRAY = 0x8078u,
	EDGE_FLAG_ARRAY = 0x8079u,
	VERTEX_ARRAY_SIZE = 0x807Au,
	VERTEX_ARRAY_TYPE = 0x807Bu,
	VERTEX_ARRAY_STRIDE = 0x807Cu,
	NORMAL_ARRAY_TYPE = 0x807Eu,
	NORMAL_ARRAY_STRIDE = 0x807Fu,
	COLOR_ARRAY_SIZE = 0x8081u,
	COLOR_ARRAY_TYPE = 0x8082u,
	COLOR_ARRAY_STRIDE = 0x8083u,
	INDEX_ARRAY_TYPE = 0x8085u,
	INDEX_ARRAY_STRIDE = 0x8086u,
	TEXTURE_COORD_ARRAY_SIZE = 0x8088u,
	TEXTURE_COORD_ARRAY_TYPE = 0x8089u,
	TEXTURE_COORD_ARRAY_STRIDE = 0x808Au,
	EDGE_FLAG_ARRAY_STRIDE = 0x808Cu,
	VERTEX_ARRAY_POINTER = 0x808Eu,
	NORMAL_ARRAY_POINTER = 0x808Fu,
	COLOR_ARRAY_POINTER = 0x8090u,
	INDEX_ARRAY_POINTER = 0x8091u,
	TEXTURE_COORD_ARRAY_POINTER = 0x8092u,
	EDGE_FLAG_ARRAY_POINTER = 0x8093u,
	ALL_ATTRIB_BITS = 0xFFFFFFFFu,
	CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFFu,
	ONE = 1u,
	GLTRUE = 1u,
};
//- end: Core 1.1

//-//-- 
//- Core 1.2
enum GLcore_1_2
{
#	define FLUXGL_VERSION_1_2 1
	SMOOTH_POINT_SIZE_RANGE = 0x0B12u,
	SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13u,
	SMOOTH_LINE_WIDTH_RANGE = 0x0B22u,
	SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23u,
	UNSIGNED_BYTE_3_3_2 = 0x8032u,
	UNSIGNED_SHORT_4_4_4_4 = 0x8033u,
	UNSIGNED_SHORT_5_5_5_1 = 0x8034u,
	UNSIGNED_INT_8_8_8_8 = 0x8035u,
	UNSIGNED_INT_10_10_10_2 = 0x8036u,
	RESCALE_NORMAL = 0x803Au,
	TEXTURE_BINDING_3D = 0x806Au,
	PACK_SKIP_IMAGES = 0x806Bu,
	PACK_IMAGE_HEIGHT = 0x806Cu,
	UNPACK_SKIP_IMAGES = 0x806Du,
	UNPACK_IMAGE_HEIGHT = 0x806Eu,
	TEXTURE_3D = 0x806Fu,
	PROXY_TEXTURE_3D = 0x8070u,
	TEXTURE_DEPTH = 0x8071u,
	TEXTURE_WRAP_R = 0x8072u,
	MAX_3D_TEXTURE_SIZE = 0x8073u,
	BGR = 0x80E0u,
	BGRA = 0x80E1u,
	MAX_ELEMENTS_VERTICES = 0x80E8u,
	MAX_ELEMENTS_INDICES = 0x80E9u,
	CLAMP_TO_EDGE = 0x812Fu,
	TEXTURE_MIN_LOD = 0x813Au,
	TEXTURE_MAX_LOD = 0x813Bu,
	TEXTURE_BASE_LEVEL = 0x813Cu,
	TEXTURE_MAX_LEVEL = 0x813Du,
	LIGHT_MODEL_COLOR_CONTROL = 0x81F8u,
	SINGLE_COLOR = 0x81F9u,
	SEPARATE_SPECULAR_COLOR = 0x81FAu,
	UNSIGNED_BYTE_2_3_3_REV = 0x8362u,
	UNSIGNED_SHORT_5_6_5 = 0x8363u,
	UNSIGNED_SHORT_5_6_5_REV = 0x8364u,
	UNSIGNED_SHORT_4_4_4_4_REV = 0x8365u,
	UNSIGNED_SHORT_1_5_5_5_REV = 0x8366u,
	UNSIGNED_INT_8_8_8_8_REV = 0x8367u,
	UNSIGNED_INT_2_10_10_10_REV = 0x8368u,
	ALIASED_POINT_SIZE_RANGE = 0x846Du,
	ALIASED_LINE_WIDTH_RANGE = 0x846Eu,
};
//- end: Core 1.2

//-//-- 
//- Core 1.3
enum GLcore_1_3
{
#	define FLUXGL_VERSION_1_3 1
	MULTISAMPLE_BIT = 0x20000000u,
	MULTISAMPLE = 0x809Du,
	SAMPLE_ALPHA_TO_COVERAGE = 0x809Eu,
	SAMPLE_ALPHA_TO_ONE = 0x809Fu,
	SAMPLE_COVERAGE = 0x80A0u,
	SAMPLE_BUFFERS = 0x80A8u,
	SAMPLES = 0x80A9u,
	SAMPLE_COVERAGE_VALUE = 0x80AAu,
	SAMPLE_COVERAGE_INVERT = 0x80ABu,
	CLAMP_TO_BORDER = 0x812Du,
	TEXTURE0 = 0x84C0u,
	TEXTURE1 = 0x84C1u,
	TEXTURE2 = 0x84C2u,
	TEXTURE3 = 0x84C3u,
	TEXTURE4 = 0x84C4u,
	TEXTURE5 = 0x84C5u,
	TEXTURE6 = 0x84C6u,
	TEXTURE7 = 0x84C7u,
	TEXTURE8 = 0x84C8u,
	TEXTURE9 = 0x84C9u,
	TEXTURE10 = 0x84CAu,
	TEXTURE11 = 0x84CBu,
	TEXTURE12 = 0x84CCu,
	TEXTURE13 = 0x84CDu,
	TEXTURE14 = 0x84CEu,
	TEXTURE15 = 0x84CFu,
	TEXTURE16 = 0x84D0u,
	TEXTURE17 = 0x84D1u,
	TEXTURE18 = 0x84D2u,
	TEXTURE19 = 0x84D3u,
	TEXTURE20 = 0x84D4u,
	TEXTURE21 = 0x84D5u,
	TEXTURE22 = 0x84D6u,
	TEXTURE23 = 0x84D7u,
	TEXTURE24 = 0x84D8u,
	TEXTURE25 = 0x84D9u,
	TEXTURE26 = 0x84DAu,
	TEXTURE27 = 0x84DBu,
	TEXTURE28 = 0x84DCu,
	TEXTURE29 = 0x84DDu,
	TEXTURE30 = 0x84DEu,
	TEXTURE31 = 0x84DFu,
	ACTIVE_TEXTURE = 0x84E0u,
	CLIENT_ACTIVE_TEXTURE = 0x84E1u,
	MAX_TEXTURE_UNITS = 0x84E2u,
	TRANSPOSE_MODELVIEW_MATRIX = 0x84E3u,
	TRANSPOSE_PROJECTION_MATRIX = 0x84E4u,
	TRANSPOSE_TEXTURE_MATRIX = 0x84E5u,
	TRANSPOSE_COLOR_MATRIX = 0x84E6u,
	SUBTRACT = 0x84E7u,
	COMPRESSED_ALPHA = 0x84E9u,
	COMPRESSED_LUMINANCE = 0x84EAu,
	COMPRESSED_LUMINANCE_ALPHA = 0x84EBu,
	COMPRESSED_INTENSITY = 0x84ECu,
	COMPRESSED_RGB = 0x84EDu,
	COMPRESSED_RGBA = 0x84EEu,
	TEXTURE_COMPRESSION_HINT = 0x84EFu,
	NORMAL_MAP = 0x8511u,
	REFLECTION_MAP = 0x8512u,
	TEXTURE_CUBE_MAP = 0x8513u,
	TEXTURE_BINDING_CUBE_MAP = 0x8514u,
	TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515u,
	TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516u,
	TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517u,
	TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518u,
	TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519u,
	TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851Au,
	PROXY_TEXTURE_CUBE_MAP = 0x851Bu,
	MAX_CUBE_MAP_TEXTURE_SIZE = 0x851Cu,
	COMBINE = 0x8570u,
	COMBINE_RGB = 0x8571u,
	COMBINE_ALPHA = 0x8572u,
	RGB_SCALE = 0x8573u,
	ADD_SIGNED = 0x8574u,
	INTERPOLATE = 0x8575u,
	CONSTANT = 0x8576u,
	PRIMARY_COLOR = 0x8577u,
	PREVIOUS = 0x8578u,
	SOURCE0_RGB = 0x8580u,
	SOURCE1_RGB = 0x8581u,
	SOURCE2_RGB = 0x8582u,
	SOURCE0_ALPHA = 0x8588u,
	SOURCE1_ALPHA = 0x8589u,
	SOURCE2_ALPHA = 0x858Au,
	OPERAND0_RGB = 0x8590u,
	OPERAND1_RGB = 0x8591u,
	OPERAND2_RGB = 0x8592u,
	OPERAND0_ALPHA = 0x8598u,
	OPERAND1_ALPHA = 0x8599u,
	OPERAND2_ALPHA = 0x859Au,
	TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0u,
	TEXTURE_COMPRESSED = 0x86A1u,
	NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2u,
	COMPRESSED_TEXTURE_FORMATS = 0x86A3u,
	DOT3_RGB = 0x86AEu,
	DOT3_RGBA = 0x86AFu,
};
//- end: Core 1.3

//-//-- 
//- Core 1.4
enum GLcore_1_4
{
#	define FLUXGL_VERSION_1_4 1
	CONSTANT_COLOR = 0x8001u,
	ONE_MINUS_CONSTANT_COLOR = 0x8002u,
	CONSTANT_ALPHA = 0x8003u,
	ONE_MINUS_CONSTANT_ALPHA = 0x8004u,
	BLEND_COLOR = 0x8005u,
	FUNC_ADD = 0x8006u,
	MIN = 0x8007u,
	MAX = 0x8008u,
	FUNC_SUBTRACT = 0x800Au,
	FUNC_REVERSE_SUBTRACT = 0x800Bu,
	BLEND_DST_RGB = 0x80C8u,
	BLEND_SRC_RGB = 0x80C9u,
	BLEND_DST_ALPHA = 0x80CAu,
	BLEND_SRC_ALPHA = 0x80CBu,
	POINT_SIZE_MIN = 0x8126u,
	POINT_SIZE_MAX = 0x8127u,
	POINT_FADE_THRESHOLD_SIZE = 0x8128u,
	POINT_DISTANCE_ATTENUATION = 0x8129u,
	GENERATE_MIPMAP = 0x8191u,
	GENERATE_MIPMAP_HINT = 0x8192u,
	DEPTH_COMPONENT16 = 0x81A5u,
	DEPTH_COMPONENT24 = 0x81A6u,
	DEPTH_COMPONENT32 = 0x81A7u,
	MIRRORED_REPEAT = 0x8370u,
	FOG_COORDINATE_SOURCE = 0x8450u,
	FOG_COORDINATE = 0x8451u,
	FRAGMENT_DEPTH = 0x8452u,
	CURRENT_FOG_COORDINATE = 0x8453u,
	FOG_COORDINATE_ARRAY_TYPE = 0x8454u,
	FOG_COORDINATE_ARRAY_STRIDE = 0x8455u,
	FOG_COORDINATE_ARRAY_POINTER = 0x8456u,
	FOG_COORDINATE_ARRAY = 0x8457u,
	COLOR_SUM = 0x8458u,
	CURRENT_SECONDARY_COLOR = 0x8459u,
	SECONDARY_COLOR_ARRAY_SIZE = 0x845Au,
	SECONDARY_COLOR_ARRAY_TYPE = 0x845Bu,
	SECONDARY_COLOR_ARRAY_STRIDE = 0x845Cu,
	SECONDARY_COLOR_ARRAY_POINTER = 0x845Du,
	SECONDARY_COLOR_ARRAY = 0x845Eu,
	MAX_TEXTURE_LOD_BIAS = 0x84FDu,
	TEXTURE_FILTER_CONTROL = 0x8500u,
	TEXTURE_LOD_BIAS = 0x8501u,
	INCR_WRAP = 0x8507u,
	DECR_WRAP = 0x8508u,
	TEXTURE_DEPTH_SIZE = 0x884Au,
	DEPTH_TEXTURE_MODE = 0x884Bu,
	TEXTURE_COMPARE_MODE = 0x884Cu,
	TEXTURE_COMPARE_FUNC = 0x884Du,
	COMPARE_R_TO_TEXTURE = 0x884Eu,
};
//- end: Core 1.4

//-//-- 
//- Core 1.5
enum GLcore_1_5
{
#	define FLUXGL_VERSION_1_5 1
	FOG_COORD_SRC = 0x8450u,
	FOG_COORD = 0x8451u,
	CURRENT_FOG_COORD = 0x8453u,
	FOG_COORD_ARRAY_TYPE = 0x8454u,
	FOG_COORD_ARRAY_STRIDE = 0x8455u,
	FOG_COORD_ARRAY_POINTER = 0x8456u,
	FOG_COORD_ARRAY = 0x8457u,
	SRC0_RGB = 0x8580u,
	SRC1_RGB = 0x8581u,
	SRC2_RGB = 0x8582u,
	SRC0_ALPHA = 0x8588u,
	SRC1_ALPHA = 0x8589u,
	SRC2_ALPHA = 0x858Au,
	BUFFER_SIZE = 0x8764u,
	BUFFER_USAGE = 0x8765u,
	QUERY_COUNTER_BITS = 0x8864u,
	CURRENT_QUERY = 0x8865u,
	QUERY_RESULT = 0x8866u,
	QUERY_RESULT_AVAILABLE = 0x8867u,
	ARRAY_BUFFER = 0x8892u,
	ELEMENT_ARRAY_BUFFER = 0x8893u,
	ARRAY_BUFFER_BINDING = 0x8894u,
	ELEMENT_ARRAY_BUFFER_BINDING = 0x8895u,
	VERTEX_ARRAY_BUFFER_BINDING = 0x8896u,
	NORMAL_ARRAY_BUFFER_BINDING = 0x8897u,
	COLOR_ARRAY_BUFFER_BINDING = 0x8898u,
	INDEX_ARRAY_BUFFER_BINDING = 0x8899u,
	TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889Au,
	EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889Bu,
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889Cu,
	FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889Du,
	FOG_COORD_ARRAY_BUFFER_BINDING = 0x889Du,
	WEIGHT_ARRAY_BUFFER_BINDING = 0x889Eu,
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889Fu,
	READ_ONLY = 0x88B8u,
	WRITE_ONLY = 0x88B9u,
	READ_WRITE = 0x88BAu,
	BUFFER_ACCESS = 0x88BBu,
	BUFFER_MAPPED = 0x88BCu,
	BUFFER_MAP_POINTER = 0x88BDu,
	STREAM_DRAW = 0x88E0u,
	STREAM_READ = 0x88E1u,
	STREAM_COPY = 0x88E2u,
	STATIC_DRAW = 0x88E4u,
	STATIC_READ = 0x88E5u,
	STATIC_COPY = 0x88E6u,
	DYNAMIC_DRAW = 0x88E8u,
	DYNAMIC_READ = 0x88E9u,
	DYNAMIC_COPY = 0x88EAu,
	SAMPLES_PASSED = 0x8914u,
};
//- end: Core 1.5

//-//-- 
//- Core 2.0
enum GLcore_2_0
{
#	define FLUXGL_VERSION_2_0 1
	BLEND_EQUATION_RGB = 0x8009u,
	VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622u,
	VERTEX_ATTRIB_ARRAY_SIZE = 0x8623u,
	VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624u,
	VERTEX_ATTRIB_ARRAY_TYPE = 0x8625u,
	CURRENT_VERTEX_ATTRIB = 0x8626u,
	VERTEX_PROGRAM_POINT_SIZE = 0x8642u,
	VERTEX_PROGRAM_TWO_SIDE = 0x8643u,
	VERTEX_ATTRIB_ARRAY_POINTER = 0x8645u,
	STENCIL_BACK_FUNC = 0x8800u,
	STENCIL_BACK_FAIL = 0x8801u,
	STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802u,
	STENCIL_BACK_PASS_DEPTH_PASS = 0x8803u,
	MAX_DRAW_BUFFERS = 0x8824u,
	DRAW_BUFFER0 = 0x8825u,
	DRAW_BUFFER1 = 0x8826u,
	DRAW_BUFFER2 = 0x8827u,
	DRAW_BUFFER3 = 0x8828u,
	DRAW_BUFFER4 = 0x8829u,
	DRAW_BUFFER5 = 0x882Au,
	DRAW_BUFFER6 = 0x882Bu,
	DRAW_BUFFER7 = 0x882Cu,
	DRAW_BUFFER8 = 0x882Du,
	DRAW_BUFFER9 = 0x882Eu,
	DRAW_BUFFER10 = 0x882Fu,
	DRAW_BUFFER11 = 0x8830u,
	DRAW_BUFFER12 = 0x8831u,
	DRAW_BUFFER13 = 0x8832u,
	DRAW_BUFFER14 = 0x8833u,
	DRAW_BUFFER15 = 0x8834u,
	BLEND_EQUATION_ALPHA = 0x883Du,
	POINT_SPRITE = 0x8861u,
	COORD_REPLACE = 0x8862u,
	MAX_VERTEX_ATTRIBS = 0x8869u,
	VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886Au,
	MAX_TEXTURE_COORDS = 0x8871u,
	MAX_TEXTURE_IMAGE_UNITS = 0x8872u,
	FRAGMENT_SHADER = 0x8B30u,
	VERTEX_SHADER = 0x8B31u,
	MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49u,
	MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4Au,
	MAX_VARYING_FLOATS = 0x8B4Bu,
	MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4Cu,
	MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4Du,
	SHADER_TYPE = 0x8B4Fu,
	FLOAT_VEC2 = 0x8B50u,
	FLOAT_VEC3 = 0x8B51u,
	FLOAT_VEC4 = 0x8B52u,
	INT_VEC2 = 0x8B53u,
	INT_VEC3 = 0x8B54u,
	INT_VEC4 = 0x8B55u,
	BOOL = 0x8B56u,
	BOOL_VEC2 = 0x8B57u,
	BOOL_VEC3 = 0x8B58u,
	BOOL_VEC4 = 0x8B59u,
	FLOAT_MAT2 = 0x8B5Au,
	FLOAT_MAT3 = 0x8B5Bu,
	FLOAT_MAT4 = 0x8B5Cu,
	SAMPLER_1D = 0x8B5Du,
	SAMPLER_2D = 0x8B5Eu,
	SAMPLER_3D = 0x8B5Fu,
	SAMPLER_CUBE = 0x8B60u,
	SAMPLER_1D_SHADOW = 0x8B61u,
	SAMPLER_2D_SHADOW = 0x8B62u,
	DELETE_STATUS = 0x8B80u,
	COMPILE_STATUS = 0x8B81u,
	LINK_STATUS = 0x8B82u,
	VALIDATE_STATUS = 0x8B83u,
	INFO_LOG_LENGTH = 0x8B84u,
	ATTACHED_SHADERS = 0x8B85u,
	ACTIVE_UNIFORMS = 0x8B86u,
	ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87u,
	SHADER_SOURCE_LENGTH = 0x8B88u,
	ACTIVE_ATTRIBUTES = 0x8B89u,
	ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8Au,
	FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8Bu,
	SHADING_LANGUAGE_VERSION = 0x8B8Cu,
	CURRENT_PROGRAM = 0x8B8Du,
	POINT_SPRITE_COORD_ORIGIN = 0x8CA0u,
	LOWER_LEFT = 0x8CA1u,
	UPPER_LEFT = 0x8CA2u,
	STENCIL_BACK_REF = 0x8CA3u,
	STENCIL_BACK_VALUE_MASK = 0x8CA4u,
	STENCIL_BACK_WRITEMASK = 0x8CA5u,
};
//- end: Core 2.0

//-//-- 
//- Core 2.1
enum GLcore_2_1
{
#	define FLUXGL_VERSION_2_1 1
	CURRENT_RASTER_SECONDARY_COLOR = 0x845Fu,
	PIXEL_PACK_BUFFER = 0x88EBu,
	PIXEL_UNPACK_BUFFER = 0x88ECu,
	PIXEL_PACK_BUFFER_BINDING = 0x88EDu,
	PIXEL_UNPACK_BUFFER_BINDING = 0x88EFu,
	FLOAT_MAT2x3 = 0x8B65u,
	FLOAT_MAT2x4 = 0x8B66u,
	FLOAT_MAT3x2 = 0x8B67u,
	FLOAT_MAT3x4 = 0x8B68u,
	FLOAT_MAT4x2 = 0x8B69u,
	FLOAT_MAT4x3 = 0x8B6Au,
	SRGB = 0x8C40u,
	SRGB8 = 0x8C41u,
	SRGB_ALPHA = 0x8C42u,
	SRGB8_ALPHA8 = 0x8C43u,
	SLUMINANCE_ALPHA = 0x8C44u,
	SLUMINANCE8_ALPHA8 = 0x8C45u,
	SLUMINANCE = 0x8C46u,
	SLUMINANCE8 = 0x8C47u,
	COMPRESSED_SRGB = 0x8C48u,
	COMPRESSED_SRGB_ALPHA = 0x8C49u,
	COMPRESSED_SLUMINANCE = 0x8C4Au,
	COMPRESSED_SLUMINANCE_ALPHA = 0x8C4Bu,
};
//- end: Core 2.1

//-//-- 
//- Core 3.0
enum GLcore_3_0
{
#	define FLUXGL_VERSION_3_0 1
	CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001u,
	MAP_READ_BIT = 0x0001u,
	MAP_WRITE_BIT = 0x0002u,
	MAP_INVALIDATE_RANGE_BIT = 0x0004u,
	MAP_INVALIDATE_BUFFER_BIT = 0x0008u,
	MAP_FLUSH_EXPLICIT_BIT = 0x0010u,
	MAP_UNSYNCHRONIZED_BIT = 0x0020u,
	INVALID_FRAMEBUFFER_OPERATION = 0x0506u,
	MAX_CLIP_DISTANCES = 0x0D32u,
	HALF_FLOAT = 0x140Bu,
	CLIP_DISTANCE0 = 0x3000u,
	CLIP_DISTANCE1 = 0x3001u,
	CLIP_DISTANCE2 = 0x3002u,
	CLIP_DISTANCE3 = 0x3003u,
	CLIP_DISTANCE4 = 0x3004u,
	CLIP_DISTANCE5 = 0x3005u,
	CLIP_DISTANCE6 = 0x3006u,
	CLIP_DISTANCE7 = 0x3007u,
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210u,
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211u,
	FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212u,
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213u,
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214u,
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215u,
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216u,
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217u,
	FRAMEBUFFER_DEFAULT = 0x8218u,
	FRAMEBUFFER_UNDEFINED = 0x8219u,
	DEPTH_STENCIL_ATTACHMENT = 0x821Au,
	MAJOR_VERSION = 0x821Bu,
	MINOR_VERSION = 0x821Cu,
	NUM_EXTENSIONS = 0x821Du,
	CONTEXT_FLAGS = 0x821Eu,
	COMPRESSED_RED = 0x8225u,
	COMPRESSED_RG = 0x8226u,
	RG = 0x8227u,
	RG_INTEGER = 0x8228u,
	R8 = 0x8229u,
	R16 = 0x822Au,
	RG8 = 0x822Bu,
	RG16 = 0x822Cu,
	R16F = 0x822Du,
	R32F = 0x822Eu,
	RG16F = 0x822Fu,
	RG32F = 0x8230u,
	R8I = 0x8231u,
	R8UI = 0x8232u,
	R16I = 0x8233u,
	R16UI = 0x8234u,
	R32I = 0x8235u,
	R32UI = 0x8236u,
	RG8I = 0x8237u,
	RG8UI = 0x8238u,
	RG16I = 0x8239u,
	RG16UI = 0x823Au,
	RG32I = 0x823Bu,
	RG32UI = 0x823Cu,
	MAX_RENDERBUFFER_SIZE = 0x84E8u,
	DEPTH_STENCIL = 0x84F9u,
	UNSIGNED_INT_24_8 = 0x84FAu,
	VERTEX_ARRAY_BINDING = 0x85B5u,
	RGBA32F = 0x8814u,
	RGB32F = 0x8815u,
	RGBA16F = 0x881Au,
	RGB16F = 0x881Bu,
	COMPARE_REF_TO_TEXTURE = 0x884Eu,
	DEPTH24_STENCIL8 = 0x88F0u,
	TEXTURE_STENCIL_SIZE = 0x88F1u,
	VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FDu,
	MAX_ARRAY_TEXTURE_LAYERS = 0x88FFu,
	MIN_PROGRAM_TEXEL_OFFSET = 0x8904u,
	MAX_PROGRAM_TEXEL_OFFSET = 0x8905u,
	CLAMP_VERTEX_COLOR = 0x891Au,
	CLAMP_FRAGMENT_COLOR = 0x891Bu,
	CLAMP_READ_COLOR = 0x891Cu,
	FIXED_ONLY = 0x891Du,
	MAX_VARYING_COMPONENTS = 0x8B4Bu,
	TEXTURE_RED_TYPE = 0x8C10u,
	TEXTURE_GREEN_TYPE = 0x8C11u,
	TEXTURE_BLUE_TYPE = 0x8C12u,
	TEXTURE_ALPHA_TYPE = 0x8C13u,
	TEXTURE_DEPTH_TYPE = 0x8C16u,
	UNSIGNED_NORMALIZED = 0x8C17u,
	TEXTURE_1D_ARRAY = 0x8C18u,
	PROXY_TEXTURE_1D_ARRAY = 0x8C19u,
	TEXTURE_2D_ARRAY = 0x8C1Au,
	PROXY_TEXTURE_2D_ARRAY = 0x8C1Bu,
	TEXTURE_BINDING_1D_ARRAY = 0x8C1Cu,
	TEXTURE_BINDING_2D_ARRAY = 0x8C1Du,
	R11F_G11F_B10F = 0x8C3Au,
	UNSIGNED_INT_10F_11F_11F_REV = 0x8C3Bu,
	RGB9_E5 = 0x8C3Du,
	UNSIGNED_INT_5_9_9_9_REV = 0x8C3Eu,
	TEXTURE_SHARED_SIZE = 0x8C3Fu,
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76u,
	TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7Fu,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80u,
	TRANSFORM_FEEDBACK_VARYINGS = 0x8C83u,
	TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84u,
	TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85u,
	PRIMITIVES_GENERATED = 0x8C87u,
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88u,
	RASTERIZER_DISCARD = 0x8C89u,
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8Au,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8Bu,
	INTERLEAVED_ATTRIBS = 0x8C8Cu,
	SEPARATE_ATTRIBS = 0x8C8Du,
	TRANSFORM_FEEDBACK_BUFFER = 0x8C8Eu,
	TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8Fu,
	FRAMEBUFFER_BINDING = 0x8CA6u,
	DRAW_FRAMEBUFFER_BINDING = 0x8CA6u,
	RENDERBUFFER_BINDING = 0x8CA7u,
	READ_FRAMEBUFFER = 0x8CA8u,
	DRAW_FRAMEBUFFER = 0x8CA9u,
	READ_FRAMEBUFFER_BINDING = 0x8CAAu,
	RENDERBUFFER_SAMPLES = 0x8CABu,
	DEPTH_COMPONENT32F = 0x8CACu,
	DEPTH32F_STENCIL8 = 0x8CADu,
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0u,
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4u,
	FRAMEBUFFER_COMPLETE = 0x8CD5u,
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6u,
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7u,
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDBu,
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDCu,
	FRAMEBUFFER_UNSUPPORTED = 0x8CDDu,
	MAX_COLOR_ATTACHMENTS = 0x8CDFu,
	COLOR_ATTACHMENT0 = 0x8CE0u,
	COLOR_ATTACHMENT1 = 0x8CE1u,
	COLOR_ATTACHMENT2 = 0x8CE2u,
	COLOR_ATTACHMENT3 = 0x8CE3u,
	COLOR_ATTACHMENT4 = 0x8CE4u,
	COLOR_ATTACHMENT5 = 0x8CE5u,
	COLOR_ATTACHMENT6 = 0x8CE6u,
	COLOR_ATTACHMENT7 = 0x8CE7u,
	COLOR_ATTACHMENT8 = 0x8CE8u,
	COLOR_ATTACHMENT9 = 0x8CE9u,
	COLOR_ATTACHMENT10 = 0x8CEAu,
	COLOR_ATTACHMENT11 = 0x8CEBu,
	COLOR_ATTACHMENT12 = 0x8CECu,
	COLOR_ATTACHMENT13 = 0x8CEDu,
	COLOR_ATTACHMENT14 = 0x8CEEu,
	COLOR_ATTACHMENT15 = 0x8CEFu,
	COLOR_ATTACHMENT16 = 0x8CF0u,
	COLOR_ATTACHMENT17 = 0x8CF1u,
	COLOR_ATTACHMENT18 = 0x8CF2u,
	COLOR_ATTACHMENT19 = 0x8CF3u,
	COLOR_ATTACHMENT20 = 0x8CF4u,
	COLOR_ATTACHMENT21 = 0x8CF5u,
	COLOR_ATTACHMENT22 = 0x8CF6u,
	COLOR_ATTACHMENT23 = 0x8CF7u,
	COLOR_ATTACHMENT24 = 0x8CF8u,
	COLOR_ATTACHMENT25 = 0x8CF9u,
	COLOR_ATTACHMENT26 = 0x8CFAu,
	COLOR_ATTACHMENT27 = 0x8CFBu,
	COLOR_ATTACHMENT28 = 0x8CFCu,
	COLOR_ATTACHMENT29 = 0x8CFDu,
	COLOR_ATTACHMENT30 = 0x8CFEu,
	COLOR_ATTACHMENT31 = 0x8CFFu,
	DEPTH_ATTACHMENT = 0x8D00u,
	STENCIL_ATTACHMENT = 0x8D20u,
	FRAMEBUFFER = 0x8D40u,
	RENDERBUFFER = 0x8D41u,
	RENDERBUFFER_WIDTH = 0x8D42u,
	RENDERBUFFER_HEIGHT = 0x8D43u,
	RENDERBUFFER_INTERNAL_FORMAT = 0x8D44u,
	STENCIL_INDEX1 = 0x8D46u,
	STENCIL_INDEX4 = 0x8D47u,
	STENCIL_INDEX8 = 0x8D48u,
	STENCIL_INDEX16 = 0x8D49u,
	RENDERBUFFER_RED_SIZE = 0x8D50u,
	RENDERBUFFER_GREEN_SIZE = 0x8D51u,
	RENDERBUFFER_BLUE_SIZE = 0x8D52u,
	RENDERBUFFER_ALPHA_SIZE = 0x8D53u,
	RENDERBUFFER_DEPTH_SIZE = 0x8D54u,
	RENDERBUFFER_STENCIL_SIZE = 0x8D55u,
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56u,
	MAX_SAMPLES = 0x8D57u,
	RGBA32UI = 0x8D70u,
	RGB32UI = 0x8D71u,
	RGBA16UI = 0x8D76u,
	RGB16UI = 0x8D77u,
	RGBA8UI = 0x8D7Cu,
	RGB8UI = 0x8D7Du,
	RGBA32I = 0x8D82u,
	RGB32I = 0x8D83u,
	RGBA16I = 0x8D88u,
	RGB16I = 0x8D89u,
	RGBA8I = 0x8D8Eu,
	RGB8I = 0x8D8Fu,
	RED_INTEGER = 0x8D94u,
	GREEN_INTEGER = 0x8D95u,
	BLUE_INTEGER = 0x8D96u,
	ALPHA_INTEGER = 0x8D97u,
	RGB_INTEGER = 0x8D98u,
	RGBA_INTEGER = 0x8D99u,
	BGR_INTEGER = 0x8D9Au,
	BGRA_INTEGER = 0x8D9Bu,
	FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DADu,
	FRAMEBUFFER_SRGB = 0x8DB9u,
	COMPRESSED_RED_RGTC1 = 0x8DBBu,
	COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBCu,
	COMPRESSED_RG_RGTC2 = 0x8DBDu,
	COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBEu,
	SAMPLER_1D_ARRAY = 0x8DC0u,
	SAMPLER_2D_ARRAY = 0x8DC1u,
	SAMPLER_1D_ARRAY_SHADOW = 0x8DC3u,
	SAMPLER_2D_ARRAY_SHADOW = 0x8DC4u,
	SAMPLER_CUBE_SHADOW = 0x8DC5u,
	UNSIGNED_INT_VEC2 = 0x8DC6u,
	UNSIGNED_INT_VEC3 = 0x8DC7u,
	UNSIGNED_INT_VEC4 = 0x8DC8u,
	INT_SAMPLER_1D = 0x8DC9u,
	INT_SAMPLER_2D = 0x8DCAu,
	INT_SAMPLER_3D = 0x8DCBu,
	INT_SAMPLER_CUBE = 0x8DCCu,
	INT_SAMPLER_1D_ARRAY = 0x8DCEu,
	INT_SAMPLER_2D_ARRAY = 0x8DCFu,
	UNSIGNED_INT_SAMPLER_1D = 0x8DD1u,
	UNSIGNED_INT_SAMPLER_2D = 0x8DD2u,
	UNSIGNED_INT_SAMPLER_3D = 0x8DD3u,
	UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4u,
	UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6u,
	UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7u,
	QUERY_WAIT = 0x8E13u,
	QUERY_NO_WAIT = 0x8E14u,
	QUERY_BY_REGION_WAIT = 0x8E15u,
	QUERY_BY_REGION_NO_WAIT = 0x8E16u,
	BUFFER_ACCESS_FLAGS = 0x911Fu,
	BUFFER_MAP_LENGTH = 0x9120u,
	BUFFER_MAP_OFFSET = 0x9121u,
};
//- end: Core 3.0

//-//-- 
//- Compatibility 3.0
enum GLcompat_3_0
{
#	define FLUXGL_VERSION_3_0 1
	INDEX = 0x8222u,
	TEXTURE_LUMINANCE_TYPE = 0x8C14u,
	TEXTURE_INTENSITY_TYPE = 0x8C15u,
};
//- end: Compatibility 3.0

//-//-- 
//- Core 3.1
enum GLcore_3_1
{
#	define FLUXGL_VERSION_3_1 1
	TEXTURE_RECTANGLE = 0x84F5u,
	TEXTURE_BINDING_RECTANGLE = 0x84F6u,
	PROXY_TEXTURE_RECTANGLE = 0x84F7u,
	MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8u,
	UNIFORM_BUFFER = 0x8A11u,
	UNIFORM_BUFFER_BINDING = 0x8A28u,
	UNIFORM_BUFFER_START = 0x8A29u,
	UNIFORM_BUFFER_SIZE = 0x8A2Au,
	MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2Bu,
	MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2Cu,
	MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2Du,
	MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2Eu,
	MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2Fu,
	MAX_UNIFORM_BLOCK_SIZE = 0x8A30u,
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31u,
	MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32u,
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33u,
	UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34u,
	ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35u,
	ACTIVE_UNIFORM_BLOCKS = 0x8A36u,
	UNIFORM_TYPE = 0x8A37u,
	UNIFORM_SIZE = 0x8A38u,
	UNIFORM_NAME_LENGTH = 0x8A39u,
	UNIFORM_BLOCK_INDEX = 0x8A3Au,
	UNIFORM_OFFSET = 0x8A3Bu,
	UNIFORM_ARRAY_STRIDE = 0x8A3Cu,
	UNIFORM_MATRIX_STRIDE = 0x8A3Du,
	UNIFORM_IS_ROW_MAJOR = 0x8A3Eu,
	UNIFORM_BLOCK_BINDING = 0x8A3Fu,
	UNIFORM_BLOCK_DATA_SIZE = 0x8A40u,
	UNIFORM_BLOCK_NAME_LENGTH = 0x8A41u,
	UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42u,
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43u,
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44u,
	UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45u,
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46u,
	SAMPLER_2D_RECT = 0x8B63u,
	SAMPLER_2D_RECT_SHADOW = 0x8B64u,
	TEXTURE_BUFFER = 0x8C2Au,
	MAX_TEXTURE_BUFFER_SIZE = 0x8C2Bu,
	TEXTURE_BINDING_BUFFER = 0x8C2Cu,
	TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2Du,
	SAMPLER_BUFFER = 0x8DC2u,
	INT_SAMPLER_2D_RECT = 0x8DCDu,
	INT_SAMPLER_BUFFER = 0x8DD0u,
	UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5u,
	UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8u,
	COPY_READ_BUFFER = 0x8F36u,
	COPY_WRITE_BUFFER = 0x8F37u,
	R8_SNORM = 0x8F94u,
	RG8_SNORM = 0x8F95u,
	RGB8_SNORM = 0x8F96u,
	RGBA8_SNORM = 0x8F97u,
	R16_SNORM = 0x8F98u,
	RG16_SNORM = 0x8F99u,
	RGB16_SNORM = 0x8F9Au,
	RGBA16_SNORM = 0x8F9Bu,
	SIGNED_NORMALIZED = 0x8F9Cu,
	PRIMITIVE_RESTART = 0x8F9Du,
	PRIMITIVE_RESTART_INDEX = 0x8F9Eu,
	INVALID_INDEX = 0xFFFFFFFFu,
};
//- end: Core 3.1

//-//-- 
//- Core 3.2
enum GLcore_3_2
{
#	define FLUXGL_VERSION_3_2 1
	SYNC_FLUSH_COMMANDS_BIT = 0x00000001ull,
	CONTEXT_CORE_PROFILE_BIT = 0x00000001ull,
	CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002ull,
	LINES_ADJACENCY = 0x000Aull,
	LINE_STRIP_ADJACENCY = 0x000Bull,
	TRIANGLES_ADJACENCY = 0x000Cull,
	TRIANGLE_STRIP_ADJACENCY = 0x000Dull,
	PROGRAM_POINT_SIZE = 0x8642ull,
	DEPTH_CLAMP = 0x864Full,
	TEXTURE_CUBE_MAP_SEAMLESS = 0x884Full,
	GEOMETRY_VERTICES_OUT = 0x8916ull,
	GEOMETRY_INPUT_TYPE = 0x8917ull,
	GEOMETRY_OUTPUT_TYPE = 0x8918ull,
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29ull,
	FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7ull,
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8ull,
	GEOMETRY_SHADER = 0x8DD9ull,
	MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDFull,
	MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0ull,
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1ull,
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4Cull,
	FIRST_VERTEX_CONVENTION = 0x8E4Dull,
	LAST_VERTEX_CONVENTION = 0x8E4Eull,
	PROVOKING_VERTEX = 0x8E4Full,
	SAMPLE_POSITION = 0x8E50ull,
	SAMPLE_MASK = 0x8E51ull,
	SAMPLE_MASK_VALUE = 0x8E52ull,
	MAX_SAMPLE_MASK_WORDS = 0x8E59ull,
	TEXTURE_2D_MULTISAMPLE = 0x9100ull,
	PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101ull,
	TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102ull,
	PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103ull,
	TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104ull,
	TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105ull,
	TEXTURE_SAMPLES = 0x9106ull,
	TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107ull,
	SAMPLER_2D_MULTISAMPLE = 0x9108ull,
	INT_SAMPLER_2D_MULTISAMPLE = 0x9109ull,
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910Aull,
	SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910Bull,
	INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910Cull,
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910Dull,
	MAX_COLOR_TEXTURE_SAMPLES = 0x910Eull,
	MAX_DEPTH_TEXTURE_SAMPLES = 0x910Full,
	MAX_INTEGER_SAMPLES = 0x9110ull,
	MAX_SERVER_WAIT_TIMEOUT = 0x9111ull,
	OBJECT_TYPE = 0x9112ull,
	SYNC_CONDITION = 0x9113ull,
	SYNC_STATUS = 0x9114ull,
	SYNC_FLAGS = 0x9115ull,
	SYNC_FENCE = 0x9116ull,
	SYNC_GPU_COMMANDS_COMPLETE = 0x9117ull,
	UNSIGNALED = 0x9118ull,
	SIGNALED = 0x9119ull,
	ALREADY_SIGNALED = 0x911Aull,
	TIMEOUT_EXPIRED = 0x911Bull,
	CONDITION_SATISFIED = 0x911Cull,
	GLWAIT_FAILED = 0x911Dull,
	MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122ull,
	MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123ull,
	MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124ull,
	MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125ull,
	CONTEXT_PROFILE_MASK = 0x9126ull,
	TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull,
};
//- end: Core 3.2

//-//-- 
//- Compatibility 3.2
enum GLcompat_3_2
{
#	define FLUXGL_VERSION_3_2 1
//	GL::CURRENT_BIT already defined in 1.1_core
//	GL::CLIENT_PIXEL_STORE_BIT already defined in 1.1_core
//	GL::CLIENT_VERTEX_ARRAY_BIT already defined in 1.1_core
//	GL::POINT_BIT already defined in 1.1_core
//	GL::LINE_BIT already defined in 1.1_core
//	GL::POLYGON_BIT already defined in 1.1_core
//	GL::POLYGON_STIPPLE_BIT already defined in 1.1_core
//	GL::PIXEL_MODE_BIT already defined in 1.1_core
//	GL::LIGHTING_BIT already defined in 1.1_core
//	GL::FOG_BIT already defined in 1.1_core
//	GL::ACCUM_BUFFER_BIT already defined in 1.1_core
//	GL::VIEWPORT_BIT already defined in 1.1_core
//	GL::TRANSFORM_BIT already defined in 1.1_core
//	GL::ENABLE_BIT already defined in 1.1_core
//	GL::HINT_BIT already defined in 1.1_core
//	GL::EVAL_BIT already defined in 1.1_core
//	GL::LIST_BIT already defined in 1.1_core
//	GL::TEXTURE_BIT already defined in 1.1_core
//	GL::QUADS already defined in 1.1_core
//	GL::QUAD_STRIP already defined in 1.1_core
//	GL::SCISSOR_BIT already defined in 1.1_core
//	GL::POLYGON already defined in 1.1_core
//	GL::ACCUM already defined in 1.1_core
//	GL::LOAD already defined in 1.1_core
//	GL::RETURN already defined in 1.1_core
//	GL::MULT already defined in 1.1_core
//	GL::ADD already defined in 1.1_core
//	GL::AUX0 already defined in 1.1_core
//	GL::AUX1 already defined in 1.1_core
//	GL::AUX2 already defined in 1.1_core
//	GL::AUX3 already defined in 1.1_core
//	GL::STACK_OVERFLOW already defined in 1.1_core
//	GL::STACK_UNDERFLOW already defined in 1.1_core
//	GL::GL2D already defined in 1.1_core
//	GL::GL3D already defined in 1.1_core
//	GL::GL3D_COLOR already defined in 1.1_core
//	GL::GL3D_COLOR_TEXTURE already defined in 1.1_core
//	GL::GL4D_COLOR_TEXTURE already defined in 1.1_core
//	GL::PASS_THROUGH_TOKEN already defined in 1.1_core
//	GL::POINT_TOKEN already defined in 1.1_core
//	GL::LINE_TOKEN already defined in 1.1_core
//	GL::POLYGON_TOKEN already defined in 1.1_core
//	GL::BITMAP_TOKEN already defined in 1.1_core
//	GL::DRAW_PIXEL_TOKEN already defined in 1.1_core
//	GL::COPY_PIXEL_TOKEN already defined in 1.1_core
//	GL::LINE_RESET_TOKEN already defined in 1.1_core
//	GL::EXP already defined in 1.1_core
//	GL::EXP2 already defined in 1.1_core
//	GL::COEFF already defined in 1.1_core
//	GL::ORDER already defined in 1.1_core
//	GL::GLDOMAIN already defined in 1.1_core
//	GL::CURRENT_COLOR already defined in 1.1_core
//	GL::CURRENT_INDEX already defined in 1.1_core
//	GL::CURRENT_NORMAL already defined in 1.1_core
//	GL::CURRENT_TEXTURE_COORDS already defined in 1.1_core
//	GL::CURRENT_RASTER_COLOR already defined in 1.1_core
//	GL::CURRENT_RASTER_INDEX already defined in 1.1_core
//	GL::CURRENT_RASTER_TEXTURE_COORDS already defined in 1.1_core
//	GL::CURRENT_RASTER_POSITION already defined in 1.1_core
//	GL::CURRENT_RASTER_POSITION_VALID already defined in 1.1_core
//	GL::CURRENT_RASTER_DISTANCE already defined in 1.1_core
//	GL::POINT_SMOOTH already defined in 1.1_core
//	GL::LINE_STIPPLE already defined in 1.1_core
//	GL::LINE_STIPPLE_PATTERN already defined in 1.1_core
//	GL::LINE_STIPPLE_REPEAT already defined in 1.1_core
//	GL::LIST_MODE already defined in 1.1_core
//	GL::MAX_LIST_NESTING already defined in 1.1_core
//	GL::LIST_BASE already defined in 1.1_core
//	GL::LIST_INDEX already defined in 1.1_core
//	GL::POLYGON_STIPPLE already defined in 1.1_core
//	GL::EDGE_FLAG already defined in 1.1_core
//	GL::LIGHTING already defined in 1.1_core
//	GL::LIGHT_MODEL_LOCAL_VIEWER already defined in 1.1_core
//	GL::LIGHT_MODEL_TWO_SIDE already defined in 1.1_core
//	GL::LIGHT_MODEL_AMBIENT already defined in 1.1_core
//	GL::SHADE_MODEL already defined in 1.1_core
//	GL::COLOR_MATERIAL_FACE already defined in 1.1_core
//	GL::COLOR_MATERIAL_PARAMETER already defined in 1.1_core
//	GL::COLOR_MATERIAL already defined in 1.1_core
//	GL::FOG already defined in 1.1_core
//	GL::FOG_INDEX already defined in 1.1_core
//	GL::FOG_DENSITY already defined in 1.1_core
//	GL::FOG_START already defined in 1.1_core
//	GL::FOG_END already defined in 1.1_core
//	GL::FOG_MODE already defined in 1.1_core
//	GL::FOG_COLOR already defined in 1.1_core
//	GL::ACCUM_CLEAR_VALUE already defined in 1.1_core
//	GL::MATRIX_MODE already defined in 1.1_core
//	GL::NORMALIZE already defined in 1.1_core
//	GL::MODELVIEW_STACK_DEPTH already defined in 1.1_core
//	GL::PROJECTION_STACK_DEPTH already defined in 1.1_core
//	GL::TEXTURE_STACK_DEPTH already defined in 1.1_core
//	GL::MODELVIEW_MATRIX already defined in 1.1_core
//	GL::PROJECTION_MATRIX already defined in 1.1_core
//	GL::TEXTURE_MATRIX already defined in 1.1_core
//	GL::ATTRIB_STACK_DEPTH already defined in 1.1_core
//	GL::CLIENT_ATTRIB_STACK_DEPTH already defined in 1.1_core
//	GL::ALPHA_TEST already defined in 1.1_core
//	GL::ALPHA_TEST_FUNC already defined in 1.1_core
//	GL::ALPHA_TEST_REF already defined in 1.1_core
//	GL::LOGIC_OP already defined in 1.1_core
//	GL::INDEX_LOGIC_OP already defined in 1.1_core
//	GL::AUX_BUFFERS already defined in 1.1_core
//	GL::INDEX_CLEAR_VALUE already defined in 1.1_core
//	GL::INDEX_WRITEMASK already defined in 1.1_core
//	GL::INDEX_MODE already defined in 1.1_core
//	GL::RGBA_MODE already defined in 1.1_core
//	GL::RENDER_MODE already defined in 1.1_core
//	GL::PERSPECTIVE_CORRECTION_HINT already defined in 1.1_core
//	GL::POINT_SMOOTH_HINT already defined in 1.1_core
//	GL::FOG_HINT already defined in 1.1_core
//	GL::TEXTURE_GEN_S already defined in 1.1_core
//	GL::TEXTURE_GEN_T already defined in 1.1_core
//	GL::TEXTURE_GEN_R already defined in 1.1_core
//	GL::TEXTURE_GEN_Q already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_I already defined in 1.1_core
//	GL::PIXEL_MAP_S_TO_S already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_R already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_G already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_B already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_A already defined in 1.1_core
//	GL::PIXEL_MAP_R_TO_R already defined in 1.1_core
//	GL::PIXEL_MAP_G_TO_G already defined in 1.1_core
//	GL::PIXEL_MAP_B_TO_B already defined in 1.1_core
//	GL::PIXEL_MAP_A_TO_A already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_I_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_S_TO_S_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_R_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_G_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_B_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_I_TO_A_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_R_TO_R_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_G_TO_G_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_B_TO_B_SIZE already defined in 1.1_core
//	GL::PIXEL_MAP_A_TO_A_SIZE already defined in 1.1_core
//	GL::MAP_COLOR already defined in 1.1_core
//	GL::MAP_STENCIL already defined in 1.1_core
//	GL::INDEX_SHIFT already defined in 1.1_core
//	GL::INDEX_OFFSET already defined in 1.1_core
//	GL::RED_SCALE already defined in 1.1_core
//	GL::RED_BIAS already defined in 1.1_core
//	GL::ZOOM_X already defined in 1.1_core
//	GL::ZOOM_Y already defined in 1.1_core
//	GL::GREEN_SCALE already defined in 1.1_core
//	GL::GREEN_BIAS already defined in 1.1_core
//	GL::BLUE_SCALE already defined in 1.1_core
//	GL::BLUE_BIAS already defined in 1.1_core
//	GL::ALPHA_SCALE already defined in 1.1_core
//	GL::ALPHA_BIAS already defined in 1.1_core
//	GL::DEPTH_SCALE already defined in 1.1_core
//	GL::DEPTH_BIAS already defined in 1.1_core
//	GL::MAX_EVAL_ORDER already defined in 1.1_core
//	GL::MAX_LIGHTS already defined in 1.1_core
//	GL::MAX_CLIP_PLANES already defined in 1.1_core
//	GL::MAX_PIXEL_MAP_TABLE already defined in 1.1_core
//	GL::MAX_ATTRIB_STACK_DEPTH already defined in 1.1_core
//	GL::MAX_MODELVIEW_STACK_DEPTH already defined in 1.1_core
//	GL::MAX_NAME_STACK_DEPTH already defined in 1.1_core
//	GL::MAX_PROJECTION_STACK_DEPTH already defined in 1.1_core
//	GL::MAX_TEXTURE_STACK_DEPTH already defined in 1.1_core
//	GL::MAX_CLIENT_ATTRIB_STACK_DEPTH already defined in 1.1_core
//	GL::INDEX_BITS already defined in 1.1_core
//	GL::RED_BITS already defined in 1.1_core
//	GL::GREEN_BITS already defined in 1.1_core
//	GL::BLUE_BITS already defined in 1.1_core
//	GL::ALPHA_BITS already defined in 1.1_core
//	GL::DEPTH_BITS already defined in 1.1_core
//	GL::STENCIL_BITS already defined in 1.1_core
//	GL::ACCUM_RED_BITS already defined in 1.1_core
//	GL::ACCUM_GREEN_BITS already defined in 1.1_core
//	GL::ACCUM_BLUE_BITS already defined in 1.1_core
//	GL::ACCUM_ALPHA_BITS already defined in 1.1_core
//	GL::NAME_STACK_DEPTH already defined in 1.1_core
//	GL::AUTO_NORMAL already defined in 1.1_core
//	GL::MAP1_COLOR_4 already defined in 1.1_core
//	GL::MAP1_INDEX already defined in 1.1_core
//	GL::MAP1_NORMAL already defined in 1.1_core
//	GL::MAP1_TEXTURE_COORD_1 already defined in 1.1_core
//	GL::MAP1_TEXTURE_COORD_2 already defined in 1.1_core
//	GL::MAP1_TEXTURE_COORD_3 already defined in 1.1_core
//	GL::MAP1_TEXTURE_COORD_4 already defined in 1.1_core
//	GL::MAP1_VERTEX_3 already defined in 1.1_core
//	GL::MAP1_VERTEX_4 already defined in 1.1_core
//	GL::MAP2_COLOR_4 already defined in 1.1_core
//	GL::MAP2_INDEX already defined in 1.1_core
//	GL::MAP2_NORMAL already defined in 1.1_core
//	GL::MAP2_TEXTURE_COORD_1 already defined in 1.1_core
//	GL::MAP2_TEXTURE_COORD_2 already defined in 1.1_core
//	GL::MAP2_TEXTURE_COORD_3 already defined in 1.1_core
//	GL::MAP2_TEXTURE_COORD_4 already defined in 1.1_core
//	GL::MAP2_VERTEX_3 already defined in 1.1_core
//	GL::MAP2_VERTEX_4 already defined in 1.1_core
//	GL::MAP1_GRID_DOMAIN already defined in 1.1_core
//	GL::MAP1_GRID_SEGMENTS already defined in 1.1_core
//	GL::MAP2_GRID_DOMAIN already defined in 1.1_core
//	GL::MAP2_GRID_SEGMENTS already defined in 1.1_core
//	GL::FEEDBACK_BUFFER_POINTER already defined in 1.1_core
//	GL::FEEDBACK_BUFFER_SIZE already defined in 1.1_core
//	GL::FEEDBACK_BUFFER_TYPE already defined in 1.1_core
//	GL::SELECTION_BUFFER_POINTER already defined in 1.1_core
//	GL::SELECTION_BUFFER_SIZE already defined in 1.1_core
//	GL::TEXTURE_COMPONENTS already defined in 1.1_core
//	GL::TEXTURE_BORDER already defined in 1.1_core
//	GL::AMBIENT already defined in 1.1_core
//	GL::DIFFUSE already defined in 1.1_core
//	GL::SPECULAR already defined in 1.1_core
//	GL::POSITION already defined in 1.1_core
//	GL::SPOT_DIRECTION already defined in 1.1_core
//	GL::SPOT_EXPONENT already defined in 1.1_core
//	GL::SPOT_CUTOFF already defined in 1.1_core
//	GL::CONSTANT_ATTENUATION already defined in 1.1_core
//	GL::LINEAR_ATTENUATION already defined in 1.1_core
//	GL::QUADRATIC_ATTENUATION already defined in 1.1_core
//	GL::COMPILE already defined in 1.1_core
//	GL::COMPILE_AND_EXECUTE already defined in 1.1_core
//	GL::GL2_BYTES already defined in 1.1_core
//	GL::GL3_BYTES already defined in 1.1_core
//	GL::GL4_BYTES already defined in 1.1_core
//	GL::EMISSION already defined in 1.1_core
//	GL::SHININESS already defined in 1.1_core
//	GL::AMBIENT_AND_DIFFUSE already defined in 1.1_core
//	GL::COLOR_INDEXES already defined in 1.1_core
//	GL::MODELVIEW already defined in 1.1_core
//	GL::PROJECTION already defined in 1.1_core
//	GL::COLOR_INDEX already defined in 1.1_core
//	GL::LUMINANCE already defined in 1.1_core
//	GL::LUMINANCE_ALPHA already defined in 1.1_core
//	GL::BITMAP already defined in 1.1_core
//	GL::RENDER already defined in 1.1_core
//	GL::FEEDBACK already defined in 1.1_core
//	GL::SELECT already defined in 1.1_core
//	GL::FLAT already defined in 1.1_core
//	GL::SMOOTH already defined in 1.1_core
//	GL::S already defined in 1.1_core
//	GL::MULTISAMPLE_BIT already defined in 1.3_core
//	GL::T already defined in 1.1_core
//	GL::R already defined in 1.1_core
//	GL::Q already defined in 1.1_core
//	GL::MODULATE already defined in 1.1_core
//	GL::DECAL already defined in 1.1_core
//	GL::TEXTURE_ENV_MODE already defined in 1.1_core
//	GL::TEXTURE_ENV_COLOR already defined in 1.1_core
//	GL::TEXTURE_ENV already defined in 1.1_core
//	GL::EYE_LINEAR already defined in 1.1_core
//	GL::OBJECT_LINEAR already defined in 1.1_core
//	GL::SPHERE_MAP already defined in 1.1_core
//	GL::TEXTURE_GEN_MODE already defined in 1.1_core
//	GL::OBJECT_PLANE already defined in 1.1_core
//	GL::EYE_PLANE already defined in 1.1_core
//	GL::CLAMP already defined in 1.1_core
//	GL::V2F already defined in 1.1_core
//	GL::V3F already defined in 1.1_core
//	GL::C4UB_V2F already defined in 1.1_core
//	GL::C4UB_V3F already defined in 1.1_core
//	GL::C3F_V3F already defined in 1.1_core
//	GL::N3F_V3F already defined in 1.1_core
//	GL::C4F_N3F_V3F already defined in 1.1_core
//	GL::T2F_V3F already defined in 1.1_core
//	GL::T4F_V4F already defined in 1.1_core
//	GL::T2F_C4UB_V3F already defined in 1.1_core
//	GL::T2F_C3F_V3F already defined in 1.1_core
//	GL::T2F_N3F_V3F already defined in 1.1_core
//	GL::T2F_C4F_N3F_V3F already defined in 1.1_core
//	GL::T4F_C4F_N3F_V4F already defined in 1.1_core
//	GL::CLIP_PLANE0 already defined in 1.1_core
//	GL::CLIP_PLANE1 already defined in 1.1_core
//	GL::CLIP_PLANE2 already defined in 1.1_core
//	GL::CLIP_PLANE3 already defined in 1.1_core
//	GL::CLIP_PLANE4 already defined in 1.1_core
//	GL::CLIP_PLANE5 already defined in 1.1_core
//	GL::LIGHT0 already defined in 1.1_core
//	GL::LIGHT1 already defined in 1.1_core
//	GL::LIGHT2 already defined in 1.1_core
//	GL::LIGHT3 already defined in 1.1_core
//	GL::LIGHT4 already defined in 1.1_core
//	GL::LIGHT5 already defined in 1.1_core
//	GL::LIGHT6 already defined in 1.1_core
//	GL::LIGHT7 already defined in 1.1_core
//	GL::RESCALE_NORMAL already defined in 1.2_core
//	GL::ALPHA4 already defined in 1.1_core
//	GL::ALPHA8 already defined in 1.1_core
//	GL::ALPHA12 already defined in 1.1_core
//	GL::ALPHA16 already defined in 1.1_core
//	GL::LUMINANCE4 already defined in 1.1_core
//	GL::LUMINANCE8 already defined in 1.1_core
//	GL::LUMINANCE12 already defined in 1.1_core
//	GL::LUMINANCE16 already defined in 1.1_core
//	GL::LUMINANCE4_ALPHA4 already defined in 1.1_core
//	GL::LUMINANCE6_ALPHA2 already defined in 1.1_core
//	GL::LUMINANCE8_ALPHA8 already defined in 1.1_core
//	GL::LUMINANCE12_ALPHA4 already defined in 1.1_core
//	GL::LUMINANCE12_ALPHA12 already defined in 1.1_core
//	GL::LUMINANCE16_ALPHA16 already defined in 1.1_core
//	GL::INTENSITY already defined in 1.1_core
//	GL::INTENSITY4 already defined in 1.1_core
//	GL::INTENSITY8 already defined in 1.1_core
//	GL::INTENSITY12 already defined in 1.1_core
//	GL::INTENSITY16 already defined in 1.1_core
//	GL::TEXTURE_LUMINANCE_SIZE already defined in 1.1_core
//	GL::TEXTURE_INTENSITY_SIZE already defined in 1.1_core
//	GL::TEXTURE_PRIORITY already defined in 1.1_core
//	GL::TEXTURE_RESIDENT already defined in 1.1_core
//	GL::VERTEX_ARRAY already defined in 1.1_core
//	GL::NORMAL_ARRAY already defined in 1.1_core
//	GL::COLOR_ARRAY already defined in 1.1_core
//	GL::INDEX_ARRAY already defined in 1.1_core
//	GL::TEXTURE_COORD_ARRAY already defined in 1.1_core
//	GL::EDGE_FLAG_ARRAY already defined in 1.1_core
//	GL::VERTEX_ARRAY_SIZE already defined in 1.1_core
//	GL::VERTEX_ARRAY_TYPE already defined in 1.1_core
//	GL::VERTEX_ARRAY_STRIDE already defined in 1.1_core
//	GL::NORMAL_ARRAY_TYPE already defined in 1.1_core
//	GL::NORMAL_ARRAY_STRIDE already defined in 1.1_core
//	GL::COLOR_ARRAY_SIZE already defined in 1.1_core
//	GL::COLOR_ARRAY_TYPE already defined in 1.1_core
//	GL::COLOR_ARRAY_STRIDE already defined in 1.1_core
//	GL::INDEX_ARRAY_TYPE already defined in 1.1_core
//	GL::INDEX_ARRAY_STRIDE already defined in 1.1_core
//	GL::TEXTURE_COORD_ARRAY_SIZE already defined in 1.1_core
//	GL::TEXTURE_COORD_ARRAY_TYPE already defined in 1.1_core
//	GL::TEXTURE_COORD_ARRAY_STRIDE already defined in 1.1_core
//	GL::EDGE_FLAG_ARRAY_STRIDE already defined in 1.1_core
//	GL::VERTEX_ARRAY_POINTER already defined in 1.1_core
//	GL::NORMAL_ARRAY_POINTER already defined in 1.1_core
//	GL::COLOR_ARRAY_POINTER already defined in 1.1_core
//	GL::INDEX_ARRAY_POINTER already defined in 1.1_core
//	GL::TEXTURE_COORD_ARRAY_POINTER already defined in 1.1_core
//	GL::EDGE_FLAG_ARRAY_POINTER already defined in 1.1_core
//	GL::POINT_SIZE_MIN already defined in 1.4_core
//	GL::POINT_SIZE_MAX already defined in 1.4_core
//	GL::POINT_DISTANCE_ATTENUATION already defined in 1.4_core
//	GL::GENERATE_MIPMAP already defined in 1.4_core
//	GL::GENERATE_MIPMAP_HINT already defined in 1.4_core
//	GL::LIGHT_MODEL_COLOR_CONTROL already defined in 1.2_core
//	GL::SINGLE_COLOR already defined in 1.2_core
//	GL::SEPARATE_SPECULAR_COLOR already defined in 1.2_core
//	GL::FOG_COORD_SRC already defined in 1.5_core
//	GL::FOG_COORDINATE_SOURCE already defined in 1.4_core
//	GL::FOG_COORD already defined in 1.5_core
//	GL::FOG_COORDINATE already defined in 1.4_core
//	GL::FRAGMENT_DEPTH already defined in 1.4_core
//	GL::CURRENT_FOG_COORDINATE already defined in 1.4_core
//	GL::CURRENT_FOG_COORD already defined in 1.5_core
//	GL::FOG_COORDINATE_ARRAY_TYPE already defined in 1.4_core
//	GL::FOG_COORD_ARRAY_TYPE already defined in 1.5_core
//	GL::FOG_COORDINATE_ARRAY_STRIDE already defined in 1.4_core
//	GL::FOG_COORD_ARRAY_STRIDE already defined in 1.5_core
//	GL::FOG_COORD_ARRAY_POINTER already defined in 1.5_core
//	GL::FOG_COORDINATE_ARRAY_POINTER already defined in 1.4_core
//	GL::FOG_COORDINATE_ARRAY already defined in 1.4_core
//	GL::FOG_COORD_ARRAY already defined in 1.5_core
//	GL::COLOR_SUM already defined in 1.4_core
//	GL::CURRENT_SECONDARY_COLOR already defined in 1.4_core
//	GL::SECONDARY_COLOR_ARRAY_SIZE already defined in 1.4_core
//	GL::SECONDARY_COLOR_ARRAY_TYPE already defined in 1.4_core
//	GL::SECONDARY_COLOR_ARRAY_STRIDE already defined in 1.4_core
//	GL::SECONDARY_COLOR_ARRAY_POINTER already defined in 1.4_core
//	GL::SECONDARY_COLOR_ARRAY already defined in 1.4_core
//	GL::CURRENT_RASTER_SECONDARY_COLOR already defined in 2.1_core
//	GL::ALIASED_POINT_SIZE_RANGE already defined in 1.2_core
//	GL::CLIENT_ACTIVE_TEXTURE already defined in 1.3_core
//	GL::MAX_TEXTURE_UNITS already defined in 1.3_core
//	GL::TRANSPOSE_MODELVIEW_MATRIX already defined in 1.3_core
//	GL::TRANSPOSE_PROJECTION_MATRIX already defined in 1.3_core
//	GL::TRANSPOSE_TEXTURE_MATRIX already defined in 1.3_core
//	GL::TRANSPOSE_COLOR_MATRIX already defined in 1.3_core
//	GL::SUBTRACT already defined in 1.3_core
//	GL::COMPRESSED_ALPHA already defined in 1.3_core
//	GL::COMPRESSED_LUMINANCE already defined in 1.3_core
//	GL::COMPRESSED_LUMINANCE_ALPHA already defined in 1.3_core
//	GL::COMPRESSED_INTENSITY already defined in 1.3_core
//	GL::TEXTURE_FILTER_CONTROL already defined in 1.4_core
//	GL::NORMAL_MAP already defined in 1.3_core
//	GL::REFLECTION_MAP already defined in 1.3_core
//	GL::COMBINE already defined in 1.3_core
//	GL::COMBINE_RGB already defined in 1.3_core
//	GL::COMBINE_ALPHA already defined in 1.3_core
//	GL::RGB_SCALE already defined in 1.3_core
//	GL::ADD_SIGNED already defined in 1.3_core
//	GL::INTERPOLATE already defined in 1.3_core
//	GL::CONSTANT already defined in 1.3_core
//	GL::PRIMARY_COLOR already defined in 1.3_core
//	GL::PREVIOUS already defined in 1.3_core
//	GL::SOURCE0_RGB already defined in 1.3_core
//	GL::SRC0_RGB already defined in 1.5_core
//	GL::SOURCE1_RGB already defined in 1.3_core
//	GL::SRC1_RGB already defined in 1.5_core
//	GL::SRC2_RGB already defined in 1.5_core
//	GL::SOURCE2_RGB already defined in 1.3_core
//	GL::SOURCE0_ALPHA already defined in 1.3_core
//	GL::SRC0_ALPHA already defined in 1.5_core
//	GL::SOURCE1_ALPHA already defined in 1.3_core
//	GL::SRC2_ALPHA already defined in 1.5_core
//	GL::SOURCE2_ALPHA already defined in 1.3_core
//	GL::OPERAND0_RGB already defined in 1.3_core
//	GL::OPERAND1_RGB already defined in 1.3_core
//	GL::OPERAND2_RGB already defined in 1.3_core
//	GL::OPERAND0_ALPHA already defined in 1.3_core
//	GL::OPERAND1_ALPHA already defined in 1.3_core
//	GL::OPERAND2_ALPHA already defined in 1.3_core
//	GL::VERTEX_PROGRAM_TWO_SIDE already defined in 2.0_core
//	GL::DOT3_RGB already defined in 1.3_core
//	GL::DOT3_RGBA already defined in 1.3_core
//	GL::DEPTH_TEXTURE_MODE already defined in 1.4_core
//	GL::COMPARE_R_TO_TEXTURE already defined in 1.4_core
//	GL::POINT_SPRITE already defined in 2.0_core
//	GL::COORD_REPLACE already defined in 2.0_core
//	GL::MAX_TEXTURE_COORDS already defined in 2.0_core
//	GL::VERTEX_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::NORMAL_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::COLOR_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::INDEX_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::TEXTURE_COORD_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::EDGE_FLAG_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::SECONDARY_COLOR_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::FOG_COORD_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::FOG_COORDINATE_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::WEIGHT_ARRAY_BUFFER_BINDING already defined in 1.5_core
//	GL::CLAMP_VERTEX_COLOR already defined in 3.0_core
//	GL::CLAMP_FRAGMENT_COLOR already defined in 3.0_core
//	GL::TEXTURE_LUMINANCE_TYPE already defined in 3.0_compatibility
//	GL::TEXTURE_INTENSITY_TYPE already defined in 3.0_compatibility
//	GL::SLUMINANCE_ALPHA already defined in 2.1_core
//	GL::SLUMINANCE8_ALPHA8 already defined in 2.1_core
//	GL::SLUMINANCE already defined in 2.1_core
//	GL::SLUMINANCE8 already defined in 2.1_core
//	GL::COMPRESSED_SLUMINANCE already defined in 2.1_core
//	GL::COMPRESSED_SLUMINANCE_ALPHA already defined in 2.1_core
//	GL::ALPHA_INTEGER already defined in 3.0_core
//	GL::CLIENT_ALL_ATTRIB_BITS already defined in 1.1_core
//	GL::ALL_ATTRIB_BITS already defined in 1.1_core
};
//- end: Compatibility 3.2

//-//-- 
//- Core 3.3
enum GLcore_3_3
{
#	define FLUXGL_VERSION_3_3 1
	TIME_ELAPSED = 0x88BFu,
	SRC1_COLOR = 0x88F9u,
	ONE_MINUS_SRC1_COLOR = 0x88FAu,
	ONE_MINUS_SRC1_ALPHA = 0x88FBu,
	MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FCu,
	VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FEu,
	SAMPLER_BINDING = 0x8919u,
	ANY_SAMPLES_PASSED = 0x8C2Fu,
	INT_2_10_10_10_REV = 0x8D9Fu,
	TIMESTAMP = 0x8E28u,
	TEXTURE_SWIZZLE_R = 0x8E42u,
	TEXTURE_SWIZZLE_G = 0x8E43u,
	TEXTURE_SWIZZLE_B = 0x8E44u,
	TEXTURE_SWIZZLE_A = 0x8E45u,
	TEXTURE_SWIZZLE_RGBA = 0x8E46u,
	RGB10_A2UI = 0x906Fu,
};
//- end: Core 3.3

//-//-- 
//- Core 4.0
enum GLcore_4_0
{
#	define FLUXGL_VERSION_4_0 1
//	GL::QUADS already defined in 1.1_core
	PATCHES = 0x000Eu,
	UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0u,
	UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1u,
	MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886Cu,
	MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886Du,
	GEOMETRY_SHADER_INVOCATIONS = 0x887Fu,
	SAMPLE_SHADING = 0x8C36u,
	MIN_SAMPLE_SHADING_VALUE = 0x8C37u,
	ACTIVE_SUBROUTINES = 0x8DE5u,
	ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6u,
	MAX_SUBROUTINES = 0x8DE7u,
	MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8u,
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1Eu,
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1Fu,
	TRANSFORM_FEEDBACK = 0x8E22u,
	TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23u,
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24u,
	TRANSFORM_FEEDBACK_BINDING = 0x8E25u,
	ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47u,
	ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48u,
	ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49u,
	NUM_COMPATIBLE_SUBROUTINES = 0x8E4Au,
	COMPATIBLE_SUBROUTINES = 0x8E4Bu,
	MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5Au,
	MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5Bu,
	MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5Cu,
	FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5Du,
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5Eu,
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5Fu,
	MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70u,
	MAX_VERTEX_STREAMS = 0x8E71u,
//	GL::MAX_VERTEX_STREAMS already defined in 4.0_core
	PATCH_VERTICES = 0x8E72u,
	PATCH_DEFAULT_INNER_LEVEL = 0x8E73u,
	PATCH_DEFAULT_OUTER_LEVEL = 0x8E74u,
	TESS_CONTROL_OUTPUT_VERTICES = 0x8E75u,
	TESS_GEN_MODE = 0x8E76u,
	TESS_GEN_SPACING = 0x8E77u,
	TESS_GEN_VERTEX_ORDER = 0x8E78u,
	TESS_GEN_POINT_MODE = 0x8E79u,
	ISOLINES = 0x8E7Au,
	FRACTIONAL_ODD = 0x8E7Bu,
	FRACTIONAL_EVEN = 0x8E7Cu,
	MAX_PATCH_VERTICES = 0x8E7Du,
	MAX_TESS_GEN_LEVEL = 0x8E7Eu,
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7Fu,
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80u,
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81u,
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82u,
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83u,
	MAX_TESS_PATCH_COMPONENTS = 0x8E84u,
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85u,
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86u,
	TESS_EVALUATION_SHADER = 0x8E87u,
	TESS_CONTROL_SHADER = 0x8E88u,
	MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89u,
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8Au,
	DRAW_INDIRECT_BUFFER = 0x8F3Fu,
	DRAW_INDIRECT_BUFFER_BINDING = 0x8F43u,
	DOUBLE_MAT2 = 0x8F46u,
	DOUBLE_MAT3 = 0x8F47u,
	DOUBLE_MAT4 = 0x8F48u,
	DOUBLE_MAT2x3 = 0x8F49u,
	DOUBLE_MAT2x4 = 0x8F4Au,
	DOUBLE_MAT3x2 = 0x8F4Bu,
	DOUBLE_MAT3x4 = 0x8F4Cu,
	DOUBLE_MAT4x2 = 0x8F4Du,
	DOUBLE_MAT4x3 = 0x8F4Eu,
	DOUBLE_VEC2 = 0x8FFCu,
	DOUBLE_VEC3 = 0x8FFDu,
	DOUBLE_VEC4 = 0x8FFEu,
	TEXTURE_CUBE_MAP_ARRAY = 0x9009u,
	TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900Au,
	PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900Bu,
	SAMPLER_CUBE_MAP_ARRAY = 0x900Cu,
	SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900Du,
	INT_SAMPLER_CUBE_MAP_ARRAY = 0x900Eu,
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900Fu,
};
//- end: Core 4.0

//-//-- 
//- Core 4.1
enum GLcore_4_1
{
#	define FLUXGL_VERSION_4_1 1
	VERTEX_SHADER_BIT = 0x00000001u,
	FRAGMENT_SHADER_BIT = 0x00000002u,
	GEOMETRY_SHADER_BIT = 0x00000004u,
	TESS_CONTROL_SHADER_BIT = 0x00000008u,
	TESS_EVALUATION_SHADER_BIT = 0x00000010u,
	FIXED = 0x140Cu,
	PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257u,
	PROGRAM_SEPARABLE = 0x8258u,
	ACTIVE_PROGRAM = 0x8259u,
	PROGRAM_PIPELINE_BINDING = 0x825Au,
	MAX_VIEWPORTS = 0x825Bu,
	VIEWPORT_SUBPIXEL_BITS = 0x825Cu,
	VIEWPORT_BOUNDS_RANGE = 0x825Du,
	LAYER_PROVOKING_VERTEX = 0x825Eu,
	VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825Fu,
	UNDEFINED_VERTEX = 0x8260u,
	PROGRAM_BINARY_LENGTH = 0x8741u,
	NUM_PROGRAM_BINARY_FORMATS = 0x87FEu,
	PROGRAM_BINARY_FORMATS = 0x87FFu,
	IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9Au,
	IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9Bu,
	RGB565 = 0x8D62u,
	LOW_FLOAT = 0x8DF0u,
	MEDIUM_FLOAT = 0x8DF1u,
	HIGH_FLOAT = 0x8DF2u,
	LOW_INT = 0x8DF3u,
	MEDIUM_INT = 0x8DF4u,
	HIGH_INT = 0x8DF5u,
	SHADER_BINARY_FORMATS = 0x8DF8u,
	NUM_SHADER_BINARY_FORMATS = 0x8DF9u,
	SHADER_COMPILER = 0x8DFAu,
	MAX_VERTEX_UNIFORM_VECTORS = 0x8DFBu,
	MAX_VARYING_VECTORS = 0x8DFCu,
	MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFDu,
	ALL_SHADER_BITS = 0xFFFFFFFFu,
};
//- end: Core 4.1

//-//-- 
//- Core 4.2
enum GLcore_4_2
{
#	define FLUXGL_VERSION_4_2 1
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001u,
	ELEMENT_ARRAY_BARRIER_BIT = 0x00000002u,
	UNIFORM_BARRIER_BIT = 0x00000004u,
	TEXTURE_FETCH_BARRIER_BIT = 0x00000008u,
	SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020u,
	COMMAND_BARRIER_BIT = 0x00000040u,
	PIXEL_BUFFER_BARRIER_BIT = 0x00000080u,
	TEXTURE_UPDATE_BARRIER_BIT = 0x00000100u,
	BUFFER_UPDATE_BARRIER_BIT = 0x00000200u,
	FRAMEBUFFER_BARRIER_BIT = 0x00000400u,
	TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800u,
	ATOMIC_COUNTER_BARRIER_BIT = 0x00001000u,
	TRANSFORM_FEEDBACK_PAUSED = 0x8E23u,
	TRANSFORM_FEEDBACK_ACTIVE = 0x8E24u,
	COMPRESSED_RGBA_BPTC_UNORM = 0x8E8Cu,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8Du,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8Eu,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8Fu,
	COPY_READ_BUFFER_BINDING = 0x8F36u,
	COPY_WRITE_BUFFER_BINDING = 0x8F37u,
	MAX_IMAGE_UNITS = 0x8F38u,
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39u,
	IMAGE_BINDING_NAME = 0x8F3Au,
	IMAGE_BINDING_LEVEL = 0x8F3Bu,
	IMAGE_BINDING_LAYERED = 0x8F3Cu,
	IMAGE_BINDING_LAYER = 0x8F3Du,
	IMAGE_BINDING_ACCESS = 0x8F3Eu,
	IMAGE_1D = 0x904Cu,
	IMAGE_2D = 0x904Du,
	IMAGE_3D = 0x904Eu,
	IMAGE_2D_RECT = 0x904Fu,
	IMAGE_CUBE = 0x9050u,
	IMAGE_BUFFER = 0x9051u,
	IMAGE_1D_ARRAY = 0x9052u,
	IMAGE_2D_ARRAY = 0x9053u,
	IMAGE_CUBE_MAP_ARRAY = 0x9054u,
	IMAGE_2D_MULTISAMPLE = 0x9055u,
	IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056u,
	INT_IMAGE_1D = 0x9057u,
	INT_IMAGE_2D = 0x9058u,
	INT_IMAGE_3D = 0x9059u,
	INT_IMAGE_2D_RECT = 0x905Au,
	INT_IMAGE_CUBE = 0x905Bu,
	INT_IMAGE_BUFFER = 0x905Cu,
	INT_IMAGE_1D_ARRAY = 0x905Du,
	INT_IMAGE_2D_ARRAY = 0x905Eu,
	INT_IMAGE_CUBE_MAP_ARRAY = 0x905Fu,
	INT_IMAGE_2D_MULTISAMPLE = 0x9060u,
	INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061u,
	UNSIGNED_INT_IMAGE_1D = 0x9062u,
	UNSIGNED_INT_IMAGE_2D = 0x9063u,
	UNSIGNED_INT_IMAGE_3D = 0x9064u,
	UNSIGNED_INT_IMAGE_2D_RECT = 0x9065u,
	UNSIGNED_INT_IMAGE_CUBE = 0x9066u,
	UNSIGNED_INT_IMAGE_BUFFER = 0x9067u,
	UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068u,
	UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069u,
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906Au,
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906Bu,
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906Cu,
	MAX_IMAGE_SAMPLES = 0x906Du,
	IMAGE_BINDING_FORMAT = 0x906Eu,
	MIN_MAP_BUFFER_ALIGNMENT = 0x90BCu,
	IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7u,
	IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8u,
	IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9u,
	MAX_VERTEX_IMAGE_UNIFORMS = 0x90CAu,
	MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CBu,
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CCu,
	MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CDu,
	MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CEu,
	MAX_COMBINED_IMAGE_UNIFORMS = 0x90CFu,
	UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127u,
	UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128u,
	UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129u,
	UNPACK_COMPRESSED_BLOCK_SIZE = 0x912Au,
	PACK_COMPRESSED_BLOCK_WIDTH = 0x912Bu,
	PACK_COMPRESSED_BLOCK_HEIGHT = 0x912Cu,
	PACK_COMPRESSED_BLOCK_DEPTH = 0x912Du,
	PACK_COMPRESSED_BLOCK_SIZE = 0x912Eu,
	TEXTURE_IMMUTABLE_FORMAT = 0x912Fu,
	ATOMIC_COUNTER_BUFFER = 0x92C0u,
	ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1u,
	ATOMIC_COUNTER_BUFFER_START = 0x92C2u,
	ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3u,
	ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4u,
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5u,
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6u,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7u,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8u,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9u,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CAu,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CBu,
	MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CCu,
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CDu,
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CEu,
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CFu,
	MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0u,
	MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1u,
	MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2u,
	MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3u,
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4u,
	MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5u,
	MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6u,
	MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7u,
	MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8u,
	ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9u,
	UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DAu,
	UNSIGNED_INT_ATOMIC_COUNTER = 0x92DBu,
	MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DCu,
	NUM_SAMPLE_COUNTS = 0x9380u,
	ALL_BARRIER_BITS = 0xFFFFFFFFu,
};
//- end: Core 4.2

//-//-- 
//- Core 4.3
enum GLcore_4_3
{
#	define FLUXGL_VERSION_4_3 1
	CONTEXT_FLAG_DEBUG_BIT = 0x00000002u,
	COMPUTE_SHADER_BIT = 0x00000020u,
	SHADER_STORAGE_BARRIER_BIT = 0x00002000u,
//	GL::STACK_OVERFLOW already defined in 1.1_core
//	GL::STACK_UNDERFLOW already defined in 1.1_core
//	GL::VERTEX_ARRAY already defined in 1.1_core
	DEBUG_OUTPUT_SYNCHRONOUS = 0x8242u,
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243u,
	DEBUG_CALLBACK_FUNCTION = 0x8244u,
	DEBUG_CALLBACK_USER_PARAM = 0x8245u,
	DEBUG_SOURCE_API = 0x8246u,
	DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247u,
	DEBUG_SOURCE_SHADER_COMPILER = 0x8248u,
	DEBUG_SOURCE_THIRD_PARTY = 0x8249u,
	DEBUG_SOURCE_APPLICATION = 0x824Au,
	DEBUG_SOURCE_OTHER = 0x824Bu,
	DEBUG_TYPE_ERROR = 0x824Cu,
	DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824Du,
	DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824Eu,
	DEBUG_TYPE_PORTABILITY = 0x824Fu,
	DEBUG_TYPE_PERFORMANCE = 0x8250u,
	DEBUG_TYPE_OTHER = 0x8251u,
	MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262u,
	MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263u,
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264u,
	MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265u,
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266u,
	COMPUTE_WORK_GROUP_SIZE = 0x8267u,
	DEBUG_TYPE_MARKER = 0x8268u,
	DEBUG_TYPE_PUSH_GROUP = 0x8269u,
	DEBUG_TYPE_POP_GROUP = 0x826Au,
	DEBUG_SEVERITY_NOTIFICATION = 0x826Bu,
	MAX_DEBUG_GROUP_STACK_DEPTH = 0x826Cu,
	DEBUG_GROUP_STACK_DEPTH = 0x826Du,
	MAX_UNIFORM_LOCATIONS = 0x826Eu,
	INTERNALFORMAT_SUPPORTED = 0x826Fu,
	INTERNALFORMAT_PREFERRED = 0x8270u,
	INTERNALFORMAT_RED_SIZE = 0x8271u,
	INTERNALFORMAT_GREEN_SIZE = 0x8272u,
	INTERNALFORMAT_BLUE_SIZE = 0x8273u,
	INTERNALFORMAT_ALPHA_SIZE = 0x8274u,
	INTERNALFORMAT_DEPTH_SIZE = 0x8275u,
	INTERNALFORMAT_STENCIL_SIZE = 0x8276u,
	INTERNALFORMAT_SHARED_SIZE = 0x8277u,
	INTERNALFORMAT_RED_TYPE = 0x8278u,
	INTERNALFORMAT_GREEN_TYPE = 0x8279u,
	INTERNALFORMAT_BLUE_TYPE = 0x827Au,
	INTERNALFORMAT_ALPHA_TYPE = 0x827Bu,
	INTERNALFORMAT_DEPTH_TYPE = 0x827Cu,
	INTERNALFORMAT_STENCIL_TYPE = 0x827Du,
	MAX_WIDTH = 0x827Eu,
	MAX_HEIGHT = 0x827Fu,
	MAX_DEPTH = 0x8280u,
	MAX_LAYERS = 0x8281u,
	MAX_COMBINED_DIMENSIONS = 0x8282u,
	COLOR_COMPONENTS = 0x8283u,
	DEPTH_COMPONENTS = 0x8284u,
	STENCIL_COMPONENTS = 0x8285u,
	COLOR_RENDERABLE = 0x8286u,
	DEPTH_RENDERABLE = 0x8287u,
	STENCIL_RENDERABLE = 0x8288u,
	FRAMEBUFFER_RENDERABLE = 0x8289u,
	FRAMEBUFFER_RENDERABLE_LAYERED = 0x828Au,
	FRAMEBUFFER_BLEND = 0x828Bu,
	READ_PIXELS = 0x828Cu,
	READ_PIXELS_FORMAT = 0x828Du,
	READ_PIXELS_TYPE = 0x828Eu,
	TEXTURE_IMAGE_FORMAT = 0x828Fu,
	TEXTURE_IMAGE_TYPE = 0x8290u,
	GET_TEXTURE_IMAGE_FORMAT = 0x8291u,
	GET_TEXTURE_IMAGE_TYPE = 0x8292u,
	MIPMAP = 0x8293u,
	MANUAL_GENERATE_MIPMAP = 0x8294u,
	AUTO_GENERATE_MIPMAP = 0x8295u,
	COLOR_ENCODING = 0x8296u,
	SRGB_READ = 0x8297u,
	SRGB_WRITE = 0x8298u,
	FILTER = 0x829Au,
	VERTEX_TEXTURE = 0x829Bu,
	TESS_CONTROL_TEXTURE = 0x829Cu,
	TESS_EVALUATION_TEXTURE = 0x829Du,
	GEOMETRY_TEXTURE = 0x829Eu,
	FRAGMENT_TEXTURE = 0x829Fu,
	COMPUTE_TEXTURE = 0x82A0u,
	TEXTURE_SHADOW = 0x82A1u,
	TEXTURE_GATHER = 0x82A2u,
	TEXTURE_GATHER_SHADOW = 0x82A3u,
	SHADER_IMAGE_LOAD = 0x82A4u,
	SHADER_IMAGE_STORE = 0x82A5u,
	SHADER_IMAGE_ATOMIC = 0x82A6u,
	IMAGE_TEXEL_SIZE = 0x82A7u,
	IMAGE_COMPATIBILITY_CLASS = 0x82A8u,
	IMAGE_PIXEL_FORMAT = 0x82A9u,
	IMAGE_PIXEL_TYPE = 0x82AAu,
	SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82ACu,
	SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82ADu,
	SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AEu,
	SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AFu,
	TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1u,
	TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2u,
	TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3u,
	CLEAR_BUFFER = 0x82B4u,
	TEXTURE_VIEW = 0x82B5u,
	VIEW_COMPATIBILITY_CLASS = 0x82B6u,
	FULL_SUPPORT = 0x82B7u,
	CAVEAT_SUPPORT = 0x82B8u,
	IMAGE_CLASS_4_X_32 = 0x82B9u,
	IMAGE_CLASS_2_X_32 = 0x82BAu,
	IMAGE_CLASS_1_X_32 = 0x82BBu,
	IMAGE_CLASS_4_X_16 = 0x82BCu,
	IMAGE_CLASS_2_X_16 = 0x82BDu,
	IMAGE_CLASS_1_X_16 = 0x82BEu,
	IMAGE_CLASS_4_X_8 = 0x82BFu,
	IMAGE_CLASS_2_X_8 = 0x82C0u,
	IMAGE_CLASS_1_X_8 = 0x82C1u,
	IMAGE_CLASS_11_11_10 = 0x82C2u,
	IMAGE_CLASS_10_10_10_2 = 0x82C3u,
	VIEW_CLASS_128_BITS = 0x82C4u,
	VIEW_CLASS_96_BITS = 0x82C5u,
	VIEW_CLASS_64_BITS = 0x82C6u,
	VIEW_CLASS_48_BITS = 0x82C7u,
	VIEW_CLASS_32_BITS = 0x82C8u,
	VIEW_CLASS_24_BITS = 0x82C9u,
	VIEW_CLASS_16_BITS = 0x82CAu,
	VIEW_CLASS_8_BITS = 0x82CBu,
	VIEW_CLASS_S3TC_DXT1_RGB = 0x82CCu,
	VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CDu,
	VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CEu,
	VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CFu,
	VIEW_CLASS_RGTC1_RED = 0x82D0u,
	VIEW_CLASS_RGTC2_RG = 0x82D1u,
	VIEW_CLASS_BPTC_UNORM = 0x82D2u,
	VIEW_CLASS_BPTC_FLOAT = 0x82D3u,
	VERTEX_ATTRIB_BINDING = 0x82D4u,
	VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5u,
	VERTEX_BINDING_DIVISOR = 0x82D6u,
	VERTEX_BINDING_OFFSET = 0x82D7u,
	VERTEX_BINDING_STRIDE = 0x82D8u,
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9u,
	MAX_VERTEX_ATTRIB_BINDINGS = 0x82DAu,
	TEXTURE_VIEW_MIN_LEVEL = 0x82DBu,
	TEXTURE_VIEW_NUM_LEVELS = 0x82DCu,
	TEXTURE_VIEW_MIN_LAYER = 0x82DDu,
	TEXTURE_VIEW_NUM_LAYERS = 0x82DEu,
	TEXTURE_IMMUTABLE_LEVELS = 0x82DFu,
	BUFFER = 0x82E0u,
	SHADER = 0x82E1u,
	PROGRAM = 0x82E2u,
	QUERY = 0x82E3u,
	PROGRAM_PIPELINE = 0x82E4u,
	SAMPLER = 0x82E6u,
	MAX_LABEL_LENGTH = 0x82E8u,
	NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9u,
	VERTEX_ATTRIB_ARRAY_LONG = 0x874Eu,
	PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69u,
	ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6Au,
	MAX_ELEMENT_INDEX = 0x8D6Bu,
	MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39u,
	VERTEX_BINDING_BUFFER = 0x8F4Fu,
	SHADER_STORAGE_BUFFER = 0x90D2u,
	SHADER_STORAGE_BUFFER_BINDING = 0x90D3u,
	SHADER_STORAGE_BUFFER_START = 0x90D4u,
	SHADER_STORAGE_BUFFER_SIZE = 0x90D5u,
	MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6u,
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7u,
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8u,
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9u,
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DAu,
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DBu,
	MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DCu,
	MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DDu,
	MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DEu,
	SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DFu,
	DEPTH_STENCIL_TEXTURE_MODE = 0x90EAu,
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EBu,
	UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90ECu,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90EDu,
	DISPATCH_INDIRECT_BUFFER = 0x90EEu,
	DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EFu,
	MAX_DEBUG_MESSAGE_LENGTH = 0x9143u,
	MAX_DEBUG_LOGGED_MESSAGES = 0x9144u,
	DEBUG_LOGGED_MESSAGES = 0x9145u,
	DEBUG_SEVERITY_HIGH = 0x9146u,
	DEBUG_SEVERITY_MEDIUM = 0x9147u,
	DEBUG_SEVERITY_LOW = 0x9148u,
	TEXTURE_BUFFER_OFFSET = 0x919Du,
	TEXTURE_BUFFER_SIZE = 0x919Eu,
	TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919Fu,
	COMPUTE_SHADER = 0x91B9u,
	MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BBu,
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BCu,
	MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BDu,
	MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BEu,
	MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BFu,
	COMPRESSED_R11_EAC = 0x9270u,
	COMPRESSED_SIGNED_R11_EAC = 0x9271u,
	COMPRESSED_RG11_EAC = 0x9272u,
	COMPRESSED_SIGNED_RG11_EAC = 0x9273u,
	COMPRESSED_RGB8_ETC2 = 0x9274u,
	COMPRESSED_SRGB8_ETC2 = 0x9275u,
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276u,
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277u,
	COMPRESSED_RGBA8_ETC2_EAC = 0x9278u,
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279u,
	DEBUG_OUTPUT = 0x92E0u,
	UNIFORM = 0x92E1u,
	UNIFORM_BLOCK = 0x92E2u,
	PROGRAM_INPUT = 0x92E3u,
	PROGRAM_OUTPUT = 0x92E4u,
	BUFFER_VARIABLE = 0x92E5u,
	SHADER_STORAGE_BLOCK = 0x92E6u,
	IS_PER_PATCH = 0x92E7u,
	VERTEX_SUBROUTINE = 0x92E8u,
	TESS_CONTROL_SUBROUTINE = 0x92E9u,
	TESS_EVALUATION_SUBROUTINE = 0x92EAu,
	GEOMETRY_SUBROUTINE = 0x92EBu,
	FRAGMENT_SUBROUTINE = 0x92ECu,
	COMPUTE_SUBROUTINE = 0x92EDu,
	VERTEX_SUBROUTINE_UNIFORM = 0x92EEu,
	TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EFu,
	TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0u,
	GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1u,
	FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2u,
	COMPUTE_SUBROUTINE_UNIFORM = 0x92F3u,
	TRANSFORM_FEEDBACK_VARYING = 0x92F4u,
	ACTIVE_RESOURCES = 0x92F5u,
	MAX_NAME_LENGTH = 0x92F6u,
	MAX_NUM_ACTIVE_VARIABLES = 0x92F7u,
	MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8u,
	NAME_LENGTH = 0x92F9u,
	TYPE = 0x92FAu,
	ARRAY_SIZE = 0x92FBu,
	OFFSET = 0x92FCu,
	BLOCK_INDEX = 0x92FDu,
	ARRAY_STRIDE = 0x92FEu,
	MATRIX_STRIDE = 0x92FFu,
	IS_ROW_MAJOR = 0x9300u,
	ATOMIC_COUNTER_BUFFER_INDEX = 0x9301u,
	BUFFER_BINDING = 0x9302u,
	BUFFER_DATA_SIZE = 0x9303u,
	NUM_ACTIVE_VARIABLES = 0x9304u,
	ACTIVE_VARIABLES = 0x9305u,
	REFERENCED_BY_VERTEX_SHADER = 0x9306u,
	REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307u,
	REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308u,
	REFERENCED_BY_GEOMETRY_SHADER = 0x9309u,
	REFERENCED_BY_FRAGMENT_SHADER = 0x930Au,
	REFERENCED_BY_COMPUTE_SHADER = 0x930Bu,
	TOP_LEVEL_ARRAY_SIZE = 0x930Cu,
	TOP_LEVEL_ARRAY_STRIDE = 0x930Du,
	LOCATION = 0x930Eu,
	LOCATION_INDEX = 0x930Fu,
	FRAMEBUFFER_DEFAULT_WIDTH = 0x9310u,
	FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311u,
	FRAMEBUFFER_DEFAULT_LAYERS = 0x9312u,
	FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313u,
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314u,
	MAX_FRAMEBUFFER_WIDTH = 0x9315u,
	MAX_FRAMEBUFFER_HEIGHT = 0x9316u,
	MAX_FRAMEBUFFER_LAYERS = 0x9317u,
	MAX_FRAMEBUFFER_SAMPLES = 0x9318u,
};
//- end: Core 4.3

//-//-- 
//- Compatibility 4.3
enum GLcompat_4_3
{
#	define FLUXGL_VERSION_4_3 1
	DISPLAY_LIST = 0x82E7u,
};
//- end: Compatibility 4.3

//-//-- 
//- Core 4.4
enum GLcore_4_4
{
#	define FLUXGL_VERSION_4_4 1
	CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000u,
	QUERY_BUFFER_BARRIER_BIT = 0x00008000u,
//	GL::MAP_READ_BIT already defined in 3.0_core
//	GL::MAP_WRITE_BIT already defined in 3.0_core
	MAP_PERSISTENT_BIT = 0x0040u,
	MAP_COHERENT_BIT = 0x0080u,
	DYNAMIC_STORAGE_BIT = 0x0100u,
	CLIENT_STORAGE_BIT = 0x0200u,
//	GL::STENCIL_INDEX already defined in 1.1_core
	BUFFER_IMMUTABLE_STORAGE = 0x821Fu,
	BUFFER_STORAGE_FLAGS = 0x8220u,
	PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221u,
	MAX_VERTEX_ATTRIB_STRIDE = 0x82E5u,
	MIRROR_CLAMP_TO_EDGE = 0x8743u,
	TEXTURE_BUFFER_BINDING = 0x8C2Au,
//	GL::UNSIGNED_INT_10F_11F_11F_REV already defined in 3.0_core
//	GL::TRANSFORM_FEEDBACK_BUFFER already defined in 3.0_core
//	GL::STENCIL_INDEX8 already defined in 3.0_core
	QUERY_BUFFER = 0x9192u,
	QUERY_BUFFER_BINDING = 0x9193u,
	QUERY_RESULT_NO_WAIT = 0x9194u,
	LOCATION_COMPONENT = 0x934Au,
	TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934Bu,
	TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934Cu,
	CLEAR_TEXTURE = 0x9365u,
};
//- end: Core 4.4

//-//-- 
//- Core 4.5
enum GLcore_4_5
{
#	define FLUXGL_VERSION_4_5 1
//	GL::NONE already defined in 1.1_core
//	GL::GLNO_ERROR already defined in 1.1_core
	CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004u,
//	GL::BACK already defined in 1.1_core
	CONTEXT_LOST = 0x0507u,
//	GL::CONTEXT_LOST already defined in 4.5_core
	TEXTURE_TARGET = 0x1006u,
//	GL::TEXTURE_BINDING_1D already defined in 1.1_core
//	GL::TEXTURE_BINDING_2D already defined in 1.1_core
//	GL::TEXTURE_BINDING_3D already defined in 1.2_core
	LOSE_CONTEXT_ON_RESET = 0x8252u,
	GUILTY_CONTEXT_RESET = 0x8253u,
	INNOCENT_CONTEXT_RESET = 0x8254u,
	UNKNOWN_CONTEXT_RESET = 0x8255u,
	RESET_NOTIFICATION_STRATEGY = 0x8256u,
	NO_RESET_NOTIFICATION = 0x8261u,
	QUERY_TARGET = 0x82EAu,
	MAX_CULL_DISTANCES = 0x82F9u,
	MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FAu,
	CONTEXT_RELEASE_BEHAVIOR = 0x82FBu,
	CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FCu,
//	GL::TEXTURE_BINDING_RECTANGLE already defined in 3.1_core
//	GL::TEXTURE_BINDING_CUBE_MAP already defined in 1.3_core
//	GL::TEXTURE_BINDING_1D_ARRAY already defined in 3.0_core
//	GL::TEXTURE_BINDING_2D_ARRAY already defined in 3.0_core
//	GL::TEXTURE_BINDING_BUFFER already defined in 3.1_core
//	GL::LOWER_LEFT already defined in 2.0_core
//	GL::UPPER_LEFT already defined in 2.0_core
	QUERY_WAIT_INVERTED = 0x8E17u,
	QUERY_NO_WAIT_INVERTED = 0x8E18u,
	QUERY_BY_REGION_WAIT_INVERTED = 0x8E19u,
	QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1Au,
//	GL::TEXTURE_BINDING_CUBE_MAP_ARRAY already defined in 4.0_core
//	GL::TEXTURE_BINDING_2D_MULTISAMPLE already defined in 3.2_core
//	GL::TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
	CLIP_ORIGIN = 0x935Cu,
	CLIP_DEPTH_MODE = 0x935Du,
	NEGATIVE_ONE_TO_ONE = 0x935Eu,
	ZERO_TO_ONE = 0x935Fu,
};
//- end: Core 4.5

//-//-- 
//- Core 4.6
enum GLcore_4_6
{
#	define FLUXGL_VERSION_4_6 1
	PARAMETER_BUFFER = 0x80EEu,
	PARAMETER_BUFFER_BINDING = 0x80EFu,
	SHADER_BINARY_FORMAT_SPIR_V = 0x9551u,
	SPIR_V_BINARY = 0x9552u,
	SPIR_V_EXTENSIONS = 0x9553u,
	NUM_SPIR_V_EXTENSIONS = 0x9554u,
};
//- end: Core 4.6

//-//-- 
//- Ext: AMD_blend_minmax_factor
enum GLext_AMD_blend_minmax_factor
{
#	define FLUXGL_AMD_blend_minmax_factor 1
	FACTOR_MIN_AMD = 0x901Cu,
	FACTOR_MAX_AMD = 0x901Du,
};
//- end: AMD_blend_minmax_factor

//-//-- 
//- Ext: AMD_debug_output
enum GLext_AMD_debug_output
{
#	define FLUXGL_AMD_debug_output 1
	MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143u,
	MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144u,
	DEBUG_LOGGED_MESSAGES_AMD = 0x9145u,
	DEBUG_SEVERITY_HIGH_AMD = 0x9146u,
	DEBUG_SEVERITY_MEDIUM_AMD = 0x9147u,
	DEBUG_SEVERITY_LOW_AMD = 0x9148u,
	DEBUG_CATEGORY_API_ERROR_AMD = 0x9149u,
	DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914Au,
	DEBUG_CATEGORY_DEPRECATION_AMD = 0x914Bu,
	DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914Cu,
	DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914Du,
	DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914Eu,
	DEBUG_CATEGORY_APPLICATION_AMD = 0x914Fu,
	DEBUG_CATEGORY_OTHER_AMD = 0x9150u,
};
//- end: AMD_debug_output

//-//-- 
//- Ext: AMD_depth_clamp_separate
enum GLext_AMD_depth_clamp_separate
{
#	define FLUXGL_AMD_depth_clamp_separate 1
	DEPTH_CLAMP_NEAR_AMD = 0x901Eu,
	DEPTH_CLAMP_FAR_AMD = 0x901Fu,
};
//- end: AMD_depth_clamp_separate

//-//-- 
//- Ext: AMD_gpu_shader_int64
enum GLext_AMD_gpu_shader_int64
{
#	define FLUXGL_AMD_gpu_shader_int64 1
	INT64_NV = 0x140Eu,
	UNSIGNED_INT64_NV = 0x140Fu,
	INT8_NV = 0x8FE0u,
	INT8_VEC2_NV = 0x8FE1u,
	INT8_VEC3_NV = 0x8FE2u,
	INT8_VEC4_NV = 0x8FE3u,
	INT16_NV = 0x8FE4u,
	INT16_VEC2_NV = 0x8FE5u,
	INT16_VEC3_NV = 0x8FE6u,
	INT16_VEC4_NV = 0x8FE7u,
	INT64_VEC2_NV = 0x8FE9u,
	INT64_VEC3_NV = 0x8FEAu,
	INT64_VEC4_NV = 0x8FEBu,
	UNSIGNED_INT8_NV = 0x8FECu,
	UNSIGNED_INT8_VEC2_NV = 0x8FEDu,
	UNSIGNED_INT8_VEC3_NV = 0x8FEEu,
	UNSIGNED_INT8_VEC4_NV = 0x8FEFu,
	UNSIGNED_INT16_NV = 0x8FF0u,
	UNSIGNED_INT16_VEC2_NV = 0x8FF1u,
	UNSIGNED_INT16_VEC3_NV = 0x8FF2u,
	UNSIGNED_INT16_VEC4_NV = 0x8FF3u,
	UNSIGNED_INT64_VEC2_NV = 0x8FF5u,
	UNSIGNED_INT64_VEC3_NV = 0x8FF6u,
	UNSIGNED_INT64_VEC4_NV = 0x8FF7u,
	FLOAT16_NV = 0x8FF8u,
	FLOAT16_VEC2_NV = 0x8FF9u,
	FLOAT16_VEC3_NV = 0x8FFAu,
	FLOAT16_VEC4_NV = 0x8FFBu,
};
//- end: AMD_gpu_shader_int64

//-//-- 
//- Ext: AMD_interleaved_elements
enum GLext_AMD_interleaved_elements
{
#	define FLUXGL_AMD_interleaved_elements 1
//	GL::RED already defined in 1.1_core
//	GL::GREEN already defined in 1.1_core
//	GL::BLUE already defined in 1.1_core
//	GL::ALPHA already defined in 1.1_core
//	GL::RG8UI already defined in 3.0_core
//	GL::RG16UI already defined in 3.0_core
//	GL::RGBA8UI already defined in 3.0_core
	VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4u,
	VERTEX_ID_SWIZZLE_AMD = 0x91A5u,
};
//- end: AMD_interleaved_elements

//-//-- 
//- Ext: AMD_name_gen_delete
enum GLext_AMD_name_gen_delete
{
#	define FLUXGL_AMD_name_gen_delete 1
	DATA_BUFFER_AMD = 0x9151u,
	PERFORMANCE_MONITOR_AMD = 0x9152u,
	QUERY_OBJECT_AMD = 0x9153u,
	VERTEX_ARRAY_OBJECT_AMD = 0x9154u,
	SAMPLER_OBJECT_AMD = 0x9155u,
};
//- end: AMD_name_gen_delete

//-//-- 
//- Ext: AMD_occlusion_query_event
enum GLext_AMD_occlusion_query_event
{
#	define FLUXGL_AMD_occlusion_query_event 1
	QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001u,
	QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002u,
	QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004u,
	QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008u,
	OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874Fu,
	QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFFu,
};
//- end: AMD_occlusion_query_event

//-//-- 
//- Ext: AMD_performance_monitor
enum GLext_AMD_performance_monitor
{
#	define FLUXGL_AMD_performance_monitor 1
	COUNTER_TYPE_AMD = 0x8BC0u,
	COUNTER_RANGE_AMD = 0x8BC1u,
	UNSIGNED_INT64_AMD = 0x8BC2u,
	PERCENTAGE_AMD = 0x8BC3u,
	PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4u,
	PERFMON_RESULT_SIZE_AMD = 0x8BC5u,
	PERFMON_RESULT_AMD = 0x8BC6u,
};
//- end: AMD_performance_monitor

//-//-- 
//- Ext: AMD_pinned_memory
enum GLext_AMD_pinned_memory
{
#	define FLUXGL_AMD_pinned_memory 1
	EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160u,
};
//- end: AMD_pinned_memory

//-//-- 
//- Ext: AMD_query_buffer_object
enum GLext_AMD_query_buffer_object
{
#	define FLUXGL_AMD_query_buffer_object 1
	QUERY_BUFFER_AMD = 0x9192u,
	QUERY_BUFFER_BINDING_AMD = 0x9193u,
	QUERY_RESULT_NO_WAIT_AMD = 0x9194u,
};
//- end: AMD_query_buffer_object

//-//-- 
//- Ext: AMD_sample_positions
enum GLext_AMD_sample_positions
{
#	define FLUXGL_AMD_sample_positions 1
	SUBSAMPLE_DISTANCE_AMD = 0x883Fu,
};
//- end: AMD_sample_positions

//-//-- 
//- Ext: AMD_seamless_cubemap_per_texture
enum GLext_AMD_seamless_cubemap_per_texture
{
#	define FLUXGL_AMD_seamless_cubemap_per_texture 1
//	GL::TEXTURE_CUBE_MAP_SEAMLESS already defined in 3.2_core
};
//- end: AMD_seamless_cubemap_per_texture

//-//-- 
//- Ext: AMD_sparse_texture
enum GLext_AMD_sparse_texture
{
#	define FLUXGL_AMD_sparse_texture 1
	TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001u,
	VIRTUAL_PAGE_SIZE_X_AMD = 0x9195u,
	VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196u,
	VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197u,
	MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198u,
	MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199u,
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919Au,
	MIN_SPARSE_LEVEL_AMD = 0x919Bu,
	MIN_LOD_WARNING_AMD = 0x919Cu,
};
//- end: AMD_sparse_texture

//-//-- 
//- Ext: AMD_stencil_operation_extended
enum GLext_AMD_stencil_operation_extended
{
#	define FLUXGL_AMD_stencil_operation_extended 1
	SET_AMD = 0x874Au,
	REPLACE_VALUE_AMD = 0x874Bu,
	STENCIL_OP_VALUE_AMD = 0x874Cu,
	STENCIL_BACK_OP_VALUE_AMD = 0x874Du,
};
//- end: AMD_stencil_operation_extended

//-//-- 
//- Ext: AMD_transform_feedback4
enum GLext_AMD_transform_feedback4
{
#	define FLUXGL_AMD_transform_feedback4 1
	STREAM_RASTERIZATION_AMD = 0x91A0u,
};
//- end: AMD_transform_feedback4

//-//-- 
//- Ext: AMD_vertex_shader_tessellator
enum GLext_AMD_vertex_shader_tessellator
{
#	define FLUXGL_AMD_vertex_shader_tessellator 1
	SAMPLER_BUFFER_AMD = 0x9001u,
	INT_SAMPLER_BUFFER_AMD = 0x9002u,
	UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003u,
	TESSELLATION_MODE_AMD = 0x9004u,
	TESSELLATION_FACTOR_AMD = 0x9005u,
	DISCRETE_AMD = 0x9006u,
	CONTINUOUS_AMD = 0x9007u,
};
//- end: AMD_vertex_shader_tessellator

//-//-- 
//- Ext: APPLE_aux_depth_stencil
enum GLext_APPLE_aux_depth_stencil
{
#	define FLUXGL_APPLE_aux_depth_stencil 1
	AUX_DEPTH_STENCIL_APPLE = 0x8A14u,
};
//- end: APPLE_aux_depth_stencil

//-//-- 
//- Ext: APPLE_client_storage
enum GLext_APPLE_client_storage
{
#	define FLUXGL_APPLE_client_storage 1
	UNPACK_CLIENT_STORAGE_APPLE = 0x85B2u,
};
//- end: APPLE_client_storage

//-//-- 
//- Ext: APPLE_element_array
enum GLext_APPLE_element_array
{
#	define FLUXGL_APPLE_element_array 1
	ELEMENT_ARRAY_APPLE = 0x8A0Cu,
	ELEMENT_ARRAY_TYPE_APPLE = 0x8A0Du,
	ELEMENT_ARRAY_POINTER_APPLE = 0x8A0Eu,
};
//- end: APPLE_element_array

//-//-- 
//- Ext: APPLE_fence
enum GLext_APPLE_fence
{
#	define FLUXGL_APPLE_fence 1
	DRAW_PIXELS_APPLE = 0x8A0Au,
	FENCE_APPLE = 0x8A0Bu,
};
//- end: APPLE_fence

//-//-- 
//- Ext: APPLE_float_pixels
enum GLext_APPLE_float_pixels
{
#	define FLUXGL_APPLE_float_pixels 1
	HALF_APPLE = 0x140Bu,
	RGBA_FLOAT32_APPLE = 0x8814u,
	RGB_FLOAT32_APPLE = 0x8815u,
	ALPHA_FLOAT32_APPLE = 0x8816u,
	INTENSITY_FLOAT32_APPLE = 0x8817u,
	LUMINANCE_FLOAT32_APPLE = 0x8818u,
	LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819u,
	RGBA_FLOAT16_APPLE = 0x881Au,
	RGB_FLOAT16_APPLE = 0x881Bu,
	ALPHA_FLOAT16_APPLE = 0x881Cu,
	INTENSITY_FLOAT16_APPLE = 0x881Du,
	LUMINANCE_FLOAT16_APPLE = 0x881Eu,
	LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881Fu,
	COLOR_FLOAT_APPLE = 0x8A0Fu,
};
//- end: APPLE_float_pixels

//-//-- 
//- Ext: APPLE_flush_buffer_range
enum GLext_APPLE_flush_buffer_range
{
#	define FLUXGL_APPLE_flush_buffer_range 1
	BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12u,
	BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13u,
};
//- end: APPLE_flush_buffer_range

//-//-- 
//- Ext: APPLE_object_purgeable
enum GLext_APPLE_object_purgeable
{
#	define FLUXGL_APPLE_object_purgeable 1
	BUFFER_OBJECT_APPLE = 0x85B3u,
	RELEASED_APPLE = 0x8A19u,
	VOLATILE_APPLE = 0x8A1Au,
	RETAINED_APPLE = 0x8A1Bu,
	UNDEFINED_APPLE = 0x8A1Cu,
	PURGEABLE_APPLE = 0x8A1Du,
};
//- end: APPLE_object_purgeable

//-//-- 
//- Ext: APPLE_rgb_422
enum GLext_APPLE_rgb_422
{
#	define FLUXGL_APPLE_rgb_422 1
	UNSIGNED_SHORT_8_8_APPLE = 0x85BAu,
	UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BBu,
	RGB_422_APPLE = 0x8A1Fu,
	RGB_RAW_422_APPLE = 0x8A51u,
};
//- end: APPLE_rgb_422

//-//-- 
//- Ext: APPLE_row_bytes
enum GLext_APPLE_row_bytes
{
#	define FLUXGL_APPLE_row_bytes 1
	PACK_ROW_BYTES_APPLE = 0x8A15u,
	UNPACK_ROW_BYTES_APPLE = 0x8A16u,
};
//- end: APPLE_row_bytes

//-//-- 
//- Ext: APPLE_specular_vector
enum GLext_APPLE_specular_vector
{
#	define FLUXGL_APPLE_specular_vector 1
	LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0u,
};
//- end: APPLE_specular_vector

//-//-- 
//- Ext: APPLE_texture_range
enum GLext_APPLE_texture_range
{
#	define FLUXGL_APPLE_texture_range 1
	TEXTURE_RANGE_LENGTH_APPLE = 0x85B7u,
	TEXTURE_RANGE_POINTER_APPLE = 0x85B8u,
	TEXTURE_STORAGE_HINT_APPLE = 0x85BCu,
	STORAGE_PRIVATE_APPLE = 0x85BDu,
	STORAGE_CACHED_APPLE = 0x85BEu,
	STORAGE_SHARED_APPLE = 0x85BFu,
};
//- end: APPLE_texture_range

//-//-- 
//- Ext: APPLE_transform_hint
enum GLext_APPLE_transform_hint
{
#	define FLUXGL_APPLE_transform_hint 1
	TRANSFORM_HINT_APPLE = 0x85B1u,
};
//- end: APPLE_transform_hint

//-//-- 
//- Ext: APPLE_vertex_array_object
enum GLext_APPLE_vertex_array_object
{
#	define FLUXGL_APPLE_vertex_array_object 1
	VERTEX_ARRAY_BINDING_APPLE = 0x85B5u,
};
//- end: APPLE_vertex_array_object

//-//-- 
//- Ext: APPLE_vertex_array_range
enum GLext_APPLE_vertex_array_range
{
#	define FLUXGL_APPLE_vertex_array_range 1
	VERTEX_ARRAY_RANGE_APPLE = 0x851Du,
	VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851Eu,
	VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851Fu,
	VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521u,
	STORAGE_CLIENT_APPLE = 0x85B4u,
//	GL::STORAGE_CACHED_APPLE already defined in APPLE_texture_range
//	GL::STORAGE_SHARED_APPLE already defined in APPLE_texture_range
};
//- end: APPLE_vertex_array_range

//-//-- 
//- Ext: APPLE_vertex_program_evaluators
enum GLext_APPLE_vertex_program_evaluators
{
#	define FLUXGL_APPLE_vertex_program_evaluators 1
	VERTEX_ATTRIB_MAP1_APPLE = 0x8A00u,
	VERTEX_ATTRIB_MAP2_APPLE = 0x8A01u,
	VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02u,
	VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03u,
	VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04u,
	VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05u,
	VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06u,
	VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07u,
	VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08u,
	VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09u,
};
//- end: APPLE_vertex_program_evaluators

//-//-- 
//- Ext: APPLE_ycbcr_422
enum GLext_APPLE_ycbcr_422
{
#	define FLUXGL_APPLE_ycbcr_422 1
	YCBCR_422_APPLE = 0x85B9u,
//	GL::UNSIGNED_SHORT_8_8_APPLE already defined in APPLE_rgb_422
//	GL::UNSIGNED_SHORT_8_8_REV_APPLE already defined in APPLE_rgb_422
};
//- end: APPLE_ycbcr_422

//-//-- 
//- Ext: ARB_ES2_compatibility
enum GLext_ARB_ES2_compatibility
{
#	define FLUXGL_ARB_ES2_compatibility 1
//	GL::FIXED already defined in 4.1_core
//	GL::IMPLEMENTATION_COLOR_READ_TYPE already defined in 4.1_core
//	GL::IMPLEMENTATION_COLOR_READ_FORMAT already defined in 4.1_core
//	GL::RGB565 already defined in 4.1_core
//	GL::LOW_FLOAT already defined in 4.1_core
//	GL::MEDIUM_FLOAT already defined in 4.1_core
//	GL::HIGH_FLOAT already defined in 4.1_core
//	GL::LOW_INT already defined in 4.1_core
//	GL::MEDIUM_INT already defined in 4.1_core
//	GL::HIGH_INT already defined in 4.1_core
//	GL::SHADER_BINARY_FORMATS already defined in 4.1_core
//	GL::NUM_SHADER_BINARY_FORMATS already defined in 4.1_core
//	GL::SHADER_COMPILER already defined in 4.1_core
//	GL::MAX_VERTEX_UNIFORM_VECTORS already defined in 4.1_core
//	GL::MAX_VARYING_VECTORS already defined in 4.1_core
//	GL::MAX_FRAGMENT_UNIFORM_VECTORS already defined in 4.1_core
};
//- end: ARB_ES2_compatibility

//-//-- 
//- Ext: ARB_ES3_1_compatibility
enum GLext_ARB_ES3_1_compatibility
{
#	define FLUXGL_ARB_ES3_1_compatibility 1
//	GL::BACK already defined in 1.1_core
};
//- end: ARB_ES3_1_compatibility

//-//-- 
//- Ext: ARB_ES3_2_compatibility
enum GLext_ARB_ES3_2_compatibility
{
#	define FLUXGL_ARB_ES3_2_compatibility 1
	PRIMITIVE_BOUNDING_BOX_ARB = 0x92BEu,
	MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381u,
	MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382u,
};
//- end: ARB_ES3_2_compatibility

//-//-- 
//- Ext: ARB_ES3_compatibility
enum GLext_ARB_ES3_compatibility
{
#	define FLUXGL_ARB_ES3_compatibility 1
//	GL::PRIMITIVE_RESTART_FIXED_INDEX already defined in 4.3_core
//	GL::ANY_SAMPLES_PASSED_CONSERVATIVE already defined in 4.3_core
//	GL::MAX_ELEMENT_INDEX already defined in 4.3_core
//	GL::COMPRESSED_R11_EAC already defined in 4.3_core
//	GL::COMPRESSED_SIGNED_R11_EAC already defined in 4.3_core
//	GL::COMPRESSED_RG11_EAC already defined in 4.3_core
//	GL::COMPRESSED_SIGNED_RG11_EAC already defined in 4.3_core
//	GL::COMPRESSED_RGB8_ETC2 already defined in 4.3_core
//	GL::COMPRESSED_SRGB8_ETC2 already defined in 4.3_core
//	GL::COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 already defined in 4.3_core
//	GL::COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 already defined in 4.3_core
//	GL::COMPRESSED_RGBA8_ETC2_EAC already defined in 4.3_core
//	GL::COMPRESSED_SRGB8_ALPHA8_ETC2_EAC already defined in 4.3_core
};
//- end: ARB_ES3_compatibility

//-//-- 
//- Ext: ARB_bindless_texture
enum GLext_ARB_bindless_texture
{
#	define FLUXGL_ARB_bindless_texture 1
	UNSIGNED_INT64_ARB = 0x140Fu,
};
//- end: ARB_bindless_texture

//-//-- 
//- Ext: ARB_blend_func_extended
enum GLext_ARB_blend_func_extended
{
#	define FLUXGL_ARB_blend_func_extended 1
//	GL::SRC1_ALPHA already defined in 1.5_core
//	GL::SRC1_COLOR already defined in 3.3_core
//	GL::ONE_MINUS_SRC1_COLOR already defined in 3.3_core
//	GL::ONE_MINUS_SRC1_ALPHA already defined in 3.3_core
//	GL::MAX_DUAL_SOURCE_DRAW_BUFFERS already defined in 3.3_core
};
//- end: ARB_blend_func_extended

//-//-- 
//- Ext: ARB_buffer_storage
enum GLext_ARB_buffer_storage
{
#	define FLUXGL_ARB_buffer_storage 1
//	GL::CLIENT_MAPPED_BUFFER_BARRIER_BIT already defined in 4.4_core
//	GL::MAP_READ_BIT already defined in 3.0_core
//	GL::MAP_WRITE_BIT already defined in 3.0_core
//	GL::MAP_PERSISTENT_BIT already defined in 4.4_core
//	GL::MAP_COHERENT_BIT already defined in 4.4_core
//	GL::DYNAMIC_STORAGE_BIT already defined in 4.4_core
//	GL::CLIENT_STORAGE_BIT already defined in 4.4_core
//	GL::BUFFER_IMMUTABLE_STORAGE already defined in 4.4_core
//	GL::BUFFER_STORAGE_FLAGS already defined in 4.4_core
};
//- end: ARB_buffer_storage

//-//-- 
//- Ext: ARB_cl_event
enum GLext_ARB_cl_event
{
#	define FLUXGL_ARB_cl_event 1
	SYNC_CL_EVENT_ARB = 0x8240u,
	SYNC_CL_EVENT_COMPLETE_ARB = 0x8241u,
};
//- end: ARB_cl_event

//-//-- 
//- Ext: ARB_clear_texture
enum GLext_ARB_clear_texture
{
#	define FLUXGL_ARB_clear_texture 1
//	GL::CLEAR_TEXTURE already defined in 4.4_core
};
//- end: ARB_clear_texture

//-//-- 
//- Ext: ARB_clip_control
enum GLext_ARB_clip_control
{
#	define FLUXGL_ARB_clip_control 1
//	GL::LOWER_LEFT already defined in 2.0_core
//	GL::UPPER_LEFT already defined in 2.0_core
//	GL::CLIP_ORIGIN already defined in 4.5_core
//	GL::CLIP_DEPTH_MODE already defined in 4.5_core
//	GL::NEGATIVE_ONE_TO_ONE already defined in 4.5_core
//	GL::ZERO_TO_ONE already defined in 4.5_core
};
//- end: ARB_clip_control

//-//-- 
//- Ext: ARB_color_buffer_float
enum GLext_ARB_color_buffer_float
{
#	define FLUXGL_ARB_color_buffer_float 1
	RGBA_FLOAT_MODE_ARB = 0x8820u,
	CLAMP_VERTEX_COLOR_ARB = 0x891Au,
	CLAMP_FRAGMENT_COLOR_ARB = 0x891Bu,
	CLAMP_READ_COLOR_ARB = 0x891Cu,
	FIXED_ONLY_ARB = 0x891Du,
};
//- end: ARB_color_buffer_float

//-//-- 
//- Ext: ARB_compressed_texture_pixel_storage
enum GLext_ARB_compressed_texture_pixel_storage
{
#	define FLUXGL_ARB_compressed_texture_pixel_storage 1
//	GL::UNPACK_COMPRESSED_BLOCK_WIDTH already defined in 4.2_core
//	GL::UNPACK_COMPRESSED_BLOCK_HEIGHT already defined in 4.2_core
//	GL::UNPACK_COMPRESSED_BLOCK_DEPTH already defined in 4.2_core
//	GL::UNPACK_COMPRESSED_BLOCK_SIZE already defined in 4.2_core
//	GL::PACK_COMPRESSED_BLOCK_WIDTH already defined in 4.2_core
//	GL::PACK_COMPRESSED_BLOCK_HEIGHT already defined in 4.2_core
//	GL::PACK_COMPRESSED_BLOCK_DEPTH already defined in 4.2_core
//	GL::PACK_COMPRESSED_BLOCK_SIZE already defined in 4.2_core
};
//- end: ARB_compressed_texture_pixel_storage

//-//-- 
//- Ext: ARB_compute_shader
enum GLext_ARB_compute_shader
{
#	define FLUXGL_ARB_compute_shader 1
//	GL::COMPUTE_SHADER_BIT already defined in 4.3_core
//	GL::MAX_COMPUTE_SHARED_MEMORY_SIZE already defined in 4.3_core
//	GL::MAX_COMPUTE_UNIFORM_COMPONENTS already defined in 4.3_core
//	GL::MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS already defined in 4.3_core
//	GL::MAX_COMPUTE_ATOMIC_COUNTERS already defined in 4.3_core
//	GL::MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS already defined in 4.3_core
//	GL::COMPUTE_WORK_GROUP_SIZE already defined in 4.3_core
//	GL::MAX_COMPUTE_WORK_GROUP_INVOCATIONS already defined in 4.3_core
//	GL::UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER already defined in 4.3_core
//	GL::ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER already defined in 4.3_core
//	GL::DISPATCH_INDIRECT_BUFFER already defined in 4.3_core
//	GL::DISPATCH_INDIRECT_BUFFER_BINDING already defined in 4.3_core
//	GL::COMPUTE_SHADER already defined in 4.3_core
//	GL::MAX_COMPUTE_UNIFORM_BLOCKS already defined in 4.3_core
//	GL::MAX_COMPUTE_TEXTURE_IMAGE_UNITS already defined in 4.3_core
//	GL::MAX_COMPUTE_IMAGE_UNIFORMS already defined in 4.3_core
//	GL::MAX_COMPUTE_WORK_GROUP_COUNT already defined in 4.3_core
//	GL::MAX_COMPUTE_WORK_GROUP_SIZE already defined in 4.3_core
};
//- end: ARB_compute_shader

//-//-- 
//- Ext: ARB_compute_variable_group_size
enum GLext_ARB_compute_variable_group_size
{
#	define FLUXGL_ARB_compute_variable_group_size 1
	MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EBu,
	MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BFu,
	MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344u,
	MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345u,
};
//- end: ARB_compute_variable_group_size

//-//-- 
//- Ext: ARB_conditional_render_inverted
enum GLext_ARB_conditional_render_inverted
{
#	define FLUXGL_ARB_conditional_render_inverted 1
//	GL::QUERY_WAIT_INVERTED already defined in 4.5_core
//	GL::QUERY_NO_WAIT_INVERTED already defined in 4.5_core
//	GL::QUERY_BY_REGION_WAIT_INVERTED already defined in 4.5_core
//	GL::QUERY_BY_REGION_NO_WAIT_INVERTED already defined in 4.5_core
};
//- end: ARB_conditional_render_inverted

//-//-- 
//- Ext: ARB_copy_buffer
enum GLext_ARB_copy_buffer
{
#	define FLUXGL_ARB_copy_buffer 1
//	GL::COPY_READ_BUFFER already defined in 3.1_core
//	GL::COPY_WRITE_BUFFER already defined in 3.1_core
};
//- end: ARB_copy_buffer

//-//-- 
//- Ext: ARB_cull_distance
enum GLext_ARB_cull_distance
{
#	define FLUXGL_ARB_cull_distance 1
//	GL::MAX_CULL_DISTANCES already defined in 4.5_core
//	GL::MAX_COMBINED_CLIP_AND_CULL_DISTANCES already defined in 4.5_core
};
//- end: ARB_cull_distance

//-//-- 
//- Ext: ARB_debug_output
enum GLext_ARB_debug_output
{
#	define FLUXGL_ARB_debug_output 1
	DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242u,
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243u,
	DEBUG_CALLBACK_FUNCTION_ARB = 0x8244u,
	DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245u,
	DEBUG_SOURCE_API_ARB = 0x8246u,
	DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247u,
	DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248u,
	DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249u,
	DEBUG_SOURCE_APPLICATION_ARB = 0x824Au,
	DEBUG_SOURCE_OTHER_ARB = 0x824Bu,
	DEBUG_TYPE_ERROR_ARB = 0x824Cu,
	DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824Du,
	DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824Eu,
	DEBUG_TYPE_PORTABILITY_ARB = 0x824Fu,
	DEBUG_TYPE_PERFORMANCE_ARB = 0x8250u,
	DEBUG_TYPE_OTHER_ARB = 0x8251u,
	MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143u,
	MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144u,
	DEBUG_LOGGED_MESSAGES_ARB = 0x9145u,
	DEBUG_SEVERITY_HIGH_ARB = 0x9146u,
	DEBUG_SEVERITY_MEDIUM_ARB = 0x9147u,
	DEBUG_SEVERITY_LOW_ARB = 0x9148u,
};
//- end: ARB_debug_output

//-//-- 
//- Ext: ARB_depth_buffer_float
enum GLext_ARB_depth_buffer_float
{
#	define FLUXGL_ARB_depth_buffer_float 1
//	GL::DEPTH_COMPONENT32F already defined in 3.0_core
//	GL::DEPTH32F_STENCIL8 already defined in 3.0_core
//	GL::FLOAT_32_UNSIGNED_INT_24_8_REV already defined in 3.0_core
};
//- end: ARB_depth_buffer_float

//-//-- 
//- Ext: ARB_depth_clamp
enum GLext_ARB_depth_clamp
{
#	define FLUXGL_ARB_depth_clamp 1
//	GL::DEPTH_CLAMP already defined in 3.2_core
};
//- end: ARB_depth_clamp

//-//-- 
//- Ext: ARB_depth_texture
enum GLext_ARB_depth_texture
{
#	define FLUXGL_ARB_depth_texture 1
	DEPTH_COMPONENT16_ARB = 0x81A5u,
	DEPTH_COMPONENT24_ARB = 0x81A6u,
	DEPTH_COMPONENT32_ARB = 0x81A7u,
	TEXTURE_DEPTH_SIZE_ARB = 0x884Au,
	DEPTH_TEXTURE_MODE_ARB = 0x884Bu,
};
//- end: ARB_depth_texture

//-//-- 
//- Ext: ARB_direct_state_access
enum GLext_ARB_direct_state_access
{
#	define FLUXGL_ARB_direct_state_access 1
//	GL::TEXTURE_TARGET already defined in 4.5_core
//	GL::TEXTURE_BINDING_1D already defined in 1.1_core
//	GL::TEXTURE_BINDING_2D already defined in 1.1_core
//	GL::TEXTURE_BINDING_3D already defined in 1.2_core
//	GL::QUERY_TARGET already defined in 4.5_core
//	GL::TEXTURE_BINDING_RECTANGLE already defined in 3.1_core
//	GL::TEXTURE_BINDING_CUBE_MAP already defined in 1.3_core
//	GL::TEXTURE_BINDING_1D_ARRAY already defined in 3.0_core
//	GL::TEXTURE_BINDING_2D_ARRAY already defined in 3.0_core
//	GL::TEXTURE_BINDING_BUFFER already defined in 3.1_core
//	GL::TEXTURE_BINDING_CUBE_MAP_ARRAY already defined in 4.0_core
//	GL::TEXTURE_BINDING_2D_MULTISAMPLE already defined in 3.2_core
//	GL::TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
};
//- end: ARB_direct_state_access

//-//-- 
//- Ext: ARB_draw_buffers
enum GLext_ARB_draw_buffers
{
#	define FLUXGL_ARB_draw_buffers 1
	MAX_DRAW_BUFFERS_ARB = 0x8824u,
	DRAW_BUFFER0_ARB = 0x8825u,
	DRAW_BUFFER1_ARB = 0x8826u,
	DRAW_BUFFER2_ARB = 0x8827u,
	DRAW_BUFFER3_ARB = 0x8828u,
	DRAW_BUFFER4_ARB = 0x8829u,
	DRAW_BUFFER5_ARB = 0x882Au,
	DRAW_BUFFER6_ARB = 0x882Bu,
	DRAW_BUFFER7_ARB = 0x882Cu,
	DRAW_BUFFER8_ARB = 0x882Du,
	DRAW_BUFFER9_ARB = 0x882Eu,
	DRAW_BUFFER10_ARB = 0x882Fu,
	DRAW_BUFFER11_ARB = 0x8830u,
	DRAW_BUFFER12_ARB = 0x8831u,
	DRAW_BUFFER13_ARB = 0x8832u,
	DRAW_BUFFER14_ARB = 0x8833u,
	DRAW_BUFFER15_ARB = 0x8834u,
};
//- end: ARB_draw_buffers

//-//-- 
//- Ext: ARB_draw_indirect
enum GLext_ARB_draw_indirect
{
#	define FLUXGL_ARB_draw_indirect 1
//	GL::DRAW_INDIRECT_BUFFER already defined in 4.0_core
//	GL::DRAW_INDIRECT_BUFFER_BINDING already defined in 4.0_core
};
//- end: ARB_draw_indirect

//-//-- 
//- Ext: ARB_enhanced_layouts
enum GLext_ARB_enhanced_layouts
{
#	define FLUXGL_ARB_enhanced_layouts 1
//	GL::TRANSFORM_FEEDBACK_BUFFER already defined in 3.0_core
//	GL::LOCATION_COMPONENT already defined in 4.4_core
//	GL::TRANSFORM_FEEDBACK_BUFFER_INDEX already defined in 4.4_core
//	GL::TRANSFORM_FEEDBACK_BUFFER_STRIDE already defined in 4.4_core
};
//- end: ARB_enhanced_layouts

//-//-- 
//- Ext: ARB_explicit_uniform_location
enum GLext_ARB_explicit_uniform_location
{
#	define FLUXGL_ARB_explicit_uniform_location 1
//	GL::MAX_UNIFORM_LOCATIONS already defined in 4.3_core
};
//- end: ARB_explicit_uniform_location

//-//-- 
//- Ext: ARB_fragment_program
enum GLext_ARB_fragment_program
{
#	define FLUXGL_ARB_fragment_program 1
	PROGRAM_LENGTH_ARB = 0x8627u,
	PROGRAM_STRING_ARB = 0x8628u,
	MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862Eu,
	MAX_PROGRAM_MATRICES_ARB = 0x862Fu,
	CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640u,
	CURRENT_MATRIX_ARB = 0x8641u,
	PROGRAM_ERROR_POSITION_ARB = 0x864Bu,
	PROGRAM_BINDING_ARB = 0x8677u,
	FRAGMENT_PROGRAM_ARB = 0x8804u,
	PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805u,
	PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806u,
	PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807u,
	PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808u,
	PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809u,
	PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880Au,
	MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880Bu,
	MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880Cu,
	MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880Du,
	MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880Eu,
	MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880Fu,
	MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810u,
	MAX_TEXTURE_COORDS_ARB = 0x8871u,
	MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872u,
	PROGRAM_ERROR_STRING_ARB = 0x8874u,
	PROGRAM_FORMAT_ASCII_ARB = 0x8875u,
	PROGRAM_FORMAT_ARB = 0x8876u,
	PROGRAM_INSTRUCTIONS_ARB = 0x88A0u,
	MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1u,
	PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2u,
	MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3u,
	PROGRAM_TEMPORARIES_ARB = 0x88A4u,
	MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5u,
	PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6u,
	MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7u,
	PROGRAM_PARAMETERS_ARB = 0x88A8u,
	MAX_PROGRAM_PARAMETERS_ARB = 0x88A9u,
	PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AAu,
	MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88ABu,
	PROGRAM_ATTRIBS_ARB = 0x88ACu,
	MAX_PROGRAM_ATTRIBS_ARB = 0x88ADu,
	PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AEu,
	MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AFu,
	MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4u,
	MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5u,
	PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6u,
	TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7u,
	MATRIX0_ARB = 0x88C0u,
	MATRIX1_ARB = 0x88C1u,
	MATRIX2_ARB = 0x88C2u,
	MATRIX3_ARB = 0x88C3u,
	MATRIX4_ARB = 0x88C4u,
	MATRIX5_ARB = 0x88C5u,
	MATRIX6_ARB = 0x88C6u,
	MATRIX7_ARB = 0x88C7u,
	MATRIX8_ARB = 0x88C8u,
	MATRIX9_ARB = 0x88C9u,
	MATRIX10_ARB = 0x88CAu,
	MATRIX11_ARB = 0x88CBu,
	MATRIX12_ARB = 0x88CCu,
	MATRIX13_ARB = 0x88CDu,
	MATRIX14_ARB = 0x88CEu,
	MATRIX15_ARB = 0x88CFu,
	MATRIX16_ARB = 0x88D0u,
	MATRIX17_ARB = 0x88D1u,
	MATRIX18_ARB = 0x88D2u,
	MATRIX19_ARB = 0x88D3u,
	MATRIX20_ARB = 0x88D4u,
	MATRIX21_ARB = 0x88D5u,
	MATRIX22_ARB = 0x88D6u,
	MATRIX23_ARB = 0x88D7u,
	MATRIX24_ARB = 0x88D8u,
	MATRIX25_ARB = 0x88D9u,
	MATRIX26_ARB = 0x88DAu,
	MATRIX27_ARB = 0x88DBu,
	MATRIX28_ARB = 0x88DCu,
	MATRIX29_ARB = 0x88DDu,
	MATRIX30_ARB = 0x88DEu,
	MATRIX31_ARB = 0x88DFu,
};
//- end: ARB_fragment_program

//-//-- 
//- Ext: ARB_fragment_shader
enum GLext_ARB_fragment_shader
{
#	define FLUXGL_ARB_fragment_shader 1
	FRAGMENT_SHADER_ARB = 0x8B30u,
	MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49u,
	FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8Bu,
};
//- end: ARB_fragment_shader

//-//-- 
//- Ext: ARB_framebuffer_no_attachments
enum GLext_ARB_framebuffer_no_attachments
{
#	define FLUXGL_ARB_framebuffer_no_attachments 1
//	GL::FRAMEBUFFER_DEFAULT_WIDTH already defined in 4.3_core
//	GL::FRAMEBUFFER_DEFAULT_HEIGHT already defined in 4.3_core
//	GL::FRAMEBUFFER_DEFAULT_LAYERS already defined in 4.3_core
//	GL::FRAMEBUFFER_DEFAULT_SAMPLES already defined in 4.3_core
//	GL::FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS already defined in 4.3_core
//	GL::MAX_FRAMEBUFFER_WIDTH already defined in 4.3_core
//	GL::MAX_FRAMEBUFFER_HEIGHT already defined in 4.3_core
//	GL::MAX_FRAMEBUFFER_LAYERS already defined in 4.3_core
//	GL::MAX_FRAMEBUFFER_SAMPLES already defined in 4.3_core
};
//- end: ARB_framebuffer_no_attachments

//-//-- 
//- Ext: ARB_framebuffer_object
enum GLext_ARB_framebuffer_object
{
#	define FLUXGL_ARB_framebuffer_object 1
//	GL::INVALID_FRAMEBUFFER_OPERATION already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_RED_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_GREEN_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_BLUE_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_DEFAULT already defined in 3.0_core
//	GL::FRAMEBUFFER_UNDEFINED already defined in 3.0_core
//	GL::DEPTH_STENCIL_ATTACHMENT already defined in 3.0_core
//	GL::INDEX already defined in 3.0_compatibility
//	GL::MAX_RENDERBUFFER_SIZE already defined in 3.0_core
//	GL::DEPTH_STENCIL already defined in 3.0_core
//	GL::UNSIGNED_INT_24_8 already defined in 3.0_core
//	GL::DEPTH24_STENCIL8 already defined in 3.0_core
//	GL::TEXTURE_STENCIL_SIZE already defined in 3.0_core
//	GL::UNSIGNED_NORMALIZED already defined in 3.0_core
//	GL::DRAW_FRAMEBUFFER_BINDING already defined in 3.0_core
//	GL::FRAMEBUFFER_BINDING already defined in 3.0_core
//	GL::RENDERBUFFER_BINDING already defined in 3.0_core
//	GL::READ_FRAMEBUFFER already defined in 3.0_core
//	GL::DRAW_FRAMEBUFFER already defined in 3.0_core
//	GL::READ_FRAMEBUFFER_BINDING already defined in 3.0_core
//	GL::RENDERBUFFER_SAMPLES already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_OBJECT_NAME already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE already defined in 3.0_core
//	GL::FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER already defined in 3.0_core
//	GL::FRAMEBUFFER_COMPLETE already defined in 3.0_core
//	GL::FRAMEBUFFER_INCOMPLETE_ATTACHMENT already defined in 3.0_core
//	GL::FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT already defined in 3.0_core
//	GL::FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER already defined in 3.0_core
//	GL::FRAMEBUFFER_INCOMPLETE_READ_BUFFER already defined in 3.0_core
//	GL::FRAMEBUFFER_UNSUPPORTED already defined in 3.0_core
//	GL::MAX_COLOR_ATTACHMENTS already defined in 3.0_core
//	GL::COLOR_ATTACHMENT0 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT1 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT2 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT3 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT4 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT5 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT6 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT7 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT8 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT9 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT10 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT11 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT12 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT13 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT14 already defined in 3.0_core
//	GL::COLOR_ATTACHMENT15 already defined in 3.0_core
//	GL::DEPTH_ATTACHMENT already defined in 3.0_core
//	GL::STENCIL_ATTACHMENT already defined in 3.0_core
//	GL::FRAMEBUFFER already defined in 3.0_core
//	GL::RENDERBUFFER already defined in 3.0_core
//	GL::RENDERBUFFER_WIDTH already defined in 3.0_core
//	GL::RENDERBUFFER_HEIGHT already defined in 3.0_core
//	GL::RENDERBUFFER_INTERNAL_FORMAT already defined in 3.0_core
//	GL::STENCIL_INDEX1 already defined in 3.0_core
//	GL::STENCIL_INDEX4 already defined in 3.0_core
//	GL::STENCIL_INDEX8 already defined in 3.0_core
//	GL::STENCIL_INDEX16 already defined in 3.0_core
//	GL::RENDERBUFFER_RED_SIZE already defined in 3.0_core
//	GL::RENDERBUFFER_GREEN_SIZE already defined in 3.0_core
//	GL::RENDERBUFFER_BLUE_SIZE already defined in 3.0_core
//	GL::RENDERBUFFER_ALPHA_SIZE already defined in 3.0_core
//	GL::RENDERBUFFER_DEPTH_SIZE already defined in 3.0_core
//	GL::RENDERBUFFER_STENCIL_SIZE already defined in 3.0_core
//	GL::FRAMEBUFFER_INCOMPLETE_MULTISAMPLE already defined in 3.0_core
//	GL::MAX_SAMPLES already defined in 3.0_core
};
//- end: ARB_framebuffer_object

//-//-- 
//- Ext: ARB_framebuffer_sRGB
enum GLext_ARB_framebuffer_sRGB
{
#	define FLUXGL_ARB_framebuffer_sRGB 1
//	GL::FRAMEBUFFER_SRGB already defined in 3.0_core
};
//- end: ARB_framebuffer_sRGB

//-//-- 
//- Ext: ARB_geometry_shader4
enum GLext_ARB_geometry_shader4
{
#	define FLUXGL_ARB_geometry_shader4 1
	LINES_ADJACENCY_ARB = 0x000Au,
	LINE_STRIP_ADJACENCY_ARB = 0x000Bu,
	TRIANGLES_ADJACENCY_ARB = 0x000Cu,
	TRIANGLE_STRIP_ADJACENCY_ARB = 0x000Du,
	PROGRAM_POINT_SIZE_ARB = 0x8642u,
//	GL::MAX_VARYING_COMPONENTS already defined in 3.0_core
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29u,
//	GL::FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER already defined in 3.0_core
	FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7u,
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8u,
	FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9u,
	GEOMETRY_SHADER_ARB = 0x8DD9u,
	GEOMETRY_VERTICES_OUT_ARB = 0x8DDAu,
	GEOMETRY_INPUT_TYPE_ARB = 0x8DDBu,
	GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDCu,
	MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDDu,
	MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDEu,
	MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDFu,
	MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0u,
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1u,
};
//- end: ARB_geometry_shader4

//-//-- 
//- Ext: ARB_get_program_binary
enum GLext_ARB_get_program_binary
{
#	define FLUXGL_ARB_get_program_binary 1
//	GL::PROGRAM_BINARY_RETRIEVABLE_HINT already defined in 4.1_core
//	GL::PROGRAM_BINARY_LENGTH already defined in 4.1_core
//	GL::NUM_PROGRAM_BINARY_FORMATS already defined in 4.1_core
//	GL::PROGRAM_BINARY_FORMATS already defined in 4.1_core
};
//- end: ARB_get_program_binary

//-//-- 
//- Ext: ARB_gpu_shader5
enum GLext_ARB_gpu_shader5
{
#	define FLUXGL_ARB_gpu_shader5 1
//	GL::GEOMETRY_SHADER_INVOCATIONS already defined in 4.0_core
//	GL::MAX_GEOMETRY_SHADER_INVOCATIONS already defined in 4.0_core
//	GL::MIN_FRAGMENT_INTERPOLATION_OFFSET already defined in 4.0_core
//	GL::MAX_FRAGMENT_INTERPOLATION_OFFSET already defined in 4.0_core
//	GL::FRAGMENT_INTERPOLATION_OFFSET_BITS already defined in 4.0_core
//	GL::MAX_VERTEX_STREAMS already defined in 4.0_core
};
//- end: ARB_gpu_shader5

//-//-- 
//- Ext: ARB_gpu_shader_fp64
enum GLext_ARB_gpu_shader_fp64
{
#	define FLUXGL_ARB_gpu_shader_fp64 1
//	GL::DOUBLE already defined in 1.1_core
//	GL::DOUBLE_MAT2 already defined in 4.0_core
//	GL::DOUBLE_MAT3 already defined in 4.0_core
//	GL::DOUBLE_MAT4 already defined in 4.0_core
//	GL::DOUBLE_MAT2x3 already defined in 4.0_core
//	GL::DOUBLE_MAT2x4 already defined in 4.0_core
//	GL::DOUBLE_MAT3x2 already defined in 4.0_core
//	GL::DOUBLE_MAT3x4 already defined in 4.0_core
//	GL::DOUBLE_MAT4x2 already defined in 4.0_core
//	GL::DOUBLE_MAT4x3 already defined in 4.0_core
//	GL::DOUBLE_VEC2 already defined in 4.0_core
//	GL::DOUBLE_VEC3 already defined in 4.0_core
//	GL::DOUBLE_VEC4 already defined in 4.0_core
};
//- end: ARB_gpu_shader_fp64

//-//-- 
//- Ext: ARB_gpu_shader_int64
enum GLext_ARB_gpu_shader_int64
{
#	define FLUXGL_ARB_gpu_shader_int64 1
	INT64_ARB = 0x140Eu,
//	GL::UNSIGNED_INT64_ARB already defined in ARB_bindless_texture
	INT64_VEC2_ARB = 0x8FE9u,
	INT64_VEC3_ARB = 0x8FEAu,
	INT64_VEC4_ARB = 0x8FEBu,
	UNSIGNED_INT64_VEC2_ARB = 0x8FF5u,
	UNSIGNED_INT64_VEC3_ARB = 0x8FF6u,
	UNSIGNED_INT64_VEC4_ARB = 0x8FF7u,
};
//- end: ARB_gpu_shader_int64

//-//-- 
//- Ext: ARB_half_float_pixel
enum GLext_ARB_half_float_pixel
{
#	define FLUXGL_ARB_half_float_pixel 1
	HALF_FLOAT_ARB = 0x140Bu,
};
//- end: ARB_half_float_pixel

//-//-- 
//- Ext: ARB_half_float_vertex
enum GLext_ARB_half_float_vertex
{
#	define FLUXGL_ARB_half_float_vertex 1
//	GL::HALF_FLOAT already defined in 3.0_core
};
//- end: ARB_half_float_vertex

//-//-- 
//- Ext: ARB_imaging
enum GLext_ARB_imaging
{
#	define FLUXGL_ARB_imaging 1
//	GL::CONSTANT_COLOR already defined in 1.4_core
//	GL::ONE_MINUS_CONSTANT_COLOR already defined in 1.4_core
//	GL::CONSTANT_ALPHA already defined in 1.4_core
//	GL::ONE_MINUS_CONSTANT_ALPHA already defined in 1.4_core
//	GL::BLEND_COLOR already defined in 1.4_core
//	GL::FUNC_ADD already defined in 1.4_core
//	GL::MIN already defined in 1.4_core
//	GL::MAX already defined in 1.4_core
	BLEND_EQUATION = 0x8009u,
//	GL::FUNC_SUBTRACT already defined in 1.4_core
//	GL::FUNC_REVERSE_SUBTRACT already defined in 1.4_core
	CONVOLUTION_1D = 0x8010u,
	CONVOLUTION_2D = 0x8011u,
	SEPARABLE_2D = 0x8012u,
	CONVOLUTION_BORDER_MODE = 0x8013u,
	CONVOLUTION_FILTER_SCALE = 0x8014u,
	CONVOLUTION_FILTER_BIAS = 0x8015u,
	REDUCE = 0x8016u,
	CONVOLUTION_FORMAT = 0x8017u,
	CONVOLUTION_WIDTH = 0x8018u,
	CONVOLUTION_HEIGHT = 0x8019u,
	MAX_CONVOLUTION_WIDTH = 0x801Au,
	MAX_CONVOLUTION_HEIGHT = 0x801Bu,
	POST_CONVOLUTION_RED_SCALE = 0x801Cu,
	POST_CONVOLUTION_GREEN_SCALE = 0x801Du,
	POST_CONVOLUTION_BLUE_SCALE = 0x801Eu,
	POST_CONVOLUTION_ALPHA_SCALE = 0x801Fu,
	POST_CONVOLUTION_RED_BIAS = 0x8020u,
	POST_CONVOLUTION_GREEN_BIAS = 0x8021u,
	POST_CONVOLUTION_BLUE_BIAS = 0x8022u,
	POST_CONVOLUTION_ALPHA_BIAS = 0x8023u,
	HISTOGRAM = 0x8024u,
	PROXY_HISTOGRAM = 0x8025u,
	HISTOGRAM_WIDTH = 0x8026u,
	HISTOGRAM_FORMAT = 0x8027u,
	HISTOGRAM_RED_SIZE = 0x8028u,
	HISTOGRAM_GREEN_SIZE = 0x8029u,
	HISTOGRAM_BLUE_SIZE = 0x802Au,
	HISTOGRAM_ALPHA_SIZE = 0x802Bu,
	HISTOGRAM_LUMINANCE_SIZE = 0x802Cu,
	HISTOGRAM_SINK = 0x802Du,
	MINMAX = 0x802Eu,
	MINMAX_FORMAT = 0x802Fu,
	MINMAX_SINK = 0x8030u,
	TABLE_TOO_LARGE = 0x8031u,
	COLOR_MATRIX = 0x80B1u,
	COLOR_MATRIX_STACK_DEPTH = 0x80B2u,
	MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3u,
	POST_COLOR_MATRIX_RED_SCALE = 0x80B4u,
	POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5u,
	POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6u,
	POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7u,
	POST_COLOR_MATRIX_RED_BIAS = 0x80B8u,
	POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9u,
	POST_COLOR_MATRIX_BLUE_BIAS = 0x80BAu,
	POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BBu,
	COLOR_TABLE = 0x80D0u,
	POST_CONVOLUTION_COLOR_TABLE = 0x80D1u,
	POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2u,
	PROXY_COLOR_TABLE = 0x80D3u,
	PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4u,
	PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5u,
	COLOR_TABLE_SCALE = 0x80D6u,
	COLOR_TABLE_BIAS = 0x80D7u,
	COLOR_TABLE_FORMAT = 0x80D8u,
	COLOR_TABLE_WIDTH = 0x80D9u,
	COLOR_TABLE_RED_SIZE = 0x80DAu,
	COLOR_TABLE_GREEN_SIZE = 0x80DBu,
	COLOR_TABLE_BLUE_SIZE = 0x80DCu,
	COLOR_TABLE_ALPHA_SIZE = 0x80DDu,
	COLOR_TABLE_LUMINANCE_SIZE = 0x80DEu,
	COLOR_TABLE_INTENSITY_SIZE = 0x80DFu,
	CONSTANT_BORDER = 0x8151u,
	REPLICATE_BORDER = 0x8153u,
	CONVOLUTION_BORDER_COLOR = 0x8154u,
};
//- end: ARB_imaging

//-//-- 
//- Ext: ARB_indirect_parameters
enum GLext_ARB_indirect_parameters
{
#	define FLUXGL_ARB_indirect_parameters 1
	PARAMETER_BUFFER_ARB = 0x80EEu,
	PARAMETER_BUFFER_BINDING_ARB = 0x80EFu,
};
//- end: ARB_indirect_parameters

//-//-- 
//- Ext: ARB_instanced_arrays
enum GLext_ARB_instanced_arrays
{
#	define FLUXGL_ARB_instanced_arrays 1
	VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FEu,
};
//- end: ARB_instanced_arrays

//-//-- 
//- Ext: ARB_internalformat_query
enum GLext_ARB_internalformat_query
{
#	define FLUXGL_ARB_internalformat_query 1
//	GL::NUM_SAMPLE_COUNTS already defined in 4.2_core
};
//- end: ARB_internalformat_query

//-//-- 
//- Ext: ARB_internalformat_query2
enum GLext_ARB_internalformat_query2
{
#	define FLUXGL_ARB_internalformat_query2 1
//	GL::TEXTURE_1D already defined in 1.1_core
//	GL::TEXTURE_2D already defined in 1.1_core
//	GL::TEXTURE_3D already defined in 1.2_core
//	GL::SAMPLES already defined in 1.3_core
//	GL::INTERNALFORMAT_SUPPORTED already defined in 4.3_core
//	GL::INTERNALFORMAT_PREFERRED already defined in 4.3_core
//	GL::INTERNALFORMAT_RED_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_GREEN_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_BLUE_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_ALPHA_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_DEPTH_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_STENCIL_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_SHARED_SIZE already defined in 4.3_core
//	GL::INTERNALFORMAT_RED_TYPE already defined in 4.3_core
//	GL::INTERNALFORMAT_GREEN_TYPE already defined in 4.3_core
//	GL::INTERNALFORMAT_BLUE_TYPE already defined in 4.3_core
//	GL::INTERNALFORMAT_ALPHA_TYPE already defined in 4.3_core
//	GL::INTERNALFORMAT_DEPTH_TYPE already defined in 4.3_core
//	GL::INTERNALFORMAT_STENCIL_TYPE already defined in 4.3_core
//	GL::MAX_WIDTH already defined in 4.3_core
//	GL::MAX_HEIGHT already defined in 4.3_core
//	GL::MAX_DEPTH already defined in 4.3_core
//	GL::MAX_LAYERS already defined in 4.3_core
//	GL::MAX_COMBINED_DIMENSIONS already defined in 4.3_core
//	GL::COLOR_COMPONENTS already defined in 4.3_core
//	GL::DEPTH_COMPONENTS already defined in 4.3_core
//	GL::STENCIL_COMPONENTS already defined in 4.3_core
//	GL::COLOR_RENDERABLE already defined in 4.3_core
//	GL::DEPTH_RENDERABLE already defined in 4.3_core
//	GL::STENCIL_RENDERABLE already defined in 4.3_core
//	GL::FRAMEBUFFER_RENDERABLE already defined in 4.3_core
//	GL::FRAMEBUFFER_RENDERABLE_LAYERED already defined in 4.3_core
//	GL::FRAMEBUFFER_BLEND already defined in 4.3_core
//	GL::READ_PIXELS already defined in 4.3_core
//	GL::READ_PIXELS_FORMAT already defined in 4.3_core
//	GL::READ_PIXELS_TYPE already defined in 4.3_core
//	GL::TEXTURE_IMAGE_FORMAT already defined in 4.3_core
//	GL::TEXTURE_IMAGE_TYPE already defined in 4.3_core
//	GL::GET_TEXTURE_IMAGE_FORMAT already defined in 4.3_core
//	GL::GET_TEXTURE_IMAGE_TYPE already defined in 4.3_core
//	GL::MIPMAP already defined in 4.3_core
//	GL::MANUAL_GENERATE_MIPMAP already defined in 4.3_core
//	GL::AUTO_GENERATE_MIPMAP already defined in 4.3_core
//	GL::COLOR_ENCODING already defined in 4.3_core
//	GL::SRGB_READ already defined in 4.3_core
//	GL::SRGB_WRITE already defined in 4.3_core
	SRGB_DECODE_ARB = 0x8299u,
//	GL::FILTER already defined in 4.3_core
//	GL::VERTEX_TEXTURE already defined in 4.3_core
//	GL::TESS_CONTROL_TEXTURE already defined in 4.3_core
//	GL::TESS_EVALUATION_TEXTURE already defined in 4.3_core
//	GL::GEOMETRY_TEXTURE already defined in 4.3_core
//	GL::FRAGMENT_TEXTURE already defined in 4.3_core
//	GL::COMPUTE_TEXTURE already defined in 4.3_core
//	GL::TEXTURE_SHADOW already defined in 4.3_core
//	GL::TEXTURE_GATHER already defined in 4.3_core
//	GL::TEXTURE_GATHER_SHADOW already defined in 4.3_core
//	GL::SHADER_IMAGE_LOAD already defined in 4.3_core
//	GL::SHADER_IMAGE_STORE already defined in 4.3_core
//	GL::SHADER_IMAGE_ATOMIC already defined in 4.3_core
//	GL::IMAGE_TEXEL_SIZE already defined in 4.3_core
//	GL::IMAGE_COMPATIBILITY_CLASS already defined in 4.3_core
//	GL::IMAGE_PIXEL_FORMAT already defined in 4.3_core
//	GL::IMAGE_PIXEL_TYPE already defined in 4.3_core
//	GL::SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST already defined in 4.3_core
//	GL::SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST already defined in 4.3_core
//	GL::SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE already defined in 4.3_core
//	GL::SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE already defined in 4.3_core
//	GL::TEXTURE_COMPRESSED_BLOCK_WIDTH already defined in 4.3_core
//	GL::TEXTURE_COMPRESSED_BLOCK_HEIGHT already defined in 4.3_core
//	GL::TEXTURE_COMPRESSED_BLOCK_SIZE already defined in 4.3_core
//	GL::CLEAR_BUFFER already defined in 4.3_core
//	GL::TEXTURE_VIEW already defined in 4.3_core
//	GL::VIEW_COMPATIBILITY_CLASS already defined in 4.3_core
//	GL::FULL_SUPPORT already defined in 4.3_core
//	GL::CAVEAT_SUPPORT already defined in 4.3_core
//	GL::IMAGE_CLASS_4_X_32 already defined in 4.3_core
//	GL::IMAGE_CLASS_2_X_32 already defined in 4.3_core
//	GL::IMAGE_CLASS_1_X_32 already defined in 4.3_core
//	GL::IMAGE_CLASS_4_X_16 already defined in 4.3_core
//	GL::IMAGE_CLASS_2_X_16 already defined in 4.3_core
//	GL::IMAGE_CLASS_1_X_16 already defined in 4.3_core
//	GL::IMAGE_CLASS_4_X_8 already defined in 4.3_core
//	GL::IMAGE_CLASS_2_X_8 already defined in 4.3_core
//	GL::IMAGE_CLASS_1_X_8 already defined in 4.3_core
//	GL::IMAGE_CLASS_11_11_10 already defined in 4.3_core
//	GL::IMAGE_CLASS_10_10_10_2 already defined in 4.3_core
//	GL::VIEW_CLASS_128_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_96_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_64_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_48_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_32_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_24_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_16_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_8_BITS already defined in 4.3_core
//	GL::VIEW_CLASS_S3TC_DXT1_RGB already defined in 4.3_core
//	GL::VIEW_CLASS_S3TC_DXT1_RGBA already defined in 4.3_core
//	GL::VIEW_CLASS_S3TC_DXT3_RGBA already defined in 4.3_core
//	GL::VIEW_CLASS_S3TC_DXT5_RGBA already defined in 4.3_core
//	GL::VIEW_CLASS_RGTC1_RED already defined in 4.3_core
//	GL::VIEW_CLASS_RGTC2_RG already defined in 4.3_core
//	GL::VIEW_CLASS_BPTC_UNORM already defined in 4.3_core
//	GL::VIEW_CLASS_BPTC_FLOAT already defined in 4.3_core
//	GL::TEXTURE_RECTANGLE already defined in 3.1_core
//	GL::TEXTURE_CUBE_MAP already defined in 1.3_core
//	GL::TEXTURE_COMPRESSED already defined in 1.3_core
//	GL::TEXTURE_1D_ARRAY already defined in 3.0_core
//	GL::TEXTURE_2D_ARRAY already defined in 3.0_core
//	GL::TEXTURE_BUFFER already defined in 3.1_core
//	GL::RENDERBUFFER already defined in 3.0_core
//	GL::TEXTURE_CUBE_MAP_ARRAY already defined in 4.0_core
//	GL::IMAGE_FORMAT_COMPATIBILITY_TYPE already defined in 4.2_core
//	GL::TEXTURE_2D_MULTISAMPLE already defined in 3.2_core
//	GL::TEXTURE_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::NUM_SAMPLE_COUNTS already defined in 4.2_core
};
//- end: ARB_internalformat_query2

//-//-- 
//- Ext: ARB_map_buffer_alignment
enum GLext_ARB_map_buffer_alignment
{
#	define FLUXGL_ARB_map_buffer_alignment 1
//	GL::MIN_MAP_BUFFER_ALIGNMENT already defined in 4.2_core
};
//- end: ARB_map_buffer_alignment

//-//-- 
//- Ext: ARB_map_buffer_range
enum GLext_ARB_map_buffer_range
{
#	define FLUXGL_ARB_map_buffer_range 1
//	GL::MAP_READ_BIT already defined in 3.0_core
//	GL::MAP_WRITE_BIT already defined in 3.0_core
//	GL::MAP_INVALIDATE_RANGE_BIT already defined in 3.0_core
//	GL::MAP_INVALIDATE_BUFFER_BIT already defined in 3.0_core
//	GL::MAP_FLUSH_EXPLICIT_BIT already defined in 3.0_core
//	GL::MAP_UNSYNCHRONIZED_BIT already defined in 3.0_core
};
//- end: ARB_map_buffer_range

//-//-- 
//- Ext: ARB_matrix_palette
enum GLext_ARB_matrix_palette
{
#	define FLUXGL_ARB_matrix_palette 1
	MATRIX_PALETTE_ARB = 0x8840u,
	MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841u,
	MAX_PALETTE_MATRICES_ARB = 0x8842u,
	CURRENT_PALETTE_MATRIX_ARB = 0x8843u,
	MATRIX_INDEX_ARRAY_ARB = 0x8844u,
	CURRENT_MATRIX_INDEX_ARB = 0x8845u,
	MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846u,
	MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847u,
	MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848u,
	MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849u,
};
//- end: ARB_matrix_palette

//-//-- 
//- Ext: ARB_multisample
enum GLext_ARB_multisample
{
#	define FLUXGL_ARB_multisample 1
	MULTISAMPLE_BIT_ARB = 0x20000000u,
	MULTISAMPLE_ARB = 0x809Du,
	SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809Eu,
	SAMPLE_ALPHA_TO_ONE_ARB = 0x809Fu,
	SAMPLE_COVERAGE_ARB = 0x80A0u,
	SAMPLE_BUFFERS_ARB = 0x80A8u,
	SAMPLES_ARB = 0x80A9u,
	SAMPLE_COVERAGE_VALUE_ARB = 0x80AAu,
	SAMPLE_COVERAGE_INVERT_ARB = 0x80ABu,
};
//- end: ARB_multisample

//-//-- 
//- Ext: ARB_multitexture
enum GLext_ARB_multitexture
{
#	define FLUXGL_ARB_multitexture 1
	TEXTURE0_ARB = 0x84C0u,
	TEXTURE1_ARB = 0x84C1u,
	TEXTURE2_ARB = 0x84C2u,
	TEXTURE3_ARB = 0x84C3u,
	TEXTURE4_ARB = 0x84C4u,
	TEXTURE5_ARB = 0x84C5u,
	TEXTURE6_ARB = 0x84C6u,
	TEXTURE7_ARB = 0x84C7u,
	TEXTURE8_ARB = 0x84C8u,
	TEXTURE9_ARB = 0x84C9u,
	TEXTURE10_ARB = 0x84CAu,
	TEXTURE11_ARB = 0x84CBu,
	TEXTURE12_ARB = 0x84CCu,
	TEXTURE13_ARB = 0x84CDu,
	TEXTURE14_ARB = 0x84CEu,
	TEXTURE15_ARB = 0x84CFu,
	TEXTURE16_ARB = 0x84D0u,
	TEXTURE17_ARB = 0x84D1u,
	TEXTURE18_ARB = 0x84D2u,
	TEXTURE19_ARB = 0x84D3u,
	TEXTURE20_ARB = 0x84D4u,
	TEXTURE21_ARB = 0x84D5u,
	TEXTURE22_ARB = 0x84D6u,
	TEXTURE23_ARB = 0x84D7u,
	TEXTURE24_ARB = 0x84D8u,
	TEXTURE25_ARB = 0x84D9u,
	TEXTURE26_ARB = 0x84DAu,
	TEXTURE27_ARB = 0x84DBu,
	TEXTURE28_ARB = 0x84DCu,
	TEXTURE29_ARB = 0x84DDu,
	TEXTURE30_ARB = 0x84DEu,
	TEXTURE31_ARB = 0x84DFu,
	ACTIVE_TEXTURE_ARB = 0x84E0u,
	CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1u,
	MAX_TEXTURE_UNITS_ARB = 0x84E2u,
};
//- end: ARB_multitexture

//-//-- 
//- Ext: ARB_occlusion_query
enum GLext_ARB_occlusion_query
{
#	define FLUXGL_ARB_occlusion_query 1
	QUERY_COUNTER_BITS_ARB = 0x8864u,
	CURRENT_QUERY_ARB = 0x8865u,
	QUERY_RESULT_ARB = 0x8866u,
	QUERY_RESULT_AVAILABLE_ARB = 0x8867u,
	SAMPLES_PASSED_ARB = 0x8914u,
};
//- end: ARB_occlusion_query

//-//-- 
//- Ext: ARB_occlusion_query2
enum GLext_ARB_occlusion_query2
{
#	define FLUXGL_ARB_occlusion_query2 1
//	GL::ANY_SAMPLES_PASSED already defined in 3.3_core
};
//- end: ARB_occlusion_query2

//-//-- 
//- Ext: ARB_parallel_shader_compile
enum GLext_ARB_parallel_shader_compile
{
#	define FLUXGL_ARB_parallel_shader_compile 1
	MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0u,
	COMPLETION_STATUS_ARB = 0x91B1u,
};
//- end: ARB_parallel_shader_compile

//-//-- 
//- Ext: ARB_pipeline_statistics_query
enum GLext_ARB_pipeline_statistics_query
{
#	define FLUXGL_ARB_pipeline_statistics_query 1
	VERTICES_SUBMITTED_ARB = 0x82EEu,
	PRIMITIVES_SUBMITTED_ARB = 0x82EFu,
	VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0u,
	TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1u,
	TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2u,
	GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3u,
	FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4u,
	COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5u,
	CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6u,
	CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7u,
//	GL::GEOMETRY_SHADER_INVOCATIONS already defined in 4.0_core
};
//- end: ARB_pipeline_statistics_query

//-//-- 
//- Ext: ARB_pixel_buffer_object
enum GLext_ARB_pixel_buffer_object
{
#	define FLUXGL_ARB_pixel_buffer_object 1
	PIXEL_PACK_BUFFER_ARB = 0x88EBu,
	PIXEL_UNPACK_BUFFER_ARB = 0x88ECu,
	PIXEL_PACK_BUFFER_BINDING_ARB = 0x88EDu,
	PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EFu,
};
//- end: ARB_pixel_buffer_object

//-//-- 
//- Ext: ARB_point_parameters
enum GLext_ARB_point_parameters
{
#	define FLUXGL_ARB_point_parameters 1
	POINT_SIZE_MIN_ARB = 0x8126u,
	POINT_SIZE_MAX_ARB = 0x8127u,
	POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128u,
	POINT_DISTANCE_ATTENUATION_ARB = 0x8129u,
};
//- end: ARB_point_parameters

//-//-- 
//- Ext: ARB_point_sprite
enum GLext_ARB_point_sprite
{
#	define FLUXGL_ARB_point_sprite 1
	POINT_SPRITE_ARB = 0x8861u,
	COORD_REPLACE_ARB = 0x8862u,
};
//- end: ARB_point_sprite

//-//-- 
//- Ext: ARB_program_interface_query
enum GLext_ARB_program_interface_query
{
#	define FLUXGL_ARB_program_interface_query 1
//	GL::NUM_COMPATIBLE_SUBROUTINES already defined in 4.0_core
//	GL::COMPATIBLE_SUBROUTINES already defined in 4.0_core
//	GL::ATOMIC_COUNTER_BUFFER already defined in 4.2_core
//	GL::UNIFORM already defined in 4.3_core
//	GL::UNIFORM_BLOCK already defined in 4.3_core
//	GL::PROGRAM_INPUT already defined in 4.3_core
//	GL::PROGRAM_OUTPUT already defined in 4.3_core
//	GL::BUFFER_VARIABLE already defined in 4.3_core
//	GL::SHADER_STORAGE_BLOCK already defined in 4.3_core
//	GL::IS_PER_PATCH already defined in 4.3_core
//	GL::VERTEX_SUBROUTINE already defined in 4.3_core
//	GL::TESS_CONTROL_SUBROUTINE already defined in 4.3_core
//	GL::TESS_EVALUATION_SUBROUTINE already defined in 4.3_core
//	GL::GEOMETRY_SUBROUTINE already defined in 4.3_core
//	GL::FRAGMENT_SUBROUTINE already defined in 4.3_core
//	GL::COMPUTE_SUBROUTINE already defined in 4.3_core
//	GL::VERTEX_SUBROUTINE_UNIFORM already defined in 4.3_core
//	GL::TESS_CONTROL_SUBROUTINE_UNIFORM already defined in 4.3_core
//	GL::TESS_EVALUATION_SUBROUTINE_UNIFORM already defined in 4.3_core
//	GL::GEOMETRY_SUBROUTINE_UNIFORM already defined in 4.3_core
//	GL::FRAGMENT_SUBROUTINE_UNIFORM already defined in 4.3_core
//	GL::COMPUTE_SUBROUTINE_UNIFORM already defined in 4.3_core
//	GL::TRANSFORM_FEEDBACK_VARYING already defined in 4.3_core
//	GL::ACTIVE_RESOURCES already defined in 4.3_core
//	GL::MAX_NAME_LENGTH already defined in 4.3_core
//	GL::MAX_NUM_ACTIVE_VARIABLES already defined in 4.3_core
//	GL::MAX_NUM_COMPATIBLE_SUBROUTINES already defined in 4.3_core
//	GL::NAME_LENGTH already defined in 4.3_core
//	GL::TYPE already defined in 4.3_core
//	GL::ARRAY_SIZE already defined in 4.3_core
//	GL::OFFSET already defined in 4.3_core
//	GL::BLOCK_INDEX already defined in 4.3_core
//	GL::ARRAY_STRIDE already defined in 4.3_core
//	GL::MATRIX_STRIDE already defined in 4.3_core
//	GL::IS_ROW_MAJOR already defined in 4.3_core
//	GL::ATOMIC_COUNTER_BUFFER_INDEX already defined in 4.3_core
//	GL::BUFFER_BINDING already defined in 4.3_core
//	GL::BUFFER_DATA_SIZE already defined in 4.3_core
//	GL::NUM_ACTIVE_VARIABLES already defined in 4.3_core
//	GL::ACTIVE_VARIABLES already defined in 4.3_core
//	GL::REFERENCED_BY_VERTEX_SHADER already defined in 4.3_core
//	GL::REFERENCED_BY_TESS_CONTROL_SHADER already defined in 4.3_core
//	GL::REFERENCED_BY_TESS_EVALUATION_SHADER already defined in 4.3_core
//	GL::REFERENCED_BY_GEOMETRY_SHADER already defined in 4.3_core
//	GL::REFERENCED_BY_FRAGMENT_SHADER already defined in 4.3_core
//	GL::REFERENCED_BY_COMPUTE_SHADER already defined in 4.3_core
//	GL::TOP_LEVEL_ARRAY_SIZE already defined in 4.3_core
//	GL::TOP_LEVEL_ARRAY_STRIDE already defined in 4.3_core
//	GL::LOCATION already defined in 4.3_core
//	GL::LOCATION_INDEX already defined in 4.3_core
};
//- end: ARB_program_interface_query

//-//-- 
//- Ext: ARB_provoking_vertex
enum GLext_ARB_provoking_vertex
{
#	define FLUXGL_ARB_provoking_vertex 1
//	GL::QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION already defined in 3.2_core
//	GL::FIRST_VERTEX_CONVENTION already defined in 3.2_core
//	GL::LAST_VERTEX_CONVENTION already defined in 3.2_core
//	GL::PROVOKING_VERTEX already defined in 3.2_core
};
//- end: ARB_provoking_vertex

//-//-- 
//- Ext: ARB_query_buffer_object
enum GLext_ARB_query_buffer_object
{
#	define FLUXGL_ARB_query_buffer_object 1
//	GL::QUERY_BUFFER_BARRIER_BIT already defined in 4.4_core
//	GL::QUERY_BUFFER already defined in 4.4_core
//	GL::QUERY_BUFFER_BINDING already defined in 4.4_core
//	GL::QUERY_RESULT_NO_WAIT already defined in 4.4_core
};
//- end: ARB_query_buffer_object

//-//-- 
//- Ext: ARB_robustness
enum GLext_ARB_robustness
{
#	define FLUXGL_ARB_robustness 1
//	GL::GLNO_ERROR already defined in 1.1_core
	CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004u,
	LOSE_CONTEXT_ON_RESET_ARB = 0x8252u,
	GUILTY_CONTEXT_RESET_ARB = 0x8253u,
	INNOCENT_CONTEXT_RESET_ARB = 0x8254u,
	UNKNOWN_CONTEXT_RESET_ARB = 0x8255u,
	RESET_NOTIFICATION_STRATEGY_ARB = 0x8256u,
	NO_RESET_NOTIFICATION_ARB = 0x8261u,
};
//- end: ARB_robustness

//-//-- 
//- Ext: ARB_sample_locations
enum GLext_ARB_sample_locations
{
#	define FLUXGL_ARB_sample_locations 1
	SAMPLE_LOCATION_ARB = 0x8E50u,
	SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933Du,
	SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933Eu,
	SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933Fu,
	PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340u,
	PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341u,
	FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342u,
	FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343u,
};
//- end: ARB_sample_locations

//-//-- 
//- Ext: ARB_sample_shading
enum GLext_ARB_sample_shading
{
#	define FLUXGL_ARB_sample_shading 1
	SAMPLE_SHADING_ARB = 0x8C36u,
	MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37u,
};
//- end: ARB_sample_shading

//-//-- 
//- Ext: ARB_sampler_objects
enum GLext_ARB_sampler_objects
{
#	define FLUXGL_ARB_sampler_objects 1
//	GL::SAMPLER_BINDING already defined in 3.3_core
};
//- end: ARB_sampler_objects

//-//-- 
//- Ext: ARB_seamless_cube_map
enum GLext_ARB_seamless_cube_map
{
#	define FLUXGL_ARB_seamless_cube_map 1
//	GL::TEXTURE_CUBE_MAP_SEAMLESS already defined in 3.2_core
};
//- end: ARB_seamless_cube_map

//-//-- 
//- Ext: ARB_seamless_cubemap_per_texture
enum GLext_ARB_seamless_cubemap_per_texture
{
#	define FLUXGL_ARB_seamless_cubemap_per_texture 1
//	GL::TEXTURE_CUBE_MAP_SEAMLESS already defined in 3.2_core
};
//- end: ARB_seamless_cubemap_per_texture

//-//-- 
//- Ext: ARB_separate_shader_objects
enum GLext_ARB_separate_shader_objects
{
#	define FLUXGL_ARB_separate_shader_objects 1
//	GL::VERTEX_SHADER_BIT already defined in 4.1_core
//	GL::FRAGMENT_SHADER_BIT already defined in 4.1_core
//	GL::GEOMETRY_SHADER_BIT already defined in 4.1_core
//	GL::TESS_CONTROL_SHADER_BIT already defined in 4.1_core
//	GL::TESS_EVALUATION_SHADER_BIT already defined in 4.1_core
//	GL::PROGRAM_SEPARABLE already defined in 4.1_core
//	GL::ACTIVE_PROGRAM already defined in 4.1_core
//	GL::PROGRAM_PIPELINE_BINDING already defined in 4.1_core
//	GL::ALL_SHADER_BITS already defined in 4.1_core
};
//- end: ARB_separate_shader_objects

//-//-- 
//- Ext: ARB_shader_atomic_counters
enum GLext_ARB_shader_atomic_counters
{
#	define FLUXGL_ARB_shader_atomic_counters 1
//	GL::ATOMIC_COUNTER_BUFFER already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_BINDING already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_START already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_SIZE already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_DATA_SIZE already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER already defined in 4.2_core
//	GL::MAX_VERTEX_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::MAX_COMBINED_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::MAX_VERTEX_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::MAX_TESS_CONTROL_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::MAX_TESS_EVALUATION_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::MAX_GEOMETRY_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::MAX_FRAGMENT_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::MAX_COMBINED_ATOMIC_COUNTERS already defined in 4.2_core
//	GL::MAX_ATOMIC_COUNTER_BUFFER_SIZE already defined in 4.2_core
//	GL::ACTIVE_ATOMIC_COUNTER_BUFFERS already defined in 4.2_core
//	GL::UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX already defined in 4.2_core
//	GL::UNSIGNED_INT_ATOMIC_COUNTER already defined in 4.2_core
//	GL::MAX_ATOMIC_COUNTER_BUFFER_BINDINGS already defined in 4.2_core
};
//- end: ARB_shader_atomic_counters

//-//-- 
//- Ext: ARB_shader_image_load_store
enum GLext_ARB_shader_image_load_store
{
#	define FLUXGL_ARB_shader_image_load_store 1
//	GL::VERTEX_ATTRIB_ARRAY_BARRIER_BIT already defined in 4.2_core
//	GL::ELEMENT_ARRAY_BARRIER_BIT already defined in 4.2_core
//	GL::UNIFORM_BARRIER_BIT already defined in 4.2_core
//	GL::TEXTURE_FETCH_BARRIER_BIT already defined in 4.2_core
//	GL::SHADER_IMAGE_ACCESS_BARRIER_BIT already defined in 4.2_core
//	GL::COMMAND_BARRIER_BIT already defined in 4.2_core
//	GL::PIXEL_BUFFER_BARRIER_BIT already defined in 4.2_core
//	GL::TEXTURE_UPDATE_BARRIER_BIT already defined in 4.2_core
//	GL::BUFFER_UPDATE_BARRIER_BIT already defined in 4.2_core
//	GL::FRAMEBUFFER_BARRIER_BIT already defined in 4.2_core
//	GL::TRANSFORM_FEEDBACK_BARRIER_BIT already defined in 4.2_core
//	GL::ATOMIC_COUNTER_BARRIER_BIT already defined in 4.2_core
//	GL::MAX_IMAGE_UNITS already defined in 4.2_core
//	GL::MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS already defined in 4.2_core
//	GL::IMAGE_BINDING_NAME already defined in 4.2_core
//	GL::IMAGE_BINDING_LEVEL already defined in 4.2_core
//	GL::IMAGE_BINDING_LAYERED already defined in 4.2_core
//	GL::IMAGE_BINDING_LAYER already defined in 4.2_core
//	GL::IMAGE_BINDING_ACCESS already defined in 4.2_core
//	GL::IMAGE_1D already defined in 4.2_core
//	GL::IMAGE_2D already defined in 4.2_core
//	GL::IMAGE_3D already defined in 4.2_core
//	GL::IMAGE_2D_RECT already defined in 4.2_core
//	GL::IMAGE_CUBE already defined in 4.2_core
//	GL::IMAGE_BUFFER already defined in 4.2_core
//	GL::IMAGE_1D_ARRAY already defined in 4.2_core
//	GL::IMAGE_2D_ARRAY already defined in 4.2_core
//	GL::IMAGE_CUBE_MAP_ARRAY already defined in 4.2_core
//	GL::IMAGE_2D_MULTISAMPLE already defined in 4.2_core
//	GL::IMAGE_2D_MULTISAMPLE_ARRAY already defined in 4.2_core
//	GL::INT_IMAGE_1D already defined in 4.2_core
//	GL::INT_IMAGE_2D already defined in 4.2_core
//	GL::INT_IMAGE_3D already defined in 4.2_core
//	GL::INT_IMAGE_2D_RECT already defined in 4.2_core
//	GL::INT_IMAGE_CUBE already defined in 4.2_core
//	GL::INT_IMAGE_BUFFER already defined in 4.2_core
//	GL::INT_IMAGE_1D_ARRAY already defined in 4.2_core
//	GL::INT_IMAGE_2D_ARRAY already defined in 4.2_core
//	GL::INT_IMAGE_CUBE_MAP_ARRAY already defined in 4.2_core
//	GL::INT_IMAGE_2D_MULTISAMPLE already defined in 4.2_core
//	GL::INT_IMAGE_2D_MULTISAMPLE_ARRAY already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_1D already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_2D already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_3D already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_2D_RECT already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_CUBE already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_BUFFER already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_1D_ARRAY already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_2D_ARRAY already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_2D_MULTISAMPLE already defined in 4.2_core
//	GL::UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY already defined in 4.2_core
//	GL::MAX_IMAGE_SAMPLES already defined in 4.2_core
//	GL::IMAGE_BINDING_FORMAT already defined in 4.2_core
//	GL::IMAGE_FORMAT_COMPATIBILITY_TYPE already defined in 4.2_core
//	GL::IMAGE_FORMAT_COMPATIBILITY_BY_SIZE already defined in 4.2_core
//	GL::IMAGE_FORMAT_COMPATIBILITY_BY_CLASS already defined in 4.2_core
//	GL::MAX_VERTEX_IMAGE_UNIFORMS already defined in 4.2_core
//	GL::MAX_TESS_CONTROL_IMAGE_UNIFORMS already defined in 4.2_core
//	GL::MAX_TESS_EVALUATION_IMAGE_UNIFORMS already defined in 4.2_core
//	GL::MAX_GEOMETRY_IMAGE_UNIFORMS already defined in 4.2_core
//	GL::MAX_FRAGMENT_IMAGE_UNIFORMS already defined in 4.2_core
//	GL::MAX_COMBINED_IMAGE_UNIFORMS already defined in 4.2_core
//	GL::ALL_BARRIER_BITS already defined in 4.2_core
};
//- end: ARB_shader_image_load_store

//-//-- 
//- Ext: ARB_shader_objects
enum GLext_ARB_shader_objects
{
#	define FLUXGL_ARB_shader_objects 1
	PROGRAM_OBJECT_ARB = 0x8B40u,
	SHADER_OBJECT_ARB = 0x8B48u,
	OBJECT_TYPE_ARB = 0x8B4Eu,
	OBJECT_SUBTYPE_ARB = 0x8B4Fu,
	FLOAT_VEC2_ARB = 0x8B50u,
	FLOAT_VEC3_ARB = 0x8B51u,
	FLOAT_VEC4_ARB = 0x8B52u,
	INT_VEC2_ARB = 0x8B53u,
	INT_VEC3_ARB = 0x8B54u,
	INT_VEC4_ARB = 0x8B55u,
	BOOL_ARB = 0x8B56u,
	BOOL_VEC2_ARB = 0x8B57u,
	BOOL_VEC3_ARB = 0x8B58u,
	BOOL_VEC4_ARB = 0x8B59u,
	FLOAT_MAT2_ARB = 0x8B5Au,
	FLOAT_MAT3_ARB = 0x8B5Bu,
	FLOAT_MAT4_ARB = 0x8B5Cu,
	SAMPLER_1D_ARB = 0x8B5Du,
	SAMPLER_2D_ARB = 0x8B5Eu,
	SAMPLER_3D_ARB = 0x8B5Fu,
	SAMPLER_CUBE_ARB = 0x8B60u,
	SAMPLER_1D_SHADOW_ARB = 0x8B61u,
	SAMPLER_2D_SHADOW_ARB = 0x8B62u,
	SAMPLER_2D_RECT_ARB = 0x8B63u,
	SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64u,
	OBJECT_DELETE_STATUS_ARB = 0x8B80u,
	OBJECT_COMPILE_STATUS_ARB = 0x8B81u,
	OBJECT_LINK_STATUS_ARB = 0x8B82u,
	OBJECT_VALIDATE_STATUS_ARB = 0x8B83u,
	OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84u,
	OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85u,
	OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86u,
	OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87u,
	OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88u,
};
//- end: ARB_shader_objects

//-//-- 
//- Ext: ARB_shader_storage_buffer_object
enum GLext_ARB_shader_storage_buffer_object
{
#	define FLUXGL_ARB_shader_storage_buffer_object 1
//	GL::SHADER_STORAGE_BARRIER_BIT already defined in 4.3_core
//	GL::MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS already defined in 4.2_core
//	GL::MAX_COMBINED_SHADER_OUTPUT_RESOURCES already defined in 4.3_core
//	GL::SHADER_STORAGE_BUFFER already defined in 4.3_core
//	GL::SHADER_STORAGE_BUFFER_BINDING already defined in 4.3_core
//	GL::SHADER_STORAGE_BUFFER_START already defined in 4.3_core
//	GL::SHADER_STORAGE_BUFFER_SIZE already defined in 4.3_core
//	GL::MAX_VERTEX_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_GEOMETRY_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_FRAGMENT_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_COMPUTE_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_COMBINED_SHADER_STORAGE_BLOCKS already defined in 4.3_core
//	GL::MAX_SHADER_STORAGE_BUFFER_BINDINGS already defined in 4.3_core
//	GL::MAX_SHADER_STORAGE_BLOCK_SIZE already defined in 4.3_core
//	GL::SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT already defined in 4.3_core
};
//- end: ARB_shader_storage_buffer_object

//-//-- 
//- Ext: ARB_shader_subroutine
enum GLext_ARB_shader_subroutine
{
#	define FLUXGL_ARB_shader_subroutine 1
//	GL::UNIFORM_SIZE already defined in 3.1_core
//	GL::UNIFORM_NAME_LENGTH already defined in 3.1_core
//	GL::ACTIVE_SUBROUTINES already defined in 4.0_core
//	GL::ACTIVE_SUBROUTINE_UNIFORMS already defined in 4.0_core
//	GL::MAX_SUBROUTINES already defined in 4.0_core
//	GL::MAX_SUBROUTINE_UNIFORM_LOCATIONS already defined in 4.0_core
//	GL::ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS already defined in 4.0_core
//	GL::ACTIVE_SUBROUTINE_MAX_LENGTH already defined in 4.0_core
//	GL::ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH already defined in 4.0_core
//	GL::NUM_COMPATIBLE_SUBROUTINES already defined in 4.0_core
//	GL::COMPATIBLE_SUBROUTINES already defined in 4.0_core
};
//- end: ARB_shader_subroutine

//-//-- 
//- Ext: ARB_shading_language_100
enum GLext_ARB_shading_language_100
{
#	define FLUXGL_ARB_shading_language_100 1
	SHADING_LANGUAGE_VERSION_ARB = 0x8B8Cu,
};
//- end: ARB_shading_language_100

//-//-- 
//- Ext: ARB_shading_language_include
enum GLext_ARB_shading_language_include
{
#	define FLUXGL_ARB_shading_language_include 1
	SHADER_INCLUDE_ARB = 0x8DAEu,
	NAMED_STRING_LENGTH_ARB = 0x8DE9u,
	NAMED_STRING_TYPE_ARB = 0x8DEAu,
};
//- end: ARB_shading_language_include

//-//-- 
//- Ext: ARB_shadow
enum GLext_ARB_shadow
{
#	define FLUXGL_ARB_shadow 1
	TEXTURE_COMPARE_MODE_ARB = 0x884Cu,
	TEXTURE_COMPARE_FUNC_ARB = 0x884Du,
	COMPARE_R_TO_TEXTURE_ARB = 0x884Eu,
};
//- end: ARB_shadow

//-//-- 
//- Ext: ARB_shadow_ambient
enum GLext_ARB_shadow_ambient
{
#	define FLUXGL_ARB_shadow_ambient 1
	TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BFu,
};
//- end: ARB_shadow_ambient

//-//-- 
//- Ext: ARB_sparse_buffer
enum GLext_ARB_sparse_buffer
{
#	define FLUXGL_ARB_sparse_buffer 1
	SPARSE_STORAGE_BIT_ARB = 0x0400u,
	SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8u,
};
//- end: ARB_sparse_buffer

//-//-- 
//- Ext: ARB_sparse_texture
enum GLext_ARB_sparse_texture
{
#	define FLUXGL_ARB_sparse_texture 1
	VIRTUAL_PAGE_SIZE_X_ARB = 0x9195u,
	VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196u,
	VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197u,
	MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198u,
	MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199u,
	MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919Au,
	TEXTURE_SPARSE_ARB = 0x91A6u,
	VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7u,
	NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8u,
	SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9u,
	NUM_SPARSE_LEVELS_ARB = 0x91AAu,
};
//- end: ARB_sparse_texture

//-//-- 
//- Ext: ARB_stencil_texturing
enum GLext_ARB_stencil_texturing
{
#	define FLUXGL_ARB_stencil_texturing 1
//	GL::DEPTH_STENCIL_TEXTURE_MODE already defined in 4.3_core
};
//- end: ARB_stencil_texturing

//-//-- 
//- Ext: ARB_sync
enum GLext_ARB_sync
{
#	define FLUXGL_ARB_sync 1
//	GL::SYNC_FLUSH_COMMANDS_BIT already defined in 3.2_core
//	GL::MAX_SERVER_WAIT_TIMEOUT already defined in 3.2_core
//	GL::OBJECT_TYPE already defined in 3.2_core
//	GL::SYNC_CONDITION already defined in 3.2_core
//	GL::SYNC_STATUS already defined in 3.2_core
//	GL::SYNC_FLAGS already defined in 3.2_core
//	GL::SYNC_FENCE already defined in 3.2_core
//	GL::SYNC_GPU_COMMANDS_COMPLETE already defined in 3.2_core
//	GL::UNSIGNALED already defined in 3.2_core
//	GL::SIGNALED already defined in 3.2_core
//	GL::ALREADY_SIGNALED already defined in 3.2_core
//	GL::TIMEOUT_EXPIRED already defined in 3.2_core
//	GL::CONDITION_SATISFIED already defined in 3.2_core
//	GL::GLWAIT_FAILED already defined in 3.2_core
//	GL::TIMEOUT_IGNORED already defined in 3.2_core
};
//- end: ARB_sync

//-//-- 
//- Ext: ARB_tessellation_shader
enum GLext_ARB_tessellation_shader
{
#	define FLUXGL_ARB_tessellation_shader 1
//	GL::TRIANGLES already defined in 1.1_core
//	GL::QUADS already defined in 1.1_core
//	GL::PATCHES already defined in 4.0_core
//	GL::EQUAL already defined in 1.1_core
//	GL::CW already defined in 1.1_core
//	GL::CCW already defined in 1.1_core
//	GL::UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER already defined in 4.0_core
//	GL::UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER already defined in 4.0_core
//	GL::MAX_TESS_CONTROL_INPUT_COMPONENTS already defined in 4.0_core
//	GL::MAX_TESS_EVALUATION_INPUT_COMPONENTS already defined in 4.0_core
//	GL::MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS already defined in 4.0_core
//	GL::MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS already defined in 4.0_core
//	GL::PATCH_VERTICES already defined in 4.0_core
//	GL::PATCH_DEFAULT_INNER_LEVEL already defined in 4.0_core
//	GL::PATCH_DEFAULT_OUTER_LEVEL already defined in 4.0_core
//	GL::TESS_CONTROL_OUTPUT_VERTICES already defined in 4.0_core
//	GL::TESS_GEN_MODE already defined in 4.0_core
//	GL::TESS_GEN_SPACING already defined in 4.0_core
//	GL::TESS_GEN_VERTEX_ORDER already defined in 4.0_core
//	GL::TESS_GEN_POINT_MODE already defined in 4.0_core
//	GL::ISOLINES already defined in 4.0_core
//	GL::FRACTIONAL_ODD already defined in 4.0_core
//	GL::FRACTIONAL_EVEN already defined in 4.0_core
//	GL::MAX_PATCH_VERTICES already defined in 4.0_core
//	GL::MAX_TESS_GEN_LEVEL already defined in 4.0_core
//	GL::MAX_TESS_CONTROL_UNIFORM_COMPONENTS already defined in 4.0_core
//	GL::MAX_TESS_EVALUATION_UNIFORM_COMPONENTS already defined in 4.0_core
//	GL::MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS already defined in 4.0_core
//	GL::MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS already defined in 4.0_core
//	GL::MAX_TESS_CONTROL_OUTPUT_COMPONENTS already defined in 4.0_core
//	GL::MAX_TESS_PATCH_COMPONENTS already defined in 4.0_core
//	GL::MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS already defined in 4.0_core
//	GL::MAX_TESS_EVALUATION_OUTPUT_COMPONENTS already defined in 4.0_core
//	GL::TESS_EVALUATION_SHADER already defined in 4.0_core
//	GL::TESS_CONTROL_SHADER already defined in 4.0_core
//	GL::MAX_TESS_CONTROL_UNIFORM_BLOCKS already defined in 4.0_core
//	GL::MAX_TESS_EVALUATION_UNIFORM_BLOCKS already defined in 4.0_core
};
//- end: ARB_tessellation_shader

//-//-- 
//- Ext: ARB_texture_border_clamp
enum GLext_ARB_texture_border_clamp
{
#	define FLUXGL_ARB_texture_border_clamp 1
	CLAMP_TO_BORDER_ARB = 0x812Du,
};
//- end: ARB_texture_border_clamp

//-//-- 
//- Ext: ARB_texture_buffer_object
enum GLext_ARB_texture_buffer_object
{
#	define FLUXGL_ARB_texture_buffer_object 1
	TEXTURE_BUFFER_ARB = 0x8C2Au,
	MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2Bu,
	TEXTURE_BINDING_BUFFER_ARB = 0x8C2Cu,
	TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2Du,
	TEXTURE_BUFFER_FORMAT_ARB = 0x8C2Eu,
};
//- end: ARB_texture_buffer_object

//-//-- 
//- Ext: ARB_texture_buffer_object_rgb32
enum GLext_ARB_texture_buffer_object_rgb32
{
#	define FLUXGL_ARB_texture_buffer_object_rgb32 1
//	GL::RGB32F already defined in 3.0_core
//	GL::RGB32UI already defined in 3.0_core
//	GL::RGB32I already defined in 3.0_core
};
//- end: ARB_texture_buffer_object_rgb32

//-//-- 
//- Ext: ARB_texture_buffer_range
enum GLext_ARB_texture_buffer_range
{
#	define FLUXGL_ARB_texture_buffer_range 1
//	GL::TEXTURE_BUFFER_OFFSET already defined in 4.3_core
//	GL::TEXTURE_BUFFER_SIZE already defined in 4.3_core
//	GL::TEXTURE_BUFFER_OFFSET_ALIGNMENT already defined in 4.3_core
};
//- end: ARB_texture_buffer_range

//-//-- 
//- Ext: ARB_texture_compression
enum GLext_ARB_texture_compression
{
#	define FLUXGL_ARB_texture_compression 1
	COMPRESSED_ALPHA_ARB = 0x84E9u,
	COMPRESSED_LUMINANCE_ARB = 0x84EAu,
	COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EBu,
	COMPRESSED_INTENSITY_ARB = 0x84ECu,
	COMPRESSED_RGB_ARB = 0x84EDu,
	COMPRESSED_RGBA_ARB = 0x84EEu,
	TEXTURE_COMPRESSION_HINT_ARB = 0x84EFu,
	TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0u,
	TEXTURE_COMPRESSED_ARB = 0x86A1u,
	NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2u,
	COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3u,
};
//- end: ARB_texture_compression

//-//-- 
//- Ext: ARB_texture_compression_bptc
enum GLext_ARB_texture_compression_bptc
{
#	define FLUXGL_ARB_texture_compression_bptc 1
	COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8Cu,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8Du,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8Eu,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8Fu,
};
//- end: ARB_texture_compression_bptc

//-//-- 
//- Ext: ARB_texture_compression_rgtc
enum GLext_ARB_texture_compression_rgtc
{
#	define FLUXGL_ARB_texture_compression_rgtc 1
//	GL::COMPRESSED_RED_RGTC1 already defined in 3.0_core
//	GL::COMPRESSED_SIGNED_RED_RGTC1 already defined in 3.0_core
//	GL::COMPRESSED_RG_RGTC2 already defined in 3.0_core
//	GL::COMPRESSED_SIGNED_RG_RGTC2 already defined in 3.0_core
};
//- end: ARB_texture_compression_rgtc

//-//-- 
//- Ext: ARB_texture_cube_map
enum GLext_ARB_texture_cube_map
{
#	define FLUXGL_ARB_texture_cube_map 1
	NORMAL_MAP_ARB = 0x8511u,
	REFLECTION_MAP_ARB = 0x8512u,
	TEXTURE_CUBE_MAP_ARB = 0x8513u,
	TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514u,
	TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515u,
	TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516u,
	TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517u,
	TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518u,
	TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519u,
	TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851Au,
	PROXY_TEXTURE_CUBE_MAP_ARB = 0x851Bu,
	MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851Cu,
};
//- end: ARB_texture_cube_map

//-//-- 
//- Ext: ARB_texture_cube_map_array
enum GLext_ARB_texture_cube_map_array
{
#	define FLUXGL_ARB_texture_cube_map_array 1
	TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009u,
	TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900Au,
	PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900Bu,
	SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900Cu,
	SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900Du,
	INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900Eu,
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900Fu,
};
//- end: ARB_texture_cube_map_array

//-//-- 
//- Ext: ARB_texture_env_combine
enum GLext_ARB_texture_env_combine
{
#	define FLUXGL_ARB_texture_env_combine 1
	SUBTRACT_ARB = 0x84E7u,
	COMBINE_ARB = 0x8570u,
	COMBINE_RGB_ARB = 0x8571u,
	COMBINE_ALPHA_ARB = 0x8572u,
	RGB_SCALE_ARB = 0x8573u,
	ADD_SIGNED_ARB = 0x8574u,
	INTERPOLATE_ARB = 0x8575u,
	CONSTANT_ARB = 0x8576u,
	PRIMARY_COLOR_ARB = 0x8577u,
	PREVIOUS_ARB = 0x8578u,
	SOURCE0_RGB_ARB = 0x8580u,
	SOURCE1_RGB_ARB = 0x8581u,
	SOURCE2_RGB_ARB = 0x8582u,
	SOURCE0_ALPHA_ARB = 0x8588u,
	SOURCE1_ALPHA_ARB = 0x8589u,
	SOURCE2_ALPHA_ARB = 0x858Au,
	OPERAND0_RGB_ARB = 0x8590u,
	OPERAND1_RGB_ARB = 0x8591u,
	OPERAND2_RGB_ARB = 0x8592u,
	OPERAND0_ALPHA_ARB = 0x8598u,
	OPERAND1_ALPHA_ARB = 0x8599u,
	OPERAND2_ALPHA_ARB = 0x859Au,
};
//- end: ARB_texture_env_combine

//-//-- 
//- Ext: ARB_texture_env_dot3
enum GLext_ARB_texture_env_dot3
{
#	define FLUXGL_ARB_texture_env_dot3 1
	DOT3_RGB_ARB = 0x86AEu,
	DOT3_RGBA_ARB = 0x86AFu,
};
//- end: ARB_texture_env_dot3

//-//-- 
//- Ext: ARB_texture_filter_minmax
enum GLext_ARB_texture_filter_minmax
{
#	define FLUXGL_ARB_texture_filter_minmax 1
	TEXTURE_REDUCTION_MODE_ARB = 0x9366u,
	WEIGHTED_AVERAGE_ARB = 0x9367u,
};
//- end: ARB_texture_filter_minmax

//-//-- 
//- Ext: ARB_texture_float
enum GLext_ARB_texture_float
{
#	define FLUXGL_ARB_texture_float 1
	RGBA32F_ARB = 0x8814u,
	RGB32F_ARB = 0x8815u,
	ALPHA32F_ARB = 0x8816u,
	INTENSITY32F_ARB = 0x8817u,
	LUMINANCE32F_ARB = 0x8818u,
	LUMINANCE_ALPHA32F_ARB = 0x8819u,
	RGBA16F_ARB = 0x881Au,
	RGB16F_ARB = 0x881Bu,
	ALPHA16F_ARB = 0x881Cu,
	INTENSITY16F_ARB = 0x881Du,
	LUMINANCE16F_ARB = 0x881Eu,
	LUMINANCE_ALPHA16F_ARB = 0x881Fu,
	TEXTURE_RED_TYPE_ARB = 0x8C10u,
	TEXTURE_GREEN_TYPE_ARB = 0x8C11u,
	TEXTURE_BLUE_TYPE_ARB = 0x8C12u,
	TEXTURE_ALPHA_TYPE_ARB = 0x8C13u,
	TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14u,
	TEXTURE_INTENSITY_TYPE_ARB = 0x8C15u,
	TEXTURE_DEPTH_TYPE_ARB = 0x8C16u,
	UNSIGNED_NORMALIZED_ARB = 0x8C17u,
};
//- end: ARB_texture_float

//-//-- 
//- Ext: ARB_texture_gather
enum GLext_ARB_texture_gather
{
#	define FLUXGL_ARB_texture_gather 1
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5Eu,
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5Fu,
	MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9Fu,
};
//- end: ARB_texture_gather

//-//-- 
//- Ext: ARB_texture_mirror_clamp_to_edge
enum GLext_ARB_texture_mirror_clamp_to_edge
{
#	define FLUXGL_ARB_texture_mirror_clamp_to_edge 1
//	GL::MIRROR_CLAMP_TO_EDGE already defined in 4.4_core
};
//- end: ARB_texture_mirror_clamp_to_edge

//-//-- 
//- Ext: ARB_texture_mirrored_repeat
enum GLext_ARB_texture_mirrored_repeat
{
#	define FLUXGL_ARB_texture_mirrored_repeat 1
	MIRRORED_REPEAT_ARB = 0x8370u,
};
//- end: ARB_texture_mirrored_repeat

//-//-- 
//- Ext: ARB_texture_multisample
enum GLext_ARB_texture_multisample
{
#	define FLUXGL_ARB_texture_multisample 1
//	GL::SAMPLE_POSITION already defined in 3.2_core
//	GL::SAMPLE_MASK already defined in 3.2_core
//	GL::SAMPLE_MASK_VALUE already defined in 3.2_core
//	GL::MAX_SAMPLE_MASK_WORDS already defined in 3.2_core
//	GL::TEXTURE_2D_MULTISAMPLE already defined in 3.2_core
//	GL::PROXY_TEXTURE_2D_MULTISAMPLE already defined in 3.2_core
//	GL::TEXTURE_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::TEXTURE_BINDING_2D_MULTISAMPLE already defined in 3.2_core
//	GL::TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::TEXTURE_SAMPLES already defined in 3.2_core
//	GL::TEXTURE_FIXED_SAMPLE_LOCATIONS already defined in 3.2_core
//	GL::SAMPLER_2D_MULTISAMPLE already defined in 3.2_core
//	GL::INT_SAMPLER_2D_MULTISAMPLE already defined in 3.2_core
//	GL::UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE already defined in 3.2_core
//	GL::SAMPLER_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::INT_SAMPLER_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
//	GL::MAX_COLOR_TEXTURE_SAMPLES already defined in 3.2_core
//	GL::MAX_DEPTH_TEXTURE_SAMPLES already defined in 3.2_core
//	GL::MAX_INTEGER_SAMPLES already defined in 3.2_core
};
//- end: ARB_texture_multisample

//-//-- 
//- Ext: ARB_texture_rectangle
enum GLext_ARB_texture_rectangle
{
#	define FLUXGL_ARB_texture_rectangle 1
	TEXTURE_RECTANGLE_ARB = 0x84F5u,
	TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6u,
	PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7u,
	MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8u,
};
//- end: ARB_texture_rectangle

//-//-- 
//- Ext: ARB_texture_rg
enum GLext_ARB_texture_rg
{
#	define FLUXGL_ARB_texture_rg 1
//	GL::RG already defined in 3.0_core
//	GL::RG_INTEGER already defined in 3.0_core
//	GL::R8 already defined in 3.0_core
//	GL::R16 already defined in 3.0_core
//	GL::RG8 already defined in 3.0_core
//	GL::RG16 already defined in 3.0_core
//	GL::R16F already defined in 3.0_core
//	GL::R32F already defined in 3.0_core
//	GL::RG16F already defined in 3.0_core
//	GL::RG32F already defined in 3.0_core
//	GL::R8I already defined in 3.0_core
//	GL::R8UI already defined in 3.0_core
//	GL::R16I already defined in 3.0_core
//	GL::R16UI already defined in 3.0_core
//	GL::R32I already defined in 3.0_core
//	GL::R32UI already defined in 3.0_core
//	GL::RG8I already defined in 3.0_core
//	GL::RG8UI already defined in 3.0_core
//	GL::RG16I already defined in 3.0_core
//	GL::RG16UI already defined in 3.0_core
//	GL::RG32I already defined in 3.0_core
//	GL::RG32UI already defined in 3.0_core
};
//- end: ARB_texture_rg

//-//-- 
//- Ext: ARB_texture_rgb10_a2ui
enum GLext_ARB_texture_rgb10_a2ui
{
#	define FLUXGL_ARB_texture_rgb10_a2ui 1
//	GL::RGB10_A2UI already defined in 3.3_core
};
//- end: ARB_texture_rgb10_a2ui

//-//-- 
//- Ext: ARB_texture_stencil8
enum GLext_ARB_texture_stencil8
{
#	define FLUXGL_ARB_texture_stencil8 1
//	GL::STENCIL_INDEX already defined in 1.1_core
//	GL::STENCIL_INDEX8 already defined in 3.0_core
};
//- end: ARB_texture_stencil8

//-//-- 
//- Ext: ARB_texture_storage
enum GLext_ARB_texture_storage
{
#	define FLUXGL_ARB_texture_storage 1
//	GL::TEXTURE_IMMUTABLE_FORMAT already defined in 4.2_core
};
//- end: ARB_texture_storage

//-//-- 
//- Ext: ARB_texture_swizzle
enum GLext_ARB_texture_swizzle
{
#	define FLUXGL_ARB_texture_swizzle 1
//	GL::TEXTURE_SWIZZLE_R already defined in 3.3_core
//	GL::TEXTURE_SWIZZLE_G already defined in 3.3_core
//	GL::TEXTURE_SWIZZLE_B already defined in 3.3_core
//	GL::TEXTURE_SWIZZLE_A already defined in 3.3_core
//	GL::TEXTURE_SWIZZLE_RGBA already defined in 3.3_core
};
//- end: ARB_texture_swizzle

//-//-- 
//- Ext: ARB_texture_view
enum GLext_ARB_texture_view
{
#	define FLUXGL_ARB_texture_view 1
//	GL::TEXTURE_VIEW_MIN_LEVEL already defined in 4.3_core
//	GL::TEXTURE_VIEW_NUM_LEVELS already defined in 4.3_core
//	GL::TEXTURE_VIEW_MIN_LAYER already defined in 4.3_core
//	GL::TEXTURE_VIEW_NUM_LAYERS already defined in 4.3_core
//	GL::TEXTURE_IMMUTABLE_LEVELS already defined in 4.3_core
};
//- end: ARB_texture_view

//-//-- 
//- Ext: ARB_timer_query
enum GLext_ARB_timer_query
{
#	define FLUXGL_ARB_timer_query 1
//	GL::TIME_ELAPSED already defined in 3.3_core
//	GL::TIMESTAMP already defined in 3.3_core
};
//- end: ARB_timer_query

//-//-- 
//- Ext: ARB_transform_feedback2
enum GLext_ARB_transform_feedback2
{
#	define FLUXGL_ARB_transform_feedback2 1
//	GL::TRANSFORM_FEEDBACK already defined in 4.0_core
//	GL::TRANSFORM_FEEDBACK_BUFFER_PAUSED already defined in 4.0_core
//	GL::TRANSFORM_FEEDBACK_BUFFER_ACTIVE already defined in 4.0_core
//	GL::TRANSFORM_FEEDBACK_BINDING already defined in 4.0_core
};
//- end: ARB_transform_feedback2

//-//-- 
//- Ext: ARB_transform_feedback3
enum GLext_ARB_transform_feedback3
{
#	define FLUXGL_ARB_transform_feedback3 1
//	GL::MAX_TRANSFORM_FEEDBACK_BUFFERS already defined in 4.0_core
//	GL::MAX_VERTEX_STREAMS already defined in 4.0_core
};
//- end: ARB_transform_feedback3

//-//-- 
//- Ext: ARB_transform_feedback_overflow_query
enum GLext_ARB_transform_feedback_overflow_query
{
#	define FLUXGL_ARB_transform_feedback_overflow_query 1
	TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82ECu,
	TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82EDu,
};
//- end: ARB_transform_feedback_overflow_query

//-//-- 
//- Ext: ARB_transpose_matrix
enum GLext_ARB_transpose_matrix
{
#	define FLUXGL_ARB_transpose_matrix 1
	TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3u,
	TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4u,
	TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5u,
	TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6u,
};
//- end: ARB_transpose_matrix

//-//-- 
//- Ext: ARB_uniform_buffer_object
enum GLext_ARB_uniform_buffer_object
{
#	define FLUXGL_ARB_uniform_buffer_object 1
//	GL::UNIFORM_BUFFER already defined in 3.1_core
//	GL::UNIFORM_BUFFER_BINDING already defined in 3.1_core
//	GL::UNIFORM_BUFFER_START already defined in 3.1_core
//	GL::UNIFORM_BUFFER_SIZE already defined in 3.1_core
//	GL::MAX_VERTEX_UNIFORM_BLOCKS already defined in 3.1_core
//	GL::MAX_GEOMETRY_UNIFORM_BLOCKS already defined in 3.1_core
//	GL::MAX_FRAGMENT_UNIFORM_BLOCKS already defined in 3.1_core
//	GL::MAX_COMBINED_UNIFORM_BLOCKS already defined in 3.1_core
//	GL::MAX_UNIFORM_BUFFER_BINDINGS already defined in 3.1_core
//	GL::MAX_UNIFORM_BLOCK_SIZE already defined in 3.1_core
//	GL::MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS already defined in 3.1_core
//	GL::MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS already defined in 3.1_core
//	GL::MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS already defined in 3.1_core
//	GL::UNIFORM_BUFFER_OFFSET_ALIGNMENT already defined in 3.1_core
//	GL::ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH already defined in 3.1_core
//	GL::ACTIVE_UNIFORM_BLOCKS already defined in 3.1_core
//	GL::UNIFORM_TYPE already defined in 3.1_core
//	GL::UNIFORM_SIZE already defined in 3.1_core
//	GL::UNIFORM_NAME_LENGTH already defined in 3.1_core
//	GL::UNIFORM_BLOCK_INDEX already defined in 3.1_core
//	GL::UNIFORM_OFFSET already defined in 3.1_core
//	GL::UNIFORM_ARRAY_STRIDE already defined in 3.1_core
//	GL::UNIFORM_MATRIX_STRIDE already defined in 3.1_core
//	GL::UNIFORM_IS_ROW_MAJOR already defined in 3.1_core
//	GL::UNIFORM_BLOCK_BINDING already defined in 3.1_core
//	GL::UNIFORM_BLOCK_DATA_SIZE already defined in 3.1_core
//	GL::UNIFORM_BLOCK_NAME_LENGTH already defined in 3.1_core
//	GL::UNIFORM_BLOCK_ACTIVE_UNIFORMS already defined in 3.1_core
//	GL::UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES already defined in 3.1_core
//	GL::UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER already defined in 3.1_core
//	GL::UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER already defined in 3.1_core
//	GL::UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER already defined in 3.1_core
//	GL::INVALID_INDEX already defined in 3.1_core
};
//- end: ARB_uniform_buffer_object

//-//-- 
//- Ext: ARB_vertex_array_bgra
enum GLext_ARB_vertex_array_bgra
{
#	define FLUXGL_ARB_vertex_array_bgra 1
//	GL::BGRA already defined in 1.2_core
};
//- end: ARB_vertex_array_bgra

//-//-- 
//- Ext: ARB_vertex_array_object
enum GLext_ARB_vertex_array_object
{
#	define FLUXGL_ARB_vertex_array_object 1
//	GL::VERTEX_ARRAY_BINDING already defined in 3.0_core
};
//- end: ARB_vertex_array_object

//-//-- 
//- Ext: ARB_vertex_attrib_64bit
enum GLext_ARB_vertex_attrib_64bit
{
#	define FLUXGL_ARB_vertex_attrib_64bit 1
//	GL::RGB32I already defined in 3.0_core
//	GL::DOUBLE_MAT2 already defined in 4.0_core
//	GL::DOUBLE_MAT3 already defined in 4.0_core
//	GL::DOUBLE_MAT4 already defined in 4.0_core
//	GL::DOUBLE_MAT2x3 already defined in 4.0_core
//	GL::DOUBLE_MAT2x4 already defined in 4.0_core
//	GL::DOUBLE_MAT3x2 already defined in 4.0_core
//	GL::DOUBLE_MAT3x4 already defined in 4.0_core
//	GL::DOUBLE_MAT4x2 already defined in 4.0_core
//	GL::DOUBLE_MAT4x3 already defined in 4.0_core
//	GL::DOUBLE_VEC2 already defined in 4.0_core
//	GL::DOUBLE_VEC3 already defined in 4.0_core
//	GL::DOUBLE_VEC4 already defined in 4.0_core
};
//- end: ARB_vertex_attrib_64bit

//-//-- 
//- Ext: ARB_vertex_attrib_binding
enum GLext_ARB_vertex_attrib_binding
{
#	define FLUXGL_ARB_vertex_attrib_binding 1
//	GL::VERTEX_ATTRIB_BINDING already defined in 4.3_core
//	GL::VERTEX_ATTRIB_RELATIVE_OFFSET already defined in 4.3_core
//	GL::VERTEX_BINDING_DIVISOR already defined in 4.3_core
//	GL::VERTEX_BINDING_OFFSET already defined in 4.3_core
//	GL::VERTEX_BINDING_STRIDE already defined in 4.3_core
//	GL::MAX_VERTEX_ATTRIB_RELATIVE_OFFSET already defined in 4.3_core
//	GL::MAX_VERTEX_ATTRIB_BINDINGS already defined in 4.3_core
};
//- end: ARB_vertex_attrib_binding

//-//-- 
//- Ext: ARB_vertex_blend
enum GLext_ARB_vertex_blend
{
#	define FLUXGL_ARB_vertex_blend 1
	MODELVIEW0_ARB = 0x1700u,
	MODELVIEW1_ARB = 0x850Au,
	MAX_VERTEX_UNITS_ARB = 0x86A4u,
	ACTIVE_VERTEX_UNITS_ARB = 0x86A5u,
	WEIGHT_SUM_UNITY_ARB = 0x86A6u,
	VERTEX_BLEND_ARB = 0x86A7u,
	CURRENT_WEIGHT_ARB = 0x86A8u,
	WEIGHT_ARRAY_TYPE_ARB = 0x86A9u,
	WEIGHT_ARRAY_STRIDE_ARB = 0x86AAu,
	WEIGHT_ARRAY_SIZE_ARB = 0x86ABu,
	WEIGHT_ARRAY_POINTER_ARB = 0x86ACu,
	WEIGHT_ARRAY_ARB = 0x86ADu,
	MODELVIEW2_ARB = 0x8722u,
	MODELVIEW3_ARB = 0x8723u,
	MODELVIEW4_ARB = 0x8724u,
	MODELVIEW5_ARB = 0x8725u,
	MODELVIEW6_ARB = 0x8726u,
	MODELVIEW7_ARB = 0x8727u,
	MODELVIEW8_ARB = 0x8728u,
	MODELVIEW9_ARB = 0x8729u,
	MODELVIEW10_ARB = 0x872Au,
	MODELVIEW11_ARB = 0x872Bu,
	MODELVIEW12_ARB = 0x872Cu,
	MODELVIEW13_ARB = 0x872Du,
	MODELVIEW14_ARB = 0x872Eu,
	MODELVIEW15_ARB = 0x872Fu,
	MODELVIEW16_ARB = 0x8730u,
	MODELVIEW17_ARB = 0x8731u,
	MODELVIEW18_ARB = 0x8732u,
	MODELVIEW19_ARB = 0x8733u,
	MODELVIEW20_ARB = 0x8734u,
	MODELVIEW21_ARB = 0x8735u,
	MODELVIEW22_ARB = 0x8736u,
	MODELVIEW23_ARB = 0x8737u,
	MODELVIEW24_ARB = 0x8738u,
	MODELVIEW25_ARB = 0x8739u,
	MODELVIEW26_ARB = 0x873Au,
	MODELVIEW27_ARB = 0x873Bu,
	MODELVIEW28_ARB = 0x873Cu,
	MODELVIEW29_ARB = 0x873Du,
	MODELVIEW30_ARB = 0x873Eu,
	MODELVIEW31_ARB = 0x873Fu,
};
//- end: ARB_vertex_blend

//-//-- 
//- Ext: ARB_vertex_buffer_object
enum GLext_ARB_vertex_buffer_object
{
#	define FLUXGL_ARB_vertex_buffer_object 1
	BUFFER_SIZE_ARB = 0x8764u,
	BUFFER_USAGE_ARB = 0x8765u,
	ARRAY_BUFFER_ARB = 0x8892u,
	ELEMENT_ARRAY_BUFFER_ARB = 0x8893u,
	ARRAY_BUFFER_BINDING_ARB = 0x8894u,
	ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895u,
	VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896u,
	NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897u,
	COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898u,
	INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899u,
	TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889Au,
	EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889Bu,
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889Cu,
	FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889Du,
	WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889Eu,
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889Fu,
	READ_ONLY_ARB = 0x88B8u,
	WRITE_ONLY_ARB = 0x88B9u,
	READ_WRITE_ARB = 0x88BAu,
	BUFFER_ACCESS_ARB = 0x88BBu,
	BUFFER_MAPPED_ARB = 0x88BCu,
	BUFFER_MAP_POINTER_ARB = 0x88BDu,
	STREAM_DRAW_ARB = 0x88E0u,
	STREAM_READ_ARB = 0x88E1u,
	STREAM_COPY_ARB = 0x88E2u,
	STATIC_DRAW_ARB = 0x88E4u,
	STATIC_READ_ARB = 0x88E5u,
	STATIC_COPY_ARB = 0x88E6u,
	DYNAMIC_DRAW_ARB = 0x88E8u,
	DYNAMIC_READ_ARB = 0x88E9u,
	DYNAMIC_COPY_ARB = 0x88EAu,
};
//- end: ARB_vertex_buffer_object

//-//-- 
//- Ext: ARB_vertex_program
enum GLext_ARB_vertex_program
{
#	define FLUXGL_ARB_vertex_program 1
	COLOR_SUM_ARB = 0x8458u,
	VERTEX_PROGRAM_ARB = 0x8620u,
	VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622u,
	VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623u,
	VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624u,
	VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625u,
	CURRENT_VERTEX_ATTRIB_ARB = 0x8626u,
//	GL::PROGRAM_LENGTH_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_STRING_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_MATRICES_ARB already defined in ARB_fragment_program
//	GL::CURRENT_MATRIX_STACK_DEPTH_ARB already defined in ARB_fragment_program
//	GL::CURRENT_MATRIX_ARB already defined in ARB_fragment_program
	VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642u,
	VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643u,
	VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645u,
//	GL::PROGRAM_ERROR_POSITION_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_BINDING_ARB already defined in ARB_fragment_program
	MAX_VERTEX_ATTRIBS_ARB = 0x8869u,
	VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886Au,
//	GL::PROGRAM_ERROR_STRING_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_FORMAT_ASCII_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_FORMAT_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_INSTRUCTIONS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_INSTRUCTIONS_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_NATIVE_INSTRUCTIONS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_TEMPORARIES_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_TEMPORARIES_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_NATIVE_TEMPORARIES_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_NATIVE_TEMPORARIES_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_PARAMETERS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_PARAMETERS_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_NATIVE_PARAMETERS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_NATIVE_PARAMETERS_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_ATTRIBS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_ATTRIBS_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_NATIVE_ATTRIBS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_NATIVE_ATTRIBS_ARB already defined in ARB_fragment_program
	PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0u,
	MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1u,
	PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2u,
	MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3u,
//	GL::MAX_PROGRAM_LOCAL_PARAMETERS_ARB already defined in ARB_fragment_program
//	GL::MAX_PROGRAM_ENV_PARAMETERS_ARB already defined in ARB_fragment_program
//	GL::PROGRAM_UNDER_NATIVE_LIMITS_ARB already defined in ARB_fragment_program
//	GL::TRANSPOSE_CURRENT_MATRIX_ARB already defined in ARB_fragment_program
//	GL::MATRIX0_ARB already defined in ARB_fragment_program
//	GL::MATRIX1_ARB already defined in ARB_fragment_program
//	GL::MATRIX2_ARB already defined in ARB_fragment_program
//	GL::MATRIX3_ARB already defined in ARB_fragment_program
//	GL::MATRIX4_ARB already defined in ARB_fragment_program
//	GL::MATRIX5_ARB already defined in ARB_fragment_program
//	GL::MATRIX6_ARB already defined in ARB_fragment_program
//	GL::MATRIX7_ARB already defined in ARB_fragment_program
//	GL::MATRIX8_ARB already defined in ARB_fragment_program
//	GL::MATRIX9_ARB already defined in ARB_fragment_program
//	GL::MATRIX10_ARB already defined in ARB_fragment_program
//	GL::MATRIX11_ARB already defined in ARB_fragment_program
//	GL::MATRIX12_ARB already defined in ARB_fragment_program
//	GL::MATRIX13_ARB already defined in ARB_fragment_program
//	GL::MATRIX14_ARB already defined in ARB_fragment_program
//	GL::MATRIX15_ARB already defined in ARB_fragment_program
//	GL::MATRIX16_ARB already defined in ARB_fragment_program
//	GL::MATRIX17_ARB already defined in ARB_fragment_program
//	GL::MATRIX18_ARB already defined in ARB_fragment_program
//	GL::MATRIX19_ARB already defined in ARB_fragment_program
//	GL::MATRIX20_ARB already defined in ARB_fragment_program
//	GL::MATRIX21_ARB already defined in ARB_fragment_program
//	GL::MATRIX22_ARB already defined in ARB_fragment_program
//	GL::MATRIX23_ARB already defined in ARB_fragment_program
//	GL::MATRIX24_ARB already defined in ARB_fragment_program
//	GL::MATRIX25_ARB already defined in ARB_fragment_program
//	GL::MATRIX26_ARB already defined in ARB_fragment_program
//	GL::MATRIX27_ARB already defined in ARB_fragment_program
//	GL::MATRIX28_ARB already defined in ARB_fragment_program
//	GL::MATRIX29_ARB already defined in ARB_fragment_program
//	GL::MATRIX30_ARB already defined in ARB_fragment_program
//	GL::MATRIX31_ARB already defined in ARB_fragment_program
};
//- end: ARB_vertex_program

//-//-- 
//- Ext: ARB_vertex_shader
enum GLext_ARB_vertex_shader
{
#	define FLUXGL_ARB_vertex_shader 1
//	GL::FLOAT already defined in 1.1_core
//	GL::VERTEX_ATTRIB_ARRAY_ENABLED_ARB already defined in ARB_vertex_program
//	GL::VERTEX_ATTRIB_ARRAY_SIZE_ARB already defined in ARB_vertex_program
//	GL::VERTEX_ATTRIB_ARRAY_STRIDE_ARB already defined in ARB_vertex_program
//	GL::VERTEX_ATTRIB_ARRAY_TYPE_ARB already defined in ARB_vertex_program
//	GL::CURRENT_VERTEX_ATTRIB_ARB already defined in ARB_vertex_program
//	GL::VERTEX_PROGRAM_POINT_SIZE_ARB already defined in ARB_vertex_program
//	GL::VERTEX_PROGRAM_TWO_SIDE_ARB already defined in ARB_vertex_program
//	GL::VERTEX_ATTRIB_ARRAY_POINTER_ARB already defined in ARB_vertex_program
//	GL::MAX_VERTEX_ATTRIBS_ARB already defined in ARB_vertex_program
//	GL::VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB already defined in ARB_vertex_program
//	GL::MAX_TEXTURE_COORDS_ARB already defined in ARB_fragment_program
//	GL::MAX_TEXTURE_IMAGE_UNITS_ARB already defined in ARB_fragment_program
	VERTEX_SHADER_ARB = 0x8B31u,
	MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4Au,
	MAX_VARYING_FLOATS_ARB = 0x8B4Bu,
	GLMAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4Cu,
	MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4Du,
//	GL::FLOAT_VEC2_ARB already defined in ARB_shader_objects
//	GL::FLOAT_VEC3_ARB already defined in ARB_shader_objects
//	GL::FLOAT_VEC4_ARB already defined in ARB_shader_objects
//	GL::FLOAT_MAT2_ARB already defined in ARB_shader_objects
//	GL::FLOAT_MAT3_ARB already defined in ARB_shader_objects
//	GL::FLOAT_MAT4_ARB already defined in ARB_shader_objects
	OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89u,
	OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8Au,
};
//- end: ARB_vertex_shader

//-//-- 
//- Ext: ARB_vertex_type_10f_11f_11f_rev
enum GLext_ARB_vertex_type_10f_11f_11f_rev
{
#	define FLUXGL_ARB_vertex_type_10f_11f_11f_rev 1
//	GL::UNSIGNED_INT_10F_11F_11F_REV already defined in 3.0_core
};
//- end: ARB_vertex_type_10f_11f_11f_rev

//-//-- 
//- Ext: ARB_vertex_type_2_10_10_10_rev
enum GLext_ARB_vertex_type_2_10_10_10_rev
{
#	define FLUXGL_ARB_vertex_type_2_10_10_10_rev 1
//	GL::UNSIGNED_INT_2_10_10_10_REV already defined in 1.2_core
//	GL::INT_2_10_10_10_REV already defined in 3.3_core
};
//- end: ARB_vertex_type_2_10_10_10_rev

//-//-- 
//- Ext: ARB_viewport_array
enum GLext_ARB_viewport_array
{
#	define FLUXGL_ARB_viewport_array 1
//	GL::DEPTH_RANGE already defined in 1.1_core
//	GL::VIEWPORT already defined in 1.1_core
//	GL::SCISSOR_BOX already defined in 1.1_core
//	GL::SCISSOR_TEST already defined in 1.1_core
//	GL::MAX_VIEWPORTS already defined in 4.1_core
//	GL::VIEWPORT_SUBPIXEL_BITS already defined in 4.1_core
//	GL::VIEWPORT_BOUNDS_RANGE already defined in 4.1_core
//	GL::LAYER_PROVOKING_VERTEX already defined in 4.1_core
//	GL::VIEWPORT_INDEX_PROVOKING_VERTEX already defined in 4.1_core
//	GL::UNDEFINED_VERTEX already defined in 4.1_core
//	GL::FIRST_VERTEX_CONVENTION already defined in 3.2_core
//	GL::LAST_VERTEX_CONVENTION already defined in 3.2_core
//	GL::PROVOKING_VERTEX already defined in 3.2_core
};
//- end: ARB_viewport_array

//-//-- 
//- Ext: ATI_draw_buffers
enum GLext_ATI_draw_buffers
{
#	define FLUXGL_ATI_draw_buffers 1
	MAX_DRAW_BUFFERS_ATI = 0x8824u,
	DRAW_BUFFER0_ATI = 0x8825u,
	DRAW_BUFFER1_ATI = 0x8826u,
	DRAW_BUFFER2_ATI = 0x8827u,
	DRAW_BUFFER3_ATI = 0x8828u,
	DRAW_BUFFER4_ATI = 0x8829u,
	DRAW_BUFFER5_ATI = 0x882Au,
	DRAW_BUFFER6_ATI = 0x882Bu,
	DRAW_BUFFER7_ATI = 0x882Cu,
	DRAW_BUFFER8_ATI = 0x882Du,
	DRAW_BUFFER9_ATI = 0x882Eu,
	DRAW_BUFFER10_ATI = 0x882Fu,
	DRAW_BUFFER11_ATI = 0x8830u,
	DRAW_BUFFER12_ATI = 0x8831u,
	DRAW_BUFFER13_ATI = 0x8832u,
	DRAW_BUFFER14_ATI = 0x8833u,
	DRAW_BUFFER15_ATI = 0x8834u,
};
//- end: ATI_draw_buffers

//-//-- 
//- Ext: ATI_element_array
enum GLext_ATI_element_array
{
#	define FLUXGL_ATI_element_array 1
	ELEMENT_ARRAY_ATI = 0x8768u,
	ELEMENT_ARRAY_TYPE_ATI = 0x8769u,
	ELEMENT_ARRAY_POINTER_ATI = 0x876Au,
};
//- end: ATI_element_array

//-//-- 
//- Ext: ATI_envmap_bumpmap
enum GLext_ATI_envmap_bumpmap
{
#	define FLUXGL_ATI_envmap_bumpmap 1
	BUMP_ROT_MATRIX_ATI = 0x8775u,
	BUMP_ROT_MATRIX_SIZE_ATI = 0x8776u,
	BUMP_NUM_TEX_UNITS_ATI = 0x8777u,
	BUMP_TEX_UNITS_ATI = 0x8778u,
	DUDV_ATI = 0x8779u,
	DU8DV8_ATI = 0x877Au,
	BUMP_ENVMAP_ATI = 0x877Bu,
	BUMP_TARGET_ATI = 0x877Cu,
};
//- end: ATI_envmap_bumpmap

//-//-- 
//- Ext: ATI_fragment_shader
enum GLext_ATI_fragment_shader
{
#	define FLUXGL_ATI_fragment_shader 1
	GL2X_BIT_ATI = 0x00000001u,
	RED_BIT_ATI = 0x00000001u,
	COMP_BIT_ATI = 0x00000002u,
	GREEN_BIT_ATI = 0x00000002u,
	GL4X_BIT_ATI = 0x00000002u,
	NEGATE_BIT_ATI = 0x00000004u,
	BLUE_BIT_ATI = 0x00000004u,
	GL8X_BIT_ATI = 0x00000004u,
	HALF_BIT_ATI = 0x00000008u,
	BIAS_BIT_ATI = 0x00000008u,
	QUARTER_BIT_ATI = 0x00000010u,
	EIGHTH_BIT_ATI = 0x00000020u,
	SATURATE_BIT_ATI = 0x00000040u,
	FRAGMENT_SHADER_ATI = 0x8920u,
	REG_0_ATI = 0x8921u,
	REG_1_ATI = 0x8922u,
	REG_2_ATI = 0x8923u,
	REG_3_ATI = 0x8924u,
	REG_4_ATI = 0x8925u,
	REG_5_ATI = 0x8926u,
	REG_6_ATI = 0x8927u,
	REG_7_ATI = 0x8928u,
	REG_8_ATI = 0x8929u,
	REG_9_ATI = 0x892Au,
	REG_10_ATI = 0x892Bu,
	REG_11_ATI = 0x892Cu,
	REG_12_ATI = 0x892Du,
	REG_13_ATI = 0x892Eu,
	REG_14_ATI = 0x892Fu,
	REG_15_ATI = 0x8930u,
	REG_16_ATI = 0x8931u,
	REG_17_ATI = 0x8932u,
	REG_18_ATI = 0x8933u,
	REG_19_ATI = 0x8934u,
	REG_20_ATI = 0x8935u,
	REG_21_ATI = 0x8936u,
	REG_22_ATI = 0x8937u,
	REG_23_ATI = 0x8938u,
	REG_24_ATI = 0x8939u,
	REG_25_ATI = 0x893Au,
	REG_26_ATI = 0x893Bu,
	REG_27_ATI = 0x893Cu,
	REG_28_ATI = 0x893Du,
	REG_29_ATI = 0x893Eu,
	REG_30_ATI = 0x893Fu,
	REG_31_ATI = 0x8940u,
	CON_0_ATI = 0x8941u,
	CON_1_ATI = 0x8942u,
	CON_2_ATI = 0x8943u,
	CON_3_ATI = 0x8944u,
	CON_4_ATI = 0x8945u,
	CON_5_ATI = 0x8946u,
	CON_6_ATI = 0x8947u,
	CON_7_ATI = 0x8948u,
	CON_8_ATI = 0x8949u,
	CON_9_ATI = 0x894Au,
	CON_10_ATI = 0x894Bu,
	CON_11_ATI = 0x894Cu,
	CON_12_ATI = 0x894Du,
	CON_13_ATI = 0x894Eu,
	CON_14_ATI = 0x894Fu,
	CON_15_ATI = 0x8950u,
	CON_16_ATI = 0x8951u,
	CON_17_ATI = 0x8952u,
	CON_18_ATI = 0x8953u,
	CON_19_ATI = 0x8954u,
	CON_20_ATI = 0x8955u,
	CON_21_ATI = 0x8956u,
	CON_22_ATI = 0x8957u,
	CON_23_ATI = 0x8958u,
	CON_24_ATI = 0x8959u,
	CON_25_ATI = 0x895Au,
	CON_26_ATI = 0x895Bu,
	CON_27_ATI = 0x895Cu,
	CON_28_ATI = 0x895Du,
	CON_29_ATI = 0x895Eu,
	CON_30_ATI = 0x895Fu,
	CON_31_ATI = 0x8960u,
	MOV_ATI = 0x8961u,
	ADD_ATI = 0x8963u,
	MUL_ATI = 0x8964u,
	SUB_ATI = 0x8965u,
	DOT3_ATI = 0x8966u,
	DOT4_ATI = 0x8967u,
	MAD_ATI = 0x8968u,
	LERP_ATI = 0x8969u,
	CND_ATI = 0x896Au,
	CND0_ATI = 0x896Bu,
	DOT2_ADD_ATI = 0x896Cu,
	SECONDARY_INTERPOLATOR_ATI = 0x896Du,
	NUM_FRAGMENT_REGISTERS_ATI = 0x896Eu,
	NUM_FRAGMENT_CONSTANTS_ATI = 0x896Fu,
	NUM_PASSES_ATI = 0x8970u,
	NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971u,
	NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972u,
	NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973u,
	NUM_LOOPBACK_COMPONENTS_ATI = 0x8974u,
	COLOR_ALPHA_PAIRING_ATI = 0x8975u,
	SWIZZLE_STR_ATI = 0x8976u,
	SWIZZLE_STQ_ATI = 0x8977u,
	SWIZZLE_STR_DR_ATI = 0x8978u,
	SWIZZLE_STQ_DQ_ATI = 0x8979u,
	SWIZZLE_STRQ_ATI = 0x897Au,
	SWIZZLE_STRQ_DQ_ATI = 0x897Bu,
};
//- end: ATI_fragment_shader

//-//-- 
//- Ext: ATI_meminfo
enum GLext_ATI_meminfo
{
#	define FLUXGL_ATI_meminfo 1
	VBO_FREE_MEMORY_ATI = 0x87FBu,
	TEXTURE_FREE_MEMORY_ATI = 0x87FCu,
	RENDERBUFFER_FREE_MEMORY_ATI = 0x87FDu,
};
//- end: ATI_meminfo

//-//-- 
//- Ext: ATI_pixel_format_float
enum GLext_ATI_pixel_format_float
{
#	define FLUXGL_ATI_pixel_format_float 1
	RGBA_FLOAT_MODE_ATI = 0x8820u,
	COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835u,
};
//- end: ATI_pixel_format_float

//-//-- 
//- Ext: ATI_pn_triangles
enum GLext_ATI_pn_triangles
{
#	define FLUXGL_ATI_pn_triangles 1
	PN_TRIANGLES_ATI = 0x87F0u,
	MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1u,
	PN_TRIANGLES_POINT_MODE_ATI = 0x87F2u,
	PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3u,
	PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4u,
	PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5u,
	PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6u,
	PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7u,
	PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8u,
};
//- end: ATI_pn_triangles

//-//-- 
//- Ext: ATI_separate_stencil
enum GLext_ATI_separate_stencil
{
#	define FLUXGL_ATI_separate_stencil 1
	STENCIL_BACK_FUNC_ATI = 0x8800u,
	STENCIL_BACK_FAIL_ATI = 0x8801u,
	STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802u,
	STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803u,
};
//- end: ATI_separate_stencil

//-//-- 
//- Ext: ATI_text_fragment_shader
enum GLext_ATI_text_fragment_shader
{
#	define FLUXGL_ATI_text_fragment_shader 1
	TEXT_FRAGMENT_SHADER_ATI = 0x8200u,
};
//- end: ATI_text_fragment_shader

//-//-- 
//- Ext: ATI_texture_env_combine3
enum GLext_ATI_texture_env_combine3
{
#	define FLUXGL_ATI_texture_env_combine3 1
	MODULATE_ADD_ATI = 0x8744u,
	MODULATE_SIGNED_ADD_ATI = 0x8745u,
	MODULATE_SUBTRACT_ATI = 0x8746u,
};
//- end: ATI_texture_env_combine3

//-//-- 
//- Ext: ATI_texture_float
enum GLext_ATI_texture_float
{
#	define FLUXGL_ATI_texture_float 1
	RGBA_FLOAT32_ATI = 0x8814u,
	RGB_FLOAT32_ATI = 0x8815u,
	ALPHA_FLOAT32_ATI = 0x8816u,
	INTENSITY_FLOAT32_ATI = 0x8817u,
	LUMINANCE_FLOAT32_ATI = 0x8818u,
	LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819u,
	RGBA_FLOAT16_ATI = 0x881Au,
	RGB_FLOAT16_ATI = 0x881Bu,
	ALPHA_FLOAT16_ATI = 0x881Cu,
	INTENSITY_FLOAT16_ATI = 0x881Du,
	LUMINANCE_FLOAT16_ATI = 0x881Eu,
	LUMINANCE_ALPHA_FLOAT16_ATI = 0x881Fu,
};
//- end: ATI_texture_float

//-//-- 
//- Ext: ATI_texture_mirror_once
enum GLext_ATI_texture_mirror_once
{
#	define FLUXGL_ATI_texture_mirror_once 1
	MIRROR_CLAMP_ATI = 0x8742u,
	MIRROR_CLAMP_TO_EDGE_ATI = 0x8743u,
};
//- end: ATI_texture_mirror_once

//-//-- 
//- Ext: ATI_vertex_array_object
enum GLext_ATI_vertex_array_object
{
#	define FLUXGL_ATI_vertex_array_object 1
	STATIC_ATI = 0x8760u,
	DYNAMIC_ATI = 0x8761u,
	PRESERVE_ATI = 0x8762u,
	DISCARD_ATI = 0x8763u,
	OBJECT_BUFFER_SIZE_ATI = 0x8764u,
	OBJECT_BUFFER_USAGE_ATI = 0x8765u,
	ARRAY_OBJECT_BUFFER_ATI = 0x8766u,
	ARRAY_OBJECT_OFFSET_ATI = 0x8767u,
};
//- end: ATI_vertex_array_object

//-//-- 
//- Ext: ATI_vertex_streams
enum GLext_ATI_vertex_streams
{
#	define FLUXGL_ATI_vertex_streams 1
	MAX_VERTEX_STREAMS_ATI = 0x876Bu,
	VERTEX_STREAM0_ATI = 0x876Cu,
	VERTEX_STREAM1_ATI = 0x876Du,
	VERTEX_STREAM2_ATI = 0x876Eu,
	VERTEX_STREAM3_ATI = 0x876Fu,
	VERTEX_STREAM4_ATI = 0x8770u,
	VERTEX_STREAM5_ATI = 0x8771u,
	VERTEX_STREAM6_ATI = 0x8772u,
	VERTEX_STREAM7_ATI = 0x8773u,
	VERTEX_SOURCE_ATI = 0x8774u,
};
//- end: ATI_vertex_streams

//-//-- 
//- Ext: EXT_422_pixels
enum GLext_EXT_422_pixels
{
#	define FLUXGL_EXT_422_pixels 1
	GL422_EXT = 0x80CCu,
	GL422_REV_EXT = 0x80CDu,
	GL422_AVERAGE_EXT = 0x80CEu,
	GL422_REV_AVERAGE_EXT = 0x80CFu,
};
//- end: EXT_422_pixels

//-//-- 
//- Ext: EXT_abgr
enum GLext_EXT_abgr
{
#	define FLUXGL_EXT_abgr 1
	ABGR_EXT = 0x8000u,
};
//- end: EXT_abgr

//-//-- 
//- Ext: EXT_bgra
enum GLext_EXT_bgra
{
#	define FLUXGL_EXT_bgra 1
	BGR_EXT = 0x80E0u,
	BGRA_EXT = 0x80E1u,
};
//- end: EXT_bgra

//-//-- 
//- Ext: EXT_bindable_uniform
enum GLext_EXT_bindable_uniform
{
#	define FLUXGL_EXT_bindable_uniform 1
	MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2u,
	MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3u,
	MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4u,
	MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DEDu,
	UNIFORM_BUFFER_EXT = 0x8DEEu,
	UNIFORM_BUFFER_BINDING_EXT = 0x8DEFu,
};
//- end: EXT_bindable_uniform

//-//-- 
//- Ext: EXT_blend_color
enum GLext_EXT_blend_color
{
#	define FLUXGL_EXT_blend_color 1
	CONSTANT_COLOR_EXT = 0x8001u,
	ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002u,
	CONSTANT_ALPHA_EXT = 0x8003u,
	ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004u,
	BLEND_COLOR_EXT = 0x8005u,
};
//- end: EXT_blend_color

//-//-- 
//- Ext: EXT_blend_equation_separate
enum GLext_EXT_blend_equation_separate
{
#	define FLUXGL_EXT_blend_equation_separate 1
	BLEND_EQUATION_RGB_EXT = 0x8009u,
	BLEND_EQUATION_ALPHA_EXT = 0x883Du,
};
//- end: EXT_blend_equation_separate

//-//-- 
//- Ext: EXT_blend_func_separate
enum GLext_EXT_blend_func_separate
{
#	define FLUXGL_EXT_blend_func_separate 1
	BLEND_DST_RGB_EXT = 0x80C8u,
	BLEND_SRC_RGB_EXT = 0x80C9u,
	BLEND_DST_ALPHA_EXT = 0x80CAu,
	BLEND_SRC_ALPHA_EXT = 0x80CBu,
};
//- end: EXT_blend_func_separate

//-//-- 
//- Ext: EXT_blend_minmax
enum GLext_EXT_blend_minmax
{
#	define FLUXGL_EXT_blend_minmax 1
	FUNC_ADD_EXT = 0x8006u,
	MIN_EXT = 0x8007u,
	MAX_EXT = 0x8008u,
	BLEND_EQUATION_EXT = 0x8009u,
};
//- end: EXT_blend_minmax

//-//-- 
//- Ext: EXT_blend_subtract
enum GLext_EXT_blend_subtract
{
#	define FLUXGL_EXT_blend_subtract 1
	FUNC_SUBTRACT_EXT = 0x800Au,
	FUNC_REVERSE_SUBTRACT_EXT = 0x800Bu,
};
//- end: EXT_blend_subtract

//-//-- 
//- Ext: EXT_clip_volume_hint
enum GLext_EXT_clip_volume_hint
{
#	define FLUXGL_EXT_clip_volume_hint 1
	CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0u,
};
//- end: EXT_clip_volume_hint

//-//-- 
//- Ext: EXT_cmyka
enum GLext_EXT_cmyka
{
#	define FLUXGL_EXT_cmyka 1
	CMYK_EXT = 0x800Cu,
	CMYKA_EXT = 0x800Du,
	PACK_CMYK_HINT_EXT = 0x800Eu,
	UNPACK_CMYK_HINT_EXT = 0x800Fu,
};
//- end: EXT_cmyka

//-//-- 
//- Ext: EXT_compiled_vertex_array
enum GLext_EXT_compiled_vertex_array
{
#	define FLUXGL_EXT_compiled_vertex_array 1
	ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8u,
	ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9u,
};
//- end: EXT_compiled_vertex_array

//-//-- 
//- Ext: EXT_convolution
enum GLext_EXT_convolution
{
#	define FLUXGL_EXT_convolution 1
	CONVOLUTION_1D_EXT = 0x8010u,
	CONVOLUTION_2D_EXT = 0x8011u,
	SEPARABLE_2D_EXT = 0x8012u,
	CONVOLUTION_BORDER_MODE_EXT = 0x8013u,
	CONVOLUTION_FILTER_SCALE_EXT = 0x8014u,
	CONVOLUTION_FILTER_BIAS_EXT = 0x8015u,
	REDUCE_EXT = 0x8016u,
	CONVOLUTION_FORMAT_EXT = 0x8017u,
	CONVOLUTION_WIDTH_EXT = 0x8018u,
	CONVOLUTION_HEIGHT_EXT = 0x8019u,
	MAX_CONVOLUTION_WIDTH_EXT = 0x801Au,
	MAX_CONVOLUTION_HEIGHT_EXT = 0x801Bu,
	POST_CONVOLUTION_RED_SCALE_EXT = 0x801Cu,
	POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801Du,
	POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801Eu,
	POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801Fu,
	POST_CONVOLUTION_RED_BIAS_EXT = 0x8020u,
	POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021u,
	POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022u,
	POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023u,
};
//- end: EXT_convolution

//-//-- 
//- Ext: EXT_coordinate_frame
enum GLext_EXT_coordinate_frame
{
#	define FLUXGL_EXT_coordinate_frame 1
	TANGENT_ARRAY_EXT = 0x8439u,
	BINORMAL_ARRAY_EXT = 0x843Au,
	CURRENT_TANGENT_EXT = 0x843Bu,
	CURRENT_BINORMAL_EXT = 0x843Cu,
	TANGENT_ARRAY_TYPE_EXT = 0x843Eu,
	TANGENT_ARRAY_STRIDE_EXT = 0x843Fu,
	BINORMAL_ARRAY_TYPE_EXT = 0x8440u,
	BINORMAL_ARRAY_STRIDE_EXT = 0x8441u,
	TANGENT_ARRAY_POINTER_EXT = 0x8442u,
	BINORMAL_ARRAY_POINTER_EXT = 0x8443u,
	MAP1_TANGENT_EXT = 0x8444u,
	MAP2_TANGENT_EXT = 0x8445u,
	MAP1_BINORMAL_EXT = 0x8446u,
	MAP2_BINORMAL_EXT = 0x8447u,
};
//- end: EXT_coordinate_frame

//-//-- 
//- Ext: EXT_cull_vertex
enum GLext_EXT_cull_vertex
{
#	define FLUXGL_EXT_cull_vertex 1
	CULL_VERTEX_EXT = 0x81AAu,
	CULL_VERTEX_EYE_POSITION_EXT = 0x81ABu,
	CULL_VERTEX_OBJECT_POSITION_EXT = 0x81ACu,
};
//- end: EXT_cull_vertex

//-//-- 
//- Ext: EXT_debug_label
enum GLext_EXT_debug_label
{
#	define FLUXGL_EXT_debug_label 1
//	GL::SAMPLER already defined in 4.3_core
	PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4Fu,
	PROGRAM_OBJECT_EXT = 0x8B40u,
	SHADER_OBJECT_EXT = 0x8B48u,
//	GL::TRANSFORM_FEEDBACK already defined in 4.0_core
	BUFFER_OBJECT_EXT = 0x9151u,
	QUERY_OBJECT_EXT = 0x9153u,
	VERTEX_ARRAY_OBJECT_EXT = 0x9154u,
};
//- end: EXT_debug_label

//-//-- 
//- Ext: EXT_depth_bounds_test
enum GLext_EXT_depth_bounds_test
{
#	define FLUXGL_EXT_depth_bounds_test 1
	DEPTH_BOUNDS_TEST_EXT = 0x8890u,
	DEPTH_BOUNDS_EXT = 0x8891u,
};
//- end: EXT_depth_bounds_test

//-//-- 
//- Ext: EXT_direct_state_access
enum GLext_EXT_direct_state_access
{
#	define FLUXGL_EXT_direct_state_access 1
	PROGRAM_MATRIX_EXT = 0x8E2Du,
	TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2Eu,
	PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2Fu,
};
//- end: EXT_direct_state_access

//-//-- 
//- Ext: EXT_draw_range_elements
enum GLext_EXT_draw_range_elements
{
#	define FLUXGL_EXT_draw_range_elements 1
	MAX_ELEMENTS_VERTICES_EXT = 0x80E8u,
	MAX_ELEMENTS_INDICES_EXT = 0x80E9u,
};
//- end: EXT_draw_range_elements

//-//-- 
//- Ext: EXT_fog_coord
enum GLext_EXT_fog_coord
{
#	define FLUXGL_EXT_fog_coord 1
	FOG_COORDINATE_SOURCE_EXT = 0x8450u,
	FOG_COORDINATE_EXT = 0x8451u,
	FRAGMENT_DEPTH_EXT = 0x8452u,
	CURRENT_FOG_COORDINATE_EXT = 0x8453u,
	FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454u,
	FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455u,
	FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456u,
	FOG_COORDINATE_ARRAY_EXT = 0x8457u,
};
//- end: EXT_fog_coord

//-//-- 
//- Ext: EXT_framebuffer_blit
enum GLext_EXT_framebuffer_blit
{
#	define FLUXGL_EXT_framebuffer_blit 1
	DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6u,
	READ_FRAMEBUFFER_EXT = 0x8CA8u,
	DRAW_FRAMEBUFFER_EXT = 0x8CA9u,
	READ_FRAMEBUFFER_BINDING_EXT = 0x8CAAu,
};
//- end: EXT_framebuffer_blit

//-//-- 
//- Ext: EXT_framebuffer_multisample
enum GLext_EXT_framebuffer_multisample
{
#	define FLUXGL_EXT_framebuffer_multisample 1
	RENDERBUFFER_SAMPLES_EXT = 0x8CABu,
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56u,
	MAX_SAMPLES_EXT = 0x8D57u,
};
//- end: EXT_framebuffer_multisample

//-//-- 
//- Ext: EXT_framebuffer_multisample_blit_scaled
enum GLext_EXT_framebuffer_multisample_blit_scaled
{
#	define FLUXGL_EXT_framebuffer_multisample_blit_scaled 1
	SCALED_RESOLVE_FASTEST_EXT = 0x90BAu,
	SCALED_RESOLVE_NICEST_EXT = 0x90BBu,
};
//- end: EXT_framebuffer_multisample_blit_scaled

//-//-- 
//- Ext: EXT_framebuffer_object
enum GLext_EXT_framebuffer_object
{
#	define FLUXGL_EXT_framebuffer_object 1
	INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506u,
	MAX_RENDERBUFFER_SIZE_EXT = 0x84E8u,
	FRAMEBUFFER_BINDING_EXT = 0x8CA6u,
	RENDERBUFFER_BINDING_EXT = 0x8CA7u,
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0u,
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4u,
	FRAMEBUFFER_COMPLETE_EXT = 0x8CD5u,
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6u,
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7u,
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9u,
	FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDAu,
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDBu,
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDCu,
	FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDDu,
	MAX_COLOR_ATTACHMENTS_EXT = 0x8CDFu,
	COLOR_ATTACHMENT0_EXT = 0x8CE0u,
	COLOR_ATTACHMENT1_EXT = 0x8CE1u,
	COLOR_ATTACHMENT2_EXT = 0x8CE2u,
	COLOR_ATTACHMENT3_EXT = 0x8CE3u,
	COLOR_ATTACHMENT4_EXT = 0x8CE4u,
	COLOR_ATTACHMENT5_EXT = 0x8CE5u,
	COLOR_ATTACHMENT6_EXT = 0x8CE6u,
	COLOR_ATTACHMENT7_EXT = 0x8CE7u,
	COLOR_ATTACHMENT8_EXT = 0x8CE8u,
	COLOR_ATTACHMENT9_EXT = 0x8CE9u,
	COLOR_ATTACHMENT10_EXT = 0x8CEAu,
	COLOR_ATTACHMENT11_EXT = 0x8CEBu,
	COLOR_ATTACHMENT12_EXT = 0x8CECu,
	COLOR_ATTACHMENT13_EXT = 0x8CEDu,
	COLOR_ATTACHMENT14_EXT = 0x8CEEu,
	COLOR_ATTACHMENT15_EXT = 0x8CEFu,
	DEPTH_ATTACHMENT_EXT = 0x8D00u,
	STENCIL_ATTACHMENT_EXT = 0x8D20u,
	FRAMEBUFFER_EXT = 0x8D40u,
	RENDERBUFFER_EXT = 0x8D41u,
	RENDERBUFFER_WIDTH_EXT = 0x8D42u,
	RENDERBUFFER_HEIGHT_EXT = 0x8D43u,
	RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44u,
	STENCIL_INDEX1_EXT = 0x8D46u,
	STENCIL_INDEX4_EXT = 0x8D47u,
	STENCIL_INDEX8_EXT = 0x8D48u,
	STENCIL_INDEX16_EXT = 0x8D49u,
	RENDERBUFFER_RED_SIZE_EXT = 0x8D50u,
	RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51u,
	RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52u,
	RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53u,
	RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54u,
	RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55u,
};
//- end: EXT_framebuffer_object

//-//-- 
//- Ext: EXT_framebuffer_sRGB
enum GLext_EXT_framebuffer_sRGB
{
#	define FLUXGL_EXT_framebuffer_sRGB 1
	FRAMEBUFFER_SRGB_EXT = 0x8DB9u,
	FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBAu,
};
//- end: EXT_framebuffer_sRGB

//-//-- 
//- Ext: EXT_geometry_shader4
enum GLext_EXT_geometry_shader4
{
#	define FLUXGL_EXT_geometry_shader4 1
	LINES_ADJACENCY_EXT = 0x000Au,
	LINE_STRIP_ADJACENCY_EXT = 0x000Bu,
	TRIANGLES_ADJACENCY_EXT = 0x000Cu,
	TRIANGLE_STRIP_ADJACENCY_EXT = 0x000Du,
	PROGRAM_POINT_SIZE_EXT = 0x8642u,
	MAX_VARYING_COMPONENTS_EXT = 0x8B4Bu,
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4u,
	FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7u,
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8u,
	FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9u,
	GEOMETRY_SHADER_EXT = 0x8DD9u,
	GEOMETRY_VERTICES_OUT_EXT = 0x8DDAu,
	GEOMETRY_INPUT_TYPE_EXT = 0x8DDBu,
	GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDCu,
	MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDDu,
	MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDEu,
	MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDFu,
	MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0u,
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1u,
};
//- end: EXT_geometry_shader4

//-//-- 
//- Ext: EXT_gpu_shader4
enum GLext_EXT_gpu_shader4
{
#	define FLUXGL_EXT_gpu_shader4 1
	VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FDu,
	MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904u,
	MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905u,
	SAMPLER_1D_ARRAY_EXT = 0x8DC0u,
	SAMPLER_2D_ARRAY_EXT = 0x8DC1u,
	SAMPLER_BUFFER_EXT = 0x8DC2u,
	SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3u,
	SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4u,
	SAMPLER_CUBE_SHADOW_EXT = 0x8DC5u,
	UNSIGNED_INT_VEC2_EXT = 0x8DC6u,
	UNSIGNED_INT_VEC3_EXT = 0x8DC7u,
	UNSIGNED_INT_VEC4_EXT = 0x8DC8u,
	INT_SAMPLER_1D_EXT = 0x8DC9u,
	INT_SAMPLER_2D_EXT = 0x8DCAu,
	INT_SAMPLER_3D_EXT = 0x8DCBu,
	INT_SAMPLER_CUBE_EXT = 0x8DCCu,
	INT_SAMPLER_2D_RECT_EXT = 0x8DCDu,
	INT_SAMPLER_1D_ARRAY_EXT = 0x8DCEu,
	INT_SAMPLER_2D_ARRAY_EXT = 0x8DCFu,
	INT_SAMPLER_BUFFER_EXT = 0x8DD0u,
	UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1u,
	UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2u,
	UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3u,
	UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4u,
	UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5u,
	UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6u,
	UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7u,
	UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8u,
};
//- end: EXT_gpu_shader4

//-//-- 
//- Ext: EXT_histogram
enum GLext_EXT_histogram
{
#	define FLUXGL_EXT_histogram 1
	HISTOGRAM_EXT = 0x8024u,
	PROXY_HISTOGRAM_EXT = 0x8025u,
	HISTOGRAM_WIDTH_EXT = 0x8026u,
	HISTOGRAM_FORMAT_EXT = 0x8027u,
	HISTOGRAM_RED_SIZE_EXT = 0x8028u,
	HISTOGRAM_GREEN_SIZE_EXT = 0x8029u,
	HISTOGRAM_BLUE_SIZE_EXT = 0x802Au,
	HISTOGRAM_ALPHA_SIZE_EXT = 0x802Bu,
	HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802Cu,
	HISTOGRAM_SINK_EXT = 0x802Du,
	MINMAX_EXT = 0x802Eu,
	MINMAX_FORMAT_EXT = 0x802Fu,
	MINMAX_SINK_EXT = 0x8030u,
	TABLE_TOO_LARGE_EXT = 0x8031u,
};
//- end: EXT_histogram

//-//-- 
//- Ext: EXT_index_array_formats
enum GLext_EXT_index_array_formats
{
#	define FLUXGL_EXT_index_array_formats 1
	IUI_V2F_EXT = 0x81ADu,
	IUI_V3F_EXT = 0x81AEu,
	IUI_N3F_V2F_EXT = 0x81AFu,
	IUI_N3F_V3F_EXT = 0x81B0u,
	T2F_IUI_V2F_EXT = 0x81B1u,
	T2F_IUI_V3F_EXT = 0x81B2u,
	T2F_IUI_N3F_V2F_EXT = 0x81B3u,
	T2F_IUI_N3F_V3F_EXT = 0x81B4u,
};
//- end: EXT_index_array_formats

//-//-- 
//- Ext: EXT_index_func
enum GLext_EXT_index_func
{
#	define FLUXGL_EXT_index_func 1
	INDEX_TEST_EXT = 0x81B5u,
	INDEX_TEST_FUNC_EXT = 0x81B6u,
	INDEX_TEST_REF_EXT = 0x81B7u,
};
//- end: EXT_index_func

//-//-- 
//- Ext: EXT_index_material
enum GLext_EXT_index_material
{
#	define FLUXGL_EXT_index_material 1
	INDEX_MATERIAL_EXT = 0x81B8u,
	INDEX_MATERIAL_PARAMETER_EXT = 0x81B9u,
	INDEX_MATERIAL_FACE_EXT = 0x81BAu,
};
//- end: EXT_index_material

//-//-- 
//- Ext: EXT_light_texture
enum GLext_EXT_light_texture
{
#	define FLUXGL_EXT_light_texture 1
	FRAGMENT_MATERIAL_EXT = 0x8349u,
	FRAGMENT_NORMAL_EXT = 0x834Au,
	FRAGMENT_COLOR_EXT = 0x834Cu,
	ATTENUATION_EXT = 0x834Du,
	SHADOW_ATTENUATION_EXT = 0x834Eu,
	TEXTURE_APPLICATION_MODE_EXT = 0x834Fu,
	TEXTURE_LIGHT_EXT = 0x8350u,
	TEXTURE_MATERIAL_FACE_EXT = 0x8351u,
	TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352u,
//	GL::FRAGMENT_DEPTH_EXT already defined in EXT_fog_coord
};
//- end: EXT_light_texture

//-//-- 
//- Ext: EXT_multisample
enum GLext_EXT_multisample
{
#	define FLUXGL_EXT_multisample 1
	MULTISAMPLE_BIT_EXT = 0x20000000u,
	MULTISAMPLE_EXT = 0x809Du,
	SAMPLE_ALPHA_TO_MASK_EXT = 0x809Eu,
	SAMPLE_ALPHA_TO_ONE_EXT = 0x809Fu,
	SAMPLE_MASK_EXT = 0x80A0u,
	GL1PASS_EXT = 0x80A1u,
	GL2PASS_0_EXT = 0x80A2u,
	GL2PASS_1_EXT = 0x80A3u,
	GL4PASS_0_EXT = 0x80A4u,
	GL4PASS_1_EXT = 0x80A5u,
	GL4PASS_2_EXT = 0x80A6u,
	GL4PASS_3_EXT = 0x80A7u,
	SAMPLE_BUFFERS_EXT = 0x80A8u,
	SAMPLES_EXT = 0x80A9u,
	SAMPLE_MASK_VALUE_EXT = 0x80AAu,
	SAMPLE_MASK_INVERT_EXT = 0x80ABu,
	SAMPLE_PATTERN_EXT = 0x80ACu,
};
//- end: EXT_multisample

//-//-- 
//- Ext: EXT_packed_depth_stencil
enum GLext_EXT_packed_depth_stencil
{
#	define FLUXGL_EXT_packed_depth_stencil 1
	DEPTH_STENCIL_EXT = 0x84F9u,
	UNSIGNED_INT_24_8_EXT = 0x84FAu,
	DEPTH24_STENCIL8_EXT = 0x88F0u,
	TEXTURE_STENCIL_SIZE_EXT = 0x88F1u,
};
//- end: EXT_packed_depth_stencil

//-//-- 
//- Ext: EXT_packed_float
enum GLext_EXT_packed_float
{
#	define FLUXGL_EXT_packed_float 1
	R11F_G11F_B10F_EXT = 0x8C3Au,
	UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3Bu,
	RGBA_SIGNED_COMPONENTS_EXT = 0x8C3Cu,
};
//- end: EXT_packed_float

//-//-- 
//- Ext: EXT_packed_pixels
enum GLext_EXT_packed_pixels
{
#	define FLUXGL_EXT_packed_pixels 1
	UNSIGNED_BYTE_3_3_2_EXT = 0x8032u,
	UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033u,
	UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034u,
	UNSIGNED_INT_8_8_8_8_EXT = 0x8035u,
	UNSIGNED_INT_10_10_10_2_EXT = 0x8036u,
};
//- end: EXT_packed_pixels

//-//-- 
//- Ext: EXT_paletted_texture
enum GLext_EXT_paletted_texture
{
#	define FLUXGL_EXT_paletted_texture 1
	COLOR_INDEX1_EXT = 0x80E2u,
	COLOR_INDEX2_EXT = 0x80E3u,
	COLOR_INDEX4_EXT = 0x80E4u,
	COLOR_INDEX8_EXT = 0x80E5u,
	COLOR_INDEX12_EXT = 0x80E6u,
	COLOR_INDEX16_EXT = 0x80E7u,
	TEXTURE_INDEX_SIZE_EXT = 0x80EDu,
};
//- end: EXT_paletted_texture

//-//-- 
//- Ext: EXT_pixel_buffer_object
enum GLext_EXT_pixel_buffer_object
{
#	define FLUXGL_EXT_pixel_buffer_object 1
	PIXEL_PACK_BUFFER_EXT = 0x88EBu,
	PIXEL_UNPACK_BUFFER_EXT = 0x88ECu,
	PIXEL_PACK_BUFFER_BINDING_EXT = 0x88EDu,
	PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EFu,
};
//- end: EXT_pixel_buffer_object

//-//-- 
//- Ext: EXT_pixel_transform
enum GLext_EXT_pixel_transform
{
#	define FLUXGL_EXT_pixel_transform 1
	PIXEL_TRANSFORM_2D_EXT = 0x8330u,
	PIXEL_MAG_FILTER_EXT = 0x8331u,
	PIXEL_MIN_FILTER_EXT = 0x8332u,
	PIXEL_CUBIC_WEIGHT_EXT = 0x8333u,
	CUBIC_EXT = 0x8334u,
	AVERAGE_EXT = 0x8335u,
	PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336u,
	MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337u,
	PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338u,
};
//- end: EXT_pixel_transform

//-//-- 
//- Ext: EXT_point_parameters
enum GLext_EXT_point_parameters
{
#	define FLUXGL_EXT_point_parameters 1
	POINT_SIZE_MIN_EXT = 0x8126u,
	POINT_SIZE_MAX_EXT = 0x8127u,
	POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128u,
	DISTANCE_ATTENUATION_EXT = 0x8129u,
};
//- end: EXT_point_parameters

//-//-- 
//- Ext: EXT_polygon_offset
enum GLext_EXT_polygon_offset
{
#	define FLUXGL_EXT_polygon_offset 1
	POLYGON_OFFSET_EXT = 0x8037u,
	POLYGON_OFFSET_FACTOR_EXT = 0x8038u,
	POLYGON_OFFSET_BIAS_EXT = 0x8039u,
};
//- end: EXT_polygon_offset

//-//-- 
//- Ext: EXT_polygon_offset_clamp
enum GLext_EXT_polygon_offset_clamp
{
#	define FLUXGL_EXT_polygon_offset_clamp 1
	POLYGON_OFFSET_CLAMP_EXT = 0x8E1Bu,
};
//- end: EXT_polygon_offset_clamp

//-//-- 
//- Ext: EXT_provoking_vertex
enum GLext_EXT_provoking_vertex
{
#	define FLUXGL_EXT_provoking_vertex 1
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4Cu,
	FIRST_VERTEX_CONVENTION_EXT = 0x8E4Du,
	LAST_VERTEX_CONVENTION_EXT = 0x8E4Eu,
	PROVOKING_VERTEX_EXT = 0x8E4Fu,
};
//- end: EXT_provoking_vertex

//-//-- 
//- Ext: EXT_raster_multisample
enum GLext_EXT_raster_multisample
{
#	define FLUXGL_EXT_raster_multisample 1
	RASTER_MULTISAMPLE_EXT = 0x9327u,
	RASTER_SAMPLES_EXT = 0x9328u,
	MAX_RASTER_SAMPLES_EXT = 0x9329u,
	RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932Au,
	MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932Bu,
	EFFECTIVE_RASTER_SAMPLES_EXT = 0x932Cu,
};
//- end: EXT_raster_multisample

//-//-- 
//- Ext: EXT_rescale_normal
enum GLext_EXT_rescale_normal
{
#	define FLUXGL_EXT_rescale_normal 1
	RESCALE_NORMAL_EXT = 0x803Au,
};
//- end: EXT_rescale_normal

//-//-- 
//- Ext: EXT_secondary_color
enum GLext_EXT_secondary_color
{
#	define FLUXGL_EXT_secondary_color 1
	COLOR_SUM_EXT = 0x8458u,
	CURRENT_SECONDARY_COLOR_EXT = 0x8459u,
	SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845Au,
	SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845Bu,
	SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845Cu,
	SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845Du,
	SECONDARY_COLOR_ARRAY_EXT = 0x845Eu,
};
//- end: EXT_secondary_color

//-//-- 
//- Ext: EXT_separate_shader_objects
enum GLext_EXT_separate_shader_objects
{
#	define FLUXGL_EXT_separate_shader_objects 1
	ACTIVE_PROGRAM_EXT = 0x8B8Du,
};
//- end: EXT_separate_shader_objects

//-//-- 
//- Ext: EXT_separate_specular_color
enum GLext_EXT_separate_specular_color
{
#	define FLUXGL_EXT_separate_specular_color 1
	LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8u,
	SINGLE_COLOR_EXT = 0x81F9u,
	SEPARATE_SPECULAR_COLOR_EXT = 0x81FAu,
};
//- end: EXT_separate_specular_color

//-//-- 
//- Ext: EXT_shader_image_load_store
enum GLext_EXT_shader_image_load_store
{
#	define FLUXGL_EXT_shader_image_load_store 1
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001u,
	ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002u,
	UNIFORM_BARRIER_BIT_EXT = 0x00000004u,
	TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008u,
	SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020u,
	COMMAND_BARRIER_BIT_EXT = 0x00000040u,
	PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080u,
	TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100u,
	BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200u,
	FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400u,
	TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800u,
	ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000u,
	MAX_IMAGE_UNITS_EXT = 0x8F38u,
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39u,
	IMAGE_BINDING_NAME_EXT = 0x8F3Au,
	IMAGE_BINDING_LEVEL_EXT = 0x8F3Bu,
	IMAGE_BINDING_LAYERED_EXT = 0x8F3Cu,
	IMAGE_BINDING_LAYER_EXT = 0x8F3Du,
	IMAGE_BINDING_ACCESS_EXT = 0x8F3Eu,
	IMAGE_1D_EXT = 0x904Cu,
	IMAGE_2D_EXT = 0x904Du,
	IMAGE_3D_EXT = 0x904Eu,
	IMAGE_2D_RECT_EXT = 0x904Fu,
	IMAGE_CUBE_EXT = 0x9050u,
	IMAGE_BUFFER_EXT = 0x9051u,
	IMAGE_1D_ARRAY_EXT = 0x9052u,
	IMAGE_2D_ARRAY_EXT = 0x9053u,
	IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054u,
	IMAGE_2D_MULTISAMPLE_EXT = 0x9055u,
	IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056u,
	INT_IMAGE_1D_EXT = 0x9057u,
	INT_IMAGE_2D_EXT = 0x9058u,
	INT_IMAGE_3D_EXT = 0x9059u,
	INT_IMAGE_2D_RECT_EXT = 0x905Au,
	INT_IMAGE_CUBE_EXT = 0x905Bu,
	INT_IMAGE_BUFFER_EXT = 0x905Cu,
	INT_IMAGE_1D_ARRAY_EXT = 0x905Du,
	INT_IMAGE_2D_ARRAY_EXT = 0x905Eu,
	INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905Fu,
	INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060u,
	INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061u,
	UNSIGNED_INT_IMAGE_1D_EXT = 0x9062u,
	UNSIGNED_INT_IMAGE_2D_EXT = 0x9063u,
	UNSIGNED_INT_IMAGE_3D_EXT = 0x9064u,
	UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065u,
	UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066u,
	UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067u,
	UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068u,
	UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069u,
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906Au,
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906Bu,
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906Cu,
	MAX_IMAGE_SAMPLES_EXT = 0x906Du,
	IMAGE_BINDING_FORMAT_EXT = 0x906Eu,
	ALL_BARRIER_BITS_EXT = 0xFFFFFFFFu,
};
//- end: EXT_shader_image_load_store

//-//-- 
//- Ext: EXT_shared_texture_palette
enum GLext_EXT_shared_texture_palette
{
#	define FLUXGL_EXT_shared_texture_palette 1
	SHARED_TEXTURE_PALETTE_EXT = 0x81FBu,
};
//- end: EXT_shared_texture_palette

//-//-- 
//- Ext: EXT_stencil_clear_tag
enum GLext_EXT_stencil_clear_tag
{
#	define FLUXGL_EXT_stencil_clear_tag 1
	STENCIL_TAG_BITS_EXT = 0x88F2u,
	STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3u,
};
//- end: EXT_stencil_clear_tag

//-//-- 
//- Ext: EXT_stencil_two_side
enum GLext_EXT_stencil_two_side
{
#	define FLUXGL_EXT_stencil_two_side 1
	STENCIL_TEST_TWO_SIDE_EXT = 0x8910u,
	ACTIVE_STENCIL_FACE_EXT = 0x8911u,
};
//- end: EXT_stencil_two_side

//-//-- 
//- Ext: EXT_stencil_wrap
enum GLext_EXT_stencil_wrap
{
#	define FLUXGL_EXT_stencil_wrap 1
	INCR_WRAP_EXT = 0x8507u,
	DECR_WRAP_EXT = 0x8508u,
};
//- end: EXT_stencil_wrap

//-//-- 
//- Ext: EXT_texture
enum GLext_EXT_texture
{
#	define FLUXGL_EXT_texture 1
	ALPHA4_EXT = 0x803Bu,
	ALPHA8_EXT = 0x803Cu,
	ALPHA12_EXT = 0x803Du,
	ALPHA16_EXT = 0x803Eu,
	LUMINANCE4_EXT = 0x803Fu,
	LUMINANCE8_EXT = 0x8040u,
	LUMINANCE12_EXT = 0x8041u,
	LUMINANCE16_EXT = 0x8042u,
	LUMINANCE4_ALPHA4_EXT = 0x8043u,
	LUMINANCE6_ALPHA2_EXT = 0x8044u,
	LUMINANCE8_ALPHA8_EXT = 0x8045u,
	LUMINANCE12_ALPHA4_EXT = 0x8046u,
	LUMINANCE12_ALPHA12_EXT = 0x8047u,
	LUMINANCE16_ALPHA16_EXT = 0x8048u,
	INTENSITY_EXT = 0x8049u,
	INTENSITY4_EXT = 0x804Au,
	INTENSITY8_EXT = 0x804Bu,
	INTENSITY12_EXT = 0x804Cu,
	INTENSITY16_EXT = 0x804Du,
	RGB2_EXT = 0x804Eu,
	RGB4_EXT = 0x804Fu,
	RGB5_EXT = 0x8050u,
	RGB8_EXT = 0x8051u,
	RGB10_EXT = 0x8052u,
	RGB12_EXT = 0x8053u,
	RGB16_EXT = 0x8054u,
	RGBA2_EXT = 0x8055u,
	RGBA4_EXT = 0x8056u,
	RGB5_A1_EXT = 0x8057u,
	RGBA8_EXT = 0x8058u,
	RGB10_A2_EXT = 0x8059u,
	RGBA12_EXT = 0x805Au,
	RGBA16_EXT = 0x805Bu,
	TEXTURE_RED_SIZE_EXT = 0x805Cu,
	TEXTURE_GREEN_SIZE_EXT = 0x805Du,
	TEXTURE_BLUE_SIZE_EXT = 0x805Eu,
	TEXTURE_ALPHA_SIZE_EXT = 0x805Fu,
	TEXTURE_LUMINANCE_SIZE_EXT = 0x8060u,
	TEXTURE_INTENSITY_SIZE_EXT = 0x8061u,
	REPLACE_EXT = 0x8062u,
	PROXY_TEXTURE_1D_EXT = 0x8063u,
	PROXY_TEXTURE_2D_EXT = 0x8064u,
	TEXTURE_TOO_LARGE_EXT = 0x8065u,
};
//- end: EXT_texture

//-//-- 
//- Ext: EXT_texture3D
enum GLext_EXT_texture3D
{
#	define FLUXGL_EXT_texture3D 1
	PACK_SKIP_IMAGES_EXT = 0x806Bu,
	PACK_IMAGE_HEIGHT_EXT = 0x806Cu,
	UNPACK_SKIP_IMAGES_EXT = 0x806Du,
	UNPACK_IMAGE_HEIGHT_EXT = 0x806Eu,
	TEXTURE_3D_EXT = 0x806Fu,
	PROXY_TEXTURE_3D_EXT = 0x8070u,
	TEXTURE_DEPTH_EXT = 0x8071u,
	TEXTURE_WRAP_R_EXT = 0x8072u,
	MAX_3D_TEXTURE_SIZE_EXT = 0x8073u,
};
//- end: EXT_texture3D

//-//-- 
//- Ext: EXT_texture_array
enum GLext_EXT_texture_array
{
#	define FLUXGL_EXT_texture_array 1
	COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884Eu,
	MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FFu,
	TEXTURE_1D_ARRAY_EXT = 0x8C18u,
	PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19u,
	TEXTURE_2D_ARRAY_EXT = 0x8C1Au,
	PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1Bu,
	TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1Cu,
	TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1Du,
//	GL::FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT already defined in EXT_geometry_shader4
};
//- end: EXT_texture_array

//-//-- 
//- Ext: EXT_texture_buffer_object
enum GLext_EXT_texture_buffer_object
{
#	define FLUXGL_EXT_texture_buffer_object 1
	TEXTURE_BUFFER_EXT = 0x8C2Au,
	MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2Bu,
	TEXTURE_BINDING_BUFFER_EXT = 0x8C2Cu,
	TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2Du,
	TEXTURE_BUFFER_FORMAT_EXT = 0x8C2Eu,
};
//- end: EXT_texture_buffer_object

//-//-- 
//- Ext: EXT_texture_compression_latc
enum GLext_EXT_texture_compression_latc
{
#	define FLUXGL_EXT_texture_compression_latc 1
	COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70u,
	COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71u,
	COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72u,
	COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73u,
};
//- end: EXT_texture_compression_latc

//-//-- 
//- Ext: EXT_texture_compression_rgtc
enum GLext_EXT_texture_compression_rgtc
{
#	define FLUXGL_EXT_texture_compression_rgtc 1
	COMPRESSED_RED_RGTC1_EXT = 0x8DBBu,
	COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBCu,
	COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBDu,
	COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBEu,
};
//- end: EXT_texture_compression_rgtc

//-//-- 
//- Ext: EXT_texture_compression_s3tc
enum GLext_EXT_texture_compression_s3tc
{
#	define FLUXGL_EXT_texture_compression_s3tc 1
	COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0u,
	COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1u,
	COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2u,
	COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3u,
};
//- end: EXT_texture_compression_s3tc

//-//-- 
//- Ext: EXT_texture_cube_map
enum GLext_EXT_texture_cube_map
{
#	define FLUXGL_EXT_texture_cube_map 1
	NORMAL_MAP_EXT = 0x8511u,
	REFLECTION_MAP_EXT = 0x8512u,
	TEXTURE_CUBE_MAP_EXT = 0x8513u,
	TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514u,
	TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515u,
	TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516u,
	TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517u,
	TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518u,
	TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519u,
	TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851Au,
	PROXY_TEXTURE_CUBE_MAP_EXT = 0x851Bu,
	MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851Cu,
};
//- end: EXT_texture_cube_map

//-//-- 
//- Ext: EXT_texture_env_combine
enum GLext_EXT_texture_env_combine
{
#	define FLUXGL_EXT_texture_env_combine 1
	COMBINE_EXT = 0x8570u,
	COMBINE_RGB_EXT = 0x8571u,
	COMBINE_ALPHA_EXT = 0x8572u,
	RGB_SCALE_EXT = 0x8573u,
	ADD_SIGNED_EXT = 0x8574u,
	INTERPOLATE_EXT = 0x8575u,
	CONSTANT_EXT = 0x8576u,
	PRIMARY_COLOR_EXT = 0x8577u,
	PREVIOUS_EXT = 0x8578u,
	SOURCE0_RGB_EXT = 0x8580u,
	SOURCE1_RGB_EXT = 0x8581u,
	SOURCE2_RGB_EXT = 0x8582u,
	SOURCE0_ALPHA_EXT = 0x8588u,
	SOURCE1_ALPHA_EXT = 0x8589u,
	SOURCE2_ALPHA_EXT = 0x858Au,
	OPERAND0_RGB_EXT = 0x8590u,
	OPERAND1_RGB_EXT = 0x8591u,
	OPERAND2_RGB_EXT = 0x8592u,
	OPERAND0_ALPHA_EXT = 0x8598u,
	OPERAND1_ALPHA_EXT = 0x8599u,
	OPERAND2_ALPHA_EXT = 0x859Au,
};
//- end: EXT_texture_env_combine

//-//-- 
//- Ext: EXT_texture_env_dot3
enum GLext_EXT_texture_env_dot3
{
#	define FLUXGL_EXT_texture_env_dot3 1
	DOT3_RGB_EXT = 0x8740u,
	DOT3_RGBA_EXT = 0x8741u,
};
//- end: EXT_texture_env_dot3

//-//-- 
//- Ext: EXT_texture_filter_anisotropic
enum GLext_EXT_texture_filter_anisotropic
{
#	define FLUXGL_EXT_texture_filter_anisotropic 1
	TEXTURE_MAX_ANISOTROPY_EXT = 0x84FEu,
	MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FFu,
};
//- end: EXT_texture_filter_anisotropic

//-//-- 
//- Ext: EXT_texture_filter_minmax
enum GLext_EXT_texture_filter_minmax
{
#	define FLUXGL_EXT_texture_filter_minmax 1
//	GL::RASTER_MULTISAMPLE_EXT already defined in EXT_raster_multisample
//	GL::RASTER_SAMPLES_EXT already defined in EXT_raster_multisample
//	GL::MAX_RASTER_SAMPLES_EXT already defined in EXT_raster_multisample
//	GL::RASTER_FIXED_SAMPLE_LOCATIONS_EXT already defined in EXT_raster_multisample
//	GL::MULTISAMPLE_RASTERIZATION_ALLOWED_EXT already defined in EXT_raster_multisample
//	GL::EFFECTIVE_RASTER_SAMPLES_EXT already defined in EXT_raster_multisample
};
//- end: EXT_texture_filter_minmax

//-//-- 
//- Ext: EXT_texture_integer
enum GLext_EXT_texture_integer
{
#	define FLUXGL_EXT_texture_integer 1
	RGBA32UI_EXT = 0x8D70u,
	RGB32UI_EXT = 0x8D71u,
	ALPHA32UI_EXT = 0x8D72u,
	INTENSITY32UI_EXT = 0x8D73u,
	LUMINANCE32UI_EXT = 0x8D74u,
	LUMINANCE_ALPHA32UI_EXT = 0x8D75u,
	RGBA16UI_EXT = 0x8D76u,
	RGB16UI_EXT = 0x8D77u,
	ALPHA16UI_EXT = 0x8D78u,
	INTENSITY16UI_EXT = 0x8D79u,
	LUMINANCE16UI_EXT = 0x8D7Au,
	LUMINANCE_ALPHA16UI_EXT = 0x8D7Bu,
	RGBA8UI_EXT = 0x8D7Cu,
	RGB8UI_EXT = 0x8D7Du,
	ALPHA8UI_EXT = 0x8D7Eu,
	INTENSITY8UI_EXT = 0x8D7Fu,
	LUMINANCE8UI_EXT = 0x8D80u,
	LUMINANCE_ALPHA8UI_EXT = 0x8D81u,
	RGBA32I_EXT = 0x8D82u,
	RGB32I_EXT = 0x8D83u,
	ALPHA32I_EXT = 0x8D84u,
	INTENSITY32I_EXT = 0x8D85u,
	LUMINANCE32I_EXT = 0x8D86u,
	LUMINANCE_ALPHA32I_EXT = 0x8D87u,
	RGBA16I_EXT = 0x8D88u,
	RGB16I_EXT = 0x8D89u,
	ALPHA16I_EXT = 0x8D8Au,
	INTENSITY16I_EXT = 0x8D8Bu,
	LUMINANCE16I_EXT = 0x8D8Cu,
	LUMINANCE_ALPHA16I_EXT = 0x8D8Du,
	RGBA8I_EXT = 0x8D8Eu,
	RGB8I_EXT = 0x8D8Fu,
	ALPHA8I_EXT = 0x8D90u,
	INTENSITY8I_EXT = 0x8D91u,
	LUMINANCE8I_EXT = 0x8D92u,
	LUMINANCE_ALPHA8I_EXT = 0x8D93u,
	RED_INTEGER_EXT = 0x8D94u,
	GREEN_INTEGER_EXT = 0x8D95u,
	BLUE_INTEGER_EXT = 0x8D96u,
	ALPHA_INTEGER_EXT = 0x8D97u,
	RGB_INTEGER_EXT = 0x8D98u,
	RGBA_INTEGER_EXT = 0x8D99u,
	BGR_INTEGER_EXT = 0x8D9Au,
	BGRA_INTEGER_EXT = 0x8D9Bu,
	LUMINANCE_INTEGER_EXT = 0x8D9Cu,
	LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9Du,
	RGBA_INTEGER_MODE_EXT = 0x8D9Eu,
};
//- end: EXT_texture_integer

//-//-- 
//- Ext: EXT_texture_lod_bias
enum GLext_EXT_texture_lod_bias
{
#	define FLUXGL_EXT_texture_lod_bias 1
	MAX_TEXTURE_LOD_BIAS_EXT = 0x84FDu,
	TEXTURE_FILTER_CONTROL_EXT = 0x8500u,
	TEXTURE_LOD_BIAS_EXT = 0x8501u,
};
//- end: EXT_texture_lod_bias

//-//-- 
//- Ext: EXT_texture_mirror_clamp
enum GLext_EXT_texture_mirror_clamp
{
#	define FLUXGL_EXT_texture_mirror_clamp 1
	MIRROR_CLAMP_EXT = 0x8742u,
	MIRROR_CLAMP_TO_EDGE_EXT = 0x8743u,
	MIRROR_CLAMP_TO_BORDER_EXT = 0x8912u,
};
//- end: EXT_texture_mirror_clamp

//-//-- 
//- Ext: EXT_texture_object
enum GLext_EXT_texture_object
{
#	define FLUXGL_EXT_texture_object 1
	TEXTURE_PRIORITY_EXT = 0x8066u,
	TEXTURE_RESIDENT_EXT = 0x8067u,
	TEXTURE_1D_BINDING_EXT = 0x8068u,
	TEXTURE_2D_BINDING_EXT = 0x8069u,
	TEXTURE_3D_BINDING_EXT = 0x806Au,
};
//- end: EXT_texture_object

//-//-- 
//- Ext: EXT_texture_perturb_normal
enum GLext_EXT_texture_perturb_normal
{
#	define FLUXGL_EXT_texture_perturb_normal 1
	PERTURB_EXT = 0x85AEu,
	TEXTURE_NORMAL_EXT = 0x85AFu,
};
//- end: EXT_texture_perturb_normal

//-//-- 
//- Ext: EXT_texture_sRGB
enum GLext_EXT_texture_sRGB
{
#	define FLUXGL_EXT_texture_sRGB 1
	SRGB_EXT = 0x8C40u,
	SRGB8_EXT = 0x8C41u,
	SRGB_ALPHA_EXT = 0x8C42u,
	SRGB8_ALPHA8_EXT = 0x8C43u,
	SLUMINANCE_ALPHA_EXT = 0x8C44u,
	SLUMINANCE8_ALPHA8_EXT = 0x8C45u,
	SLUMINANCE_EXT = 0x8C46u,
	SLUMINANCE8_EXT = 0x8C47u,
	COMPRESSED_SRGB_EXT = 0x8C48u,
	COMPRESSED_SRGB_ALPHA_EXT = 0x8C49u,
	COMPRESSED_SLUMINANCE_EXT = 0x8C4Au,
	COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4Bu,
	COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4Cu,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4Du,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4Eu,
	COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4Fu,
};
//- end: EXT_texture_sRGB

//-//-- 
//- Ext: EXT_texture_sRGB_decode
enum GLext_EXT_texture_sRGB_decode
{
#	define FLUXGL_EXT_texture_sRGB_decode 1
	TEXTURE_SRGB_DECODE_EXT = 0x8A48u,
	DECODE_EXT = 0x8A49u,
	SKIP_DECODE_EXT = 0x8A4Au,
};
//- end: EXT_texture_sRGB_decode

//-//-- 
//- Ext: EXT_texture_shared_exponent
enum GLext_EXT_texture_shared_exponent
{
#	define FLUXGL_EXT_texture_shared_exponent 1
	RGB9_E5_EXT = 0x8C3Du,
	UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3Eu,
	TEXTURE_SHARED_SIZE_EXT = 0x8C3Fu,
};
//- end: EXT_texture_shared_exponent

//-//-- 
//- Ext: EXT_texture_snorm
enum GLext_EXT_texture_snorm
{
#	define FLUXGL_EXT_texture_snorm 1
	RED_SNORM = 0x8F90u,
	RG_SNORM = 0x8F91u,
	RGB_SNORM = 0x8F92u,
	RGBA_SNORM = 0x8F93u,
//	GL::R8_SNORM already defined in 3.1_core
//	GL::RG8_SNORM already defined in 3.1_core
//	GL::RGB8_SNORM already defined in 3.1_core
//	GL::RGBA8_SNORM already defined in 3.1_core
//	GL::R16_SNORM already defined in 3.1_core
//	GL::RG16_SNORM already defined in 3.1_core
//	GL::RGB16_SNORM already defined in 3.1_core
//	GL::RGBA16_SNORM already defined in 3.1_core
//	GL::SIGNED_NORMALIZED already defined in 3.1_core
	ALPHA_SNORM = 0x9010u,
	LUMINANCE_SNORM = 0x9011u,
	LUMINANCE_ALPHA_SNORM = 0x9012u,
	INTENSITY_SNORM = 0x9013u,
	ALPHA8_SNORM = 0x9014u,
	LUMINANCE8_SNORM = 0x9015u,
	LUMINANCE8_ALPHA8_SNORM = 0x9016u,
	INTENSITY8_SNORM = 0x9017u,
	ALPHA16_SNORM = 0x9018u,
	LUMINANCE16_SNORM = 0x9019u,
	LUMINANCE16_ALPHA16_SNORM = 0x901Au,
	INTENSITY16_SNORM = 0x901Bu,
};
//- end: EXT_texture_snorm

//-//-- 
//- Ext: EXT_texture_swizzle
enum GLext_EXT_texture_swizzle
{
#	define FLUXGL_EXT_texture_swizzle 1
	TEXTURE_SWIZZLE_R_EXT = 0x8E42u,
	TEXTURE_SWIZZLE_G_EXT = 0x8E43u,
	TEXTURE_SWIZZLE_B_EXT = 0x8E44u,
	TEXTURE_SWIZZLE_A_EXT = 0x8E45u,
	TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46u,
};
//- end: EXT_texture_swizzle

//-//-- 
//- Ext: EXT_timer_query
enum GLext_EXT_timer_query
{
#	define FLUXGL_EXT_timer_query 1
	TIME_ELAPSED_EXT = 0x88BFu,
};
//- end: EXT_timer_query

//-//-- 
//- Ext: EXT_transform_feedback
enum GLext_EXT_transform_feedback
{
#	define FLUXGL_EXT_transform_feedback 1
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76u,
	TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7Fu,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80u,
	TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83u,
	TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84u,
	TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85u,
	PRIMITIVES_GENERATED_EXT = 0x8C87u,
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88u,
	RASTERIZER_DISCARD_EXT = 0x8C89u,
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8Au,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8Bu,
	INTERLEAVED_ATTRIBS_EXT = 0x8C8Cu,
	SEPARATE_ATTRIBS_EXT = 0x8C8Du,
	TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8Eu,
	TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8Fu,
};
//- end: EXT_transform_feedback

//-//-- 
//- Ext: EXT_vertex_array
enum GLext_EXT_vertex_array
{
#	define FLUXGL_EXT_vertex_array 1
	VERTEX_ARRAY_EXT = 0x8074u,
	NORMAL_ARRAY_EXT = 0x8075u,
	COLOR_ARRAY_EXT = 0x8076u,
	INDEX_ARRAY_EXT = 0x8077u,
	TEXTURE_COORD_ARRAY_EXT = 0x8078u,
	EDGE_FLAG_ARRAY_EXT = 0x8079u,
	VERTEX_ARRAY_SIZE_EXT = 0x807Au,
	VERTEX_ARRAY_TYPE_EXT = 0x807Bu,
	VERTEX_ARRAY_STRIDE_EXT = 0x807Cu,
	VERTEX_ARRAY_COUNT_EXT = 0x807Du,
	NORMAL_ARRAY_TYPE_EXT = 0x807Eu,
	NORMAL_ARRAY_STRIDE_EXT = 0x807Fu,
	NORMAL_ARRAY_COUNT_EXT = 0x8080u,
	COLOR_ARRAY_SIZE_EXT = 0x8081u,
	COLOR_ARRAY_TYPE_EXT = 0x8082u,
	COLOR_ARRAY_STRIDE_EXT = 0x8083u,
	COLOR_ARRAY_COUNT_EXT = 0x8084u,
	INDEX_ARRAY_TYPE_EXT = 0x8085u,
	INDEX_ARRAY_STRIDE_EXT = 0x8086u,
	INDEX_ARRAY_COUNT_EXT = 0x8087u,
	TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088u,
	TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089u,
	TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808Au,
	TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808Bu,
	EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808Cu,
	EDGE_FLAG_ARRAY_COUNT_EXT = 0x808Du,
	VERTEX_ARRAY_POINTER_EXT = 0x808Eu,
	NORMAL_ARRAY_POINTER_EXT = 0x808Fu,
	COLOR_ARRAY_POINTER_EXT = 0x8090u,
	INDEX_ARRAY_POINTER_EXT = 0x8091u,
	TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092u,
	EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093u,
};
//- end: EXT_vertex_array

//-//-- 
//- Ext: EXT_vertex_array_bgra
enum GLext_EXT_vertex_array_bgra
{
#	define FLUXGL_EXT_vertex_array_bgra 1
//	GL::BGRA already defined in 1.2_core
};
//- end: EXT_vertex_array_bgra

//-//-- 
//- Ext: EXT_vertex_attrib_64bit
enum GLext_EXT_vertex_attrib_64bit
{
#	define FLUXGL_EXT_vertex_attrib_64bit 1
//	GL::DOUBLE already defined in 1.1_core
	DOUBLE_MAT2_EXT = 0x8F46u,
	DOUBLE_MAT3_EXT = 0x8F47u,
	DOUBLE_MAT4_EXT = 0x8F48u,
	DOUBLE_MAT2x3_EXT = 0x8F49u,
	DOUBLE_MAT2x4_EXT = 0x8F4Au,
	DOUBLE_MAT3x2_EXT = 0x8F4Bu,
	DOUBLE_MAT3x4_EXT = 0x8F4Cu,
	DOUBLE_MAT4x2_EXT = 0x8F4Du,
	DOUBLE_MAT4x3_EXT = 0x8F4Eu,
	DOUBLE_VEC2_EXT = 0x8FFCu,
	DOUBLE_VEC3_EXT = 0x8FFDu,
	DOUBLE_VEC4_EXT = 0x8FFEu,
};
//- end: EXT_vertex_attrib_64bit

//-//-- 
//- Ext: EXT_vertex_shader
enum GLext_EXT_vertex_shader
{
#	define FLUXGL_EXT_vertex_shader 1
	VERTEX_SHADER_EXT = 0x8780u,
	VERTEX_SHADER_BINDING_EXT = 0x8781u,
	OP_INDEX_EXT = 0x8782u,
	OP_NEGATE_EXT = 0x8783u,
	OP_DOT3_EXT = 0x8784u,
	OP_DOT4_EXT = 0x8785u,
	OP_MUL_EXT = 0x8786u,
	OP_ADD_EXT = 0x8787u,
	OP_MADD_EXT = 0x8788u,
	OP_FRAC_EXT = 0x8789u,
	OP_MAX_EXT = 0x878Au,
	OP_MIN_EXT = 0x878Bu,
	OP_SET_GE_EXT = 0x878Cu,
	OP_SET_LT_EXT = 0x878Du,
	OP_CLAMP_EXT = 0x878Eu,
	OP_FLOOR_EXT = 0x878Fu,
	OP_ROUND_EXT = 0x8790u,
	OP_EXP_BASE_2_EXT = 0x8791u,
	OP_LOG_BASE_2_EXT = 0x8792u,
	OP_POWER_EXT = 0x8793u,
	OP_RECIP_EXT = 0x8794u,
	OP_RECIP_SQRT_EXT = 0x8795u,
	OP_SUB_EXT = 0x8796u,
	OP_CROSS_PRODUCT_EXT = 0x8797u,
	OP_MULTIPLY_MATRIX_EXT = 0x8798u,
	OP_MOV_EXT = 0x8799u,
	OUTPUT_VERTEX_EXT = 0x879Au,
	OUTPUT_COLOR0_EXT = 0x879Bu,
	OUTPUT_COLOR1_EXT = 0x879Cu,
	OUTPUT_TEXTURE_COORD0_EXT = 0x879Du,
	OUTPUT_TEXTURE_COORD1_EXT = 0x879Eu,
	OUTPUT_TEXTURE_COORD2_EXT = 0x879Fu,
	OUTPUT_TEXTURE_COORD3_EXT = 0x87A0u,
	OUTPUT_TEXTURE_COORD4_EXT = 0x87A1u,
	OUTPUT_TEXTURE_COORD5_EXT = 0x87A2u,
	OUTPUT_TEXTURE_COORD6_EXT = 0x87A3u,
	OUTPUT_TEXTURE_COORD7_EXT = 0x87A4u,
	OUTPUT_TEXTURE_COORD8_EXT = 0x87A5u,
	OUTPUT_TEXTURE_COORD9_EXT = 0x87A6u,
	OUTPUT_TEXTURE_COORD10_EXT = 0x87A7u,
	OUTPUT_TEXTURE_COORD11_EXT = 0x87A8u,
	OUTPUT_TEXTURE_COORD12_EXT = 0x87A9u,
	OUTPUT_TEXTURE_COORD13_EXT = 0x87AAu,
	OUTPUT_TEXTURE_COORD14_EXT = 0x87ABu,
	OUTPUT_TEXTURE_COORD15_EXT = 0x87ACu,
	OUTPUT_TEXTURE_COORD16_EXT = 0x87ADu,
	OUTPUT_TEXTURE_COORD17_EXT = 0x87AEu,
	OUTPUT_TEXTURE_COORD18_EXT = 0x87AFu,
	OUTPUT_TEXTURE_COORD19_EXT = 0x87B0u,
	OUTPUT_TEXTURE_COORD20_EXT = 0x87B1u,
	OUTPUT_TEXTURE_COORD21_EXT = 0x87B2u,
	OUTPUT_TEXTURE_COORD22_EXT = 0x87B3u,
	OUTPUT_TEXTURE_COORD23_EXT = 0x87B4u,
	OUTPUT_TEXTURE_COORD24_EXT = 0x87B5u,
	OUTPUT_TEXTURE_COORD25_EXT = 0x87B6u,
	OUTPUT_TEXTURE_COORD26_EXT = 0x87B7u,
	OUTPUT_TEXTURE_COORD27_EXT = 0x87B8u,
	OUTPUT_TEXTURE_COORD28_EXT = 0x87B9u,
	OUTPUT_TEXTURE_COORD29_EXT = 0x87BAu,
	OUTPUT_TEXTURE_COORD30_EXT = 0x87BBu,
	OUTPUT_TEXTURE_COORD31_EXT = 0x87BCu,
	OUTPUT_FOG_EXT = 0x87BDu,
	SCALAR_EXT = 0x87BEu,
	VECTOR_EXT = 0x87BFu,
	MATRIX_EXT = 0x87C0u,
	VARIANT_EXT = 0x87C1u,
	INVARIANT_EXT = 0x87C2u,
	LOCAL_CONSTANT_EXT = 0x87C3u,
	LOCAL_EXT = 0x87C4u,
	MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5u,
	MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6u,
	MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7u,
	MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8u,
	MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9u,
	MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CAu,
	MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CBu,
	MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CCu,
	MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CDu,
	MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CEu,
	VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CFu,
	VERTEX_SHADER_VARIANTS_EXT = 0x87D0u,
	VERTEX_SHADER_INVARIANTS_EXT = 0x87D1u,
	VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2u,
	VERTEX_SHADER_LOCALS_EXT = 0x87D3u,
	VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4u,
	X_EXT = 0x87D5u,
	Y_EXT = 0x87D6u,
	Z_EXT = 0x87D7u,
	W_EXT = 0x87D8u,
	NEGATIVE_X_EXT = 0x87D9u,
	NEGATIVE_Y_EXT = 0x87DAu,
	NEGATIVE_Z_EXT = 0x87DBu,
	NEGATIVE_W_EXT = 0x87DCu,
	ZERO_EXT = 0x87DDu,
	ONE_EXT = 0x87DEu,
	NEGATIVE_ONE_EXT = 0x87DFu,
	NORMALIZED_RANGE_EXT = 0x87E0u,
	FULL_RANGE_EXT = 0x87E1u,
	CURRENT_VERTEX_EXT = 0x87E2u,
	MVP_MATRIX_EXT = 0x87E3u,
	VARIANT_VALUE_EXT = 0x87E4u,
	VARIANT_DATATYPE_EXT = 0x87E5u,
	VARIANT_ARRAY_STRIDE_EXT = 0x87E6u,
	VARIANT_ARRAY_TYPE_EXT = 0x87E7u,
	VARIANT_ARRAY_EXT = 0x87E8u,
	VARIANT_ARRAY_POINTER_EXT = 0x87E9u,
	INVARIANT_VALUE_EXT = 0x87EAu,
	INVARIANT_DATATYPE_EXT = 0x87EBu,
	LOCAL_CONSTANT_VALUE_EXT = 0x87ECu,
	LOCAL_CONSTANT_DATATYPE_EXT = 0x87EDu,
};
//- end: EXT_vertex_shader

//-//-- 
//- Ext: EXT_vertex_weighting
enum GLext_EXT_vertex_weighting
{
#	define FLUXGL_EXT_vertex_weighting 1
	MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3u,
	MODELVIEW0_MATRIX_EXT = 0x0BA6u,
	MODELVIEW0_EXT = 0x1700u,
	MODELVIEW1_STACK_DEPTH_EXT = 0x8502u,
	MODELVIEW1_MATRIX_EXT = 0x8506u,
	VERTEX_WEIGHTING_EXT = 0x8509u,
	MODELVIEW1_EXT = 0x850Au,
	CURRENT_VERTEX_WEIGHT_EXT = 0x850Bu,
	VERTEX_WEIGHT_ARRAY_EXT = 0x850Cu,
	VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850Du,
	VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850Eu,
	VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850Fu,
	VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510u,
};
//- end: EXT_vertex_weighting

//-//-- 
//- Ext: EXT_x11_sync_object
enum GLext_EXT_x11_sync_object
{
#	define FLUXGL_EXT_x11_sync_object 1
	SYNC_X11_FENCE_EXT = 0x90E1u,
};
//- end: EXT_x11_sync_object

//-//-- 
//- Ext: HP_convolution_border_modes
enum GLext_HP_convolution_border_modes
{
#	define FLUXGL_HP_convolution_border_modes 1
	IGNORE_BORDER_HP = 0x8150u,
	CONSTANT_BORDER_HP = 0x8151u,
	REPLICATE_BORDER_HP = 0x8153u,
	CONVOLUTION_BORDER_COLOR_HP = 0x8154u,
};
//- end: HP_convolution_border_modes

//-//-- 
//- Ext: HP_image_transform
enum GLext_HP_image_transform
{
#	define FLUXGL_HP_image_transform 1
	IMAGE_SCALE_X_HP = 0x8155u,
	IMAGE_SCALE_Y_HP = 0x8156u,
	IMAGE_TRANSLATE_X_HP = 0x8157u,
	IMAGE_TRANSLATE_Y_HP = 0x8158u,
	IMAGE_ROTATE_ANGLE_HP = 0x8159u,
	IMAGE_ROTATE_ORIGIN_X_HP = 0x815Au,
	IMAGE_ROTATE_ORIGIN_Y_HP = 0x815Bu,
	IMAGE_MAG_FILTER_HP = 0x815Cu,
	IMAGE_MIN_FILTER_HP = 0x815Du,
	IMAGE_CUBIC_WEIGHT_HP = 0x815Eu,
	CUBIC_HP = 0x815Fu,
	AVERAGE_HP = 0x8160u,
	IMAGE_TRANSFORM_2D_HP = 0x8161u,
	POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162u,
	PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163u,
};
//- end: HP_image_transform

//-//-- 
//- Ext: HP_occlusion_test
enum GLext_HP_occlusion_test
{
#	define FLUXGL_HP_occlusion_test 1
	OCCLUSION_TEST_HP = 0x8165u,
	OCCLUSION_TEST_RESULT_HP = 0x8166u,
};
//- end: HP_occlusion_test

//-//-- 
//- Ext: HP_texture_lighting
enum GLext_HP_texture_lighting
{
#	define FLUXGL_HP_texture_lighting 1
	TEXTURE_LIGHTING_MODE_HP = 0x8167u,
	TEXTURE_POST_SPECULAR_HP = 0x8168u,
	TEXTURE_PRE_SPECULAR_HP = 0x8169u,
};
//- end: HP_texture_lighting

//-//-- 
//- Ext: IBM_cull_vertex
enum GLext_IBM_cull_vertex
{
#	define FLUXGL_IBM_cull_vertex 1
	CULL_VERTEX_IBM = 103050u,
};
//- end: IBM_cull_vertex

//-//-- 
//- Ext: IBM_rasterpos_clip
enum GLext_IBM_rasterpos_clip
{
#	define FLUXGL_IBM_rasterpos_clip 1
	RASTER_POSITION_UNCLIPPED_IBM = 0x19262u,
};
//- end: IBM_rasterpos_clip

//-//-- 
//- Ext: IBM_static_data
enum GLext_IBM_static_data
{
#	define FLUXGL_IBM_static_data 1
	ALL_STATIC_DATA_IBM = 103060u,
	STATIC_VERTEX_ARRAY_IBM = 103061u,
};
//- end: IBM_static_data

//-//-- 
//- Ext: IBM_texture_mirrored_repeat
enum GLext_IBM_texture_mirrored_repeat
{
#	define FLUXGL_IBM_texture_mirrored_repeat 1
	MIRRORED_REPEAT_IBM = 0x8370u,
};
//- end: IBM_texture_mirrored_repeat

//-//-- 
//- Ext: IBM_vertex_array_lists
enum GLext_IBM_vertex_array_lists
{
#	define FLUXGL_IBM_vertex_array_lists 1
	VERTEX_ARRAY_LIST_IBM = 103070u,
	NORMAL_ARRAY_LIST_IBM = 103071u,
	COLOR_ARRAY_LIST_IBM = 103072u,
	INDEX_ARRAY_LIST_IBM = 103073u,
	TEXTURE_COORD_ARRAY_LIST_IBM = 103074u,
	EDGE_FLAG_ARRAY_LIST_IBM = 103075u,
	FOG_COORDINATE_ARRAY_LIST_IBM = 103076u,
	SECONDARY_COLOR_ARRAY_LIST_IBM = 103077u,
	VERTEX_ARRAY_LIST_STRIDE_IBM = 103080u,
	NORMAL_ARRAY_LIST_STRIDE_IBM = 103081u,
	COLOR_ARRAY_LIST_STRIDE_IBM = 103082u,
	INDEX_ARRAY_LIST_STRIDE_IBM = 103083u,
	TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084u,
	EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085u,
	FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086u,
	SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087u,
};
//- end: IBM_vertex_array_lists

//-//-- 
//- Ext: INGR_color_clamp
enum GLext_INGR_color_clamp
{
#	define FLUXGL_INGR_color_clamp 1
	RED_MIN_CLAMP_INGR = 0x8560u,
	GREEN_MIN_CLAMP_INGR = 0x8561u,
	BLUE_MIN_CLAMP_INGR = 0x8562u,
	ALPHA_MIN_CLAMP_INGR = 0x8563u,
	RED_MAX_CLAMP_INGR = 0x8564u,
	GREEN_MAX_CLAMP_INGR = 0x8565u,
	BLUE_MAX_CLAMP_INGR = 0x8566u,
	ALPHA_MAX_CLAMP_INGR = 0x8567u,
};
//- end: INGR_color_clamp

//-//-- 
//- Ext: INGR_interlace_read
enum GLext_INGR_interlace_read
{
#	define FLUXGL_INGR_interlace_read 1
	INTERLACE_READ_INGR = 0x8568u,
};
//- end: INGR_interlace_read

//-//-- 
//- Ext: INTEL_map_texture
enum GLext_INTEL_map_texture
{
#	define FLUXGL_INTEL_map_texture 1
	LAYOUT_DEFAULT_INTEL = 0u,
	TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FFu,
	LAYOUT_LINEAR_INTEL = 1u,
	LAYOUT_LINEAR_CPU_CACHED_INTEL = 2u,
};
//- end: INTEL_map_texture

//-//-- 
//- Ext: INTEL_parallel_arrays
enum GLext_INTEL_parallel_arrays
{
#	define FLUXGL_INTEL_parallel_arrays 1
	PARALLEL_ARRAYS_INTEL = 0x83F4u,
	VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5u,
	NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6u,
	COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7u,
	TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8u,
};
//- end: INTEL_parallel_arrays

//-//-- 
//- Ext: INTEL_performance_query
enum GLext_INTEL_performance_query
{
#	define FLUXGL_INTEL_performance_query 1
	PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000u,
	PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001u,
	PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9u,
	PERFQUERY_FLUSH_INTEL = 0x83FAu,
	PERFQUERY_WAIT_INTEL = 0x83FBu,
	PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0u,
	PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1u,
	PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2u,
	PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3u,
	PERFQUERY_COUNTER_RAW_INTEL = 0x94F4u,
	PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5u,
	PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8u,
	PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9u,
	PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FAu,
	PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FBu,
	PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FCu,
	PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FDu,
	PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FEu,
	PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FFu,
	PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500u,
};
//- end: INTEL_performance_query

//-//-- 
//- Ext: KHR_blend_equation_advanced
enum GLext_KHR_blend_equation_advanced
{
#	define FLUXGL_KHR_blend_equation_advanced 1
	MULTIPLY_KHR = 0x9294u,
	SCREEN_KHR = 0x9295u,
	OVERLAY_KHR = 0x9296u,
	DARKEN_KHR = 0x9297u,
	LIGHTEN_KHR = 0x9298u,
	COLORDODGE_KHR = 0x9299u,
	COLORBURN_KHR = 0x929Au,
	HARDLIGHT_KHR = 0x929Bu,
	SOFTLIGHT_KHR = 0x929Cu,
	DIFFERENCE_KHR = 0x929Eu,
	EXCLUSION_KHR = 0x92A0u,
	HSL_HUE_KHR = 0x92ADu,
	HSL_SATURATION_KHR = 0x92AEu,
	HSL_COLOR_KHR = 0x92AFu,
	HSL_LUMINOSITY_KHR = 0x92B0u,
};
//- end: KHR_blend_equation_advanced

//-//-- 
//- Ext: KHR_blend_equation_advanced_coherent
enum GLext_KHR_blend_equation_advanced_coherent
{
#	define FLUXGL_KHR_blend_equation_advanced_coherent 1
	BLEND_ADVANCED_COHERENT_KHR = 0x9285u,
};
//- end: KHR_blend_equation_advanced_coherent

//-//-- 
//- Ext: KHR_context_flush_control
enum GLext_KHR_context_flush_control
{
#	define FLUXGL_KHR_context_flush_control 1
//	GL::NONE already defined in 1.1_core
//	GL::CONTEXT_RELEASE_BEHAVIOR already defined in 4.5_core
//	GL::CONTEXT_RELEASE_BEHAVIOR_FLUSH already defined in 4.5_core
};
//- end: KHR_context_flush_control

//-//-- 
//- Ext: KHR_debug
enum GLext_KHR_debug
{
#	define FLUXGL_KHR_debug 1
//	GL::CONTEXT_FLAG_DEBUG_BIT already defined in 4.3_core
//	GL::STACK_OVERFLOW already defined in 1.1_core
//	GL::STACK_UNDERFLOW already defined in 1.1_core
//	GL::VERTEX_ARRAY already defined in 1.1_core
//	GL::DEBUG_OUTPUT_SYNCHRONOUS already defined in 4.3_core
//	GL::DEBUG_NEXT_LOGGED_MESSAGE_LENGTH already defined in 4.3_core
//	GL::DEBUG_CALLBACK_FUNCTION already defined in 4.3_core
//	GL::DEBUG_CALLBACK_USER_PARAM already defined in 4.3_core
//	GL::DEBUG_SOURCE_API already defined in 4.3_core
//	GL::DEBUG_SOURCE_WINDOW_SYSTEM already defined in 4.3_core
//	GL::DEBUG_SOURCE_SHADER_COMPILER already defined in 4.3_core
//	GL::DEBUG_SOURCE_THIRD_PARTY already defined in 4.3_core
//	GL::DEBUG_SOURCE_APPLICATION already defined in 4.3_core
//	GL::DEBUG_SOURCE_OTHER already defined in 4.3_core
//	GL::DEBUG_TYPE_ERROR already defined in 4.3_core
//	GL::DEBUG_TYPE_DEPRECATED_BEHAVIOR already defined in 4.3_core
//	GL::DEBUG_TYPE_UNDEFINED_BEHAVIOR already defined in 4.3_core
//	GL::DEBUG_TYPE_PORTABILITY already defined in 4.3_core
//	GL::DEBUG_TYPE_PERFORMANCE already defined in 4.3_core
//	GL::DEBUG_TYPE_OTHER already defined in 4.3_core
//	GL::DEBUG_TYPE_MARKER already defined in 4.3_core
//	GL::DEBUG_TYPE_PUSH_GROUP already defined in 4.3_core
//	GL::DEBUG_TYPE_POP_GROUP already defined in 4.3_core
//	GL::DEBUG_SEVERITY_NOTIFICATION already defined in 4.3_core
//	GL::MAX_DEBUG_GROUP_STACK_DEPTH already defined in 4.3_core
//	GL::DEBUG_GROUP_STACK_DEPTH already defined in 4.3_core
//	GL::BUFFER already defined in 4.3_core
//	GL::SHADER already defined in 4.3_core
//	GL::PROGRAM already defined in 4.3_core
//	GL::QUERY already defined in 4.3_core
//	GL::PROGRAM_PIPELINE already defined in 4.3_core
//	GL::SAMPLER already defined in 4.3_core
//	GL::DISPLAY_LIST already defined in 4.3_compatibility
//	GL::MAX_LABEL_LENGTH already defined in 4.3_core
//	GL::MAX_DEBUG_MESSAGE_LENGTH already defined in 4.3_core
//	GL::MAX_DEBUG_LOGGED_MESSAGES already defined in 4.3_core
//	GL::DEBUG_LOGGED_MESSAGES already defined in 4.3_core
//	GL::DEBUG_SEVERITY_HIGH already defined in 4.3_core
//	GL::DEBUG_SEVERITY_MEDIUM already defined in 4.3_core
//	GL::DEBUG_SEVERITY_LOW already defined in 4.3_core
//	GL::DEBUG_OUTPUT already defined in 4.3_core
};
//- end: KHR_debug

//-//-- 
//- Ext: KHR_no_error
enum GLext_KHR_no_error
{
#	define FLUXGL_KHR_no_error 1
	CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008u,
};
//- end: KHR_no_error

//-//-- 
//- Ext: KHR_robustness
enum GLext_KHR_robustness
{
#	define FLUXGL_KHR_robustness 1
//	GL::GLNO_ERROR already defined in 1.1_core
//	GL::CONTEXT_LOST already defined in 4.5_core
//	GL::LOSE_CONTEXT_ON_RESET already defined in 4.5_core
//	GL::GUILTY_CONTEXT_RESET already defined in 4.5_core
//	GL::INNOCENT_CONTEXT_RESET already defined in 4.5_core
//	GL::UNKNOWN_CONTEXT_RESET already defined in 4.5_core
//	GL::RESET_NOTIFICATION_STRATEGY already defined in 4.5_core
//	GL::NO_RESET_NOTIFICATION already defined in 4.5_core
	CONTEXT_ROBUST_ACCESS = 0x90F3u,
};
//- end: KHR_robustness

//-//-- 
//- Ext: KHR_texture_compression_astc_hdr
enum GLext_KHR_texture_compression_astc_hdr
{
#	define FLUXGL_KHR_texture_compression_astc_hdr 1
	COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0u,
	COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1u,
	COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2u,
	COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3u,
	COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4u,
	COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5u,
	COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6u,
	COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7u,
	COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8u,
	COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9u,
	COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BAu,
	COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BBu,
	COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BCu,
	COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BDu,
	COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9u,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DAu,
	COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DBu,
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DCu,
	COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DDu,
};
//- end: KHR_texture_compression_astc_hdr

//-//-- 
//- Ext: KHR_texture_compression_astc_ldr
enum GLext_KHR_texture_compression_astc_ldr
{
#	define FLUXGL_KHR_texture_compression_astc_ldr 1
//	GL::COMPRESSED_RGBA_ASTC_4x4_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_5x4_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_5x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_6x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_6x6_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_8x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_8x6_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_8x8_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_10x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_10x6_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_10x8_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_10x10_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_12x10_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_RGBA_ASTC_12x12_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR already defined in KHR_texture_compression_astc_hdr
//	GL::COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR already defined in KHR_texture_compression_astc_hdr
};
//- end: KHR_texture_compression_astc_ldr

//-//-- 
//- Ext: MESAX_texture_stack
enum GLext_MESAX_texture_stack
{
#	define FLUXGL_MESAX_texture_stack 1
	TEXTURE_1D_STACK_MESAX = 0x8759u,
	TEXTURE_2D_STACK_MESAX = 0x875Au,
	PROXY_TEXTURE_1D_STACK_MESAX = 0x875Bu,
	PROXY_TEXTURE_2D_STACK_MESAX = 0x875Cu,
	TEXTURE_1D_STACK_BINDING_MESAX = 0x875Du,
	TEXTURE_2D_STACK_BINDING_MESAX = 0x875Eu,
};
//- end: MESAX_texture_stack

//-//-- 
//- Ext: MESA_pack_invert
enum GLext_MESA_pack_invert
{
#	define FLUXGL_MESA_pack_invert 1
	PACK_INVERT_MESA = 0x8758u,
};
//- end: MESA_pack_invert

//-//-- 
//- Ext: MESA_ycbcr_texture
enum GLext_MESA_ycbcr_texture
{
#	define FLUXGL_MESA_ycbcr_texture 1
	UNSIGNED_SHORT_8_8_MESA = 0x85BAu,
	UNSIGNED_SHORT_8_8_REV_MESA = 0x85BBu,
	YCBCR_MESA = 0x8757u,
};
//- end: MESA_ycbcr_texture

//-//-- 
//- Ext: NVX_gpu_memory_info
enum GLext_NVX_gpu_memory_info
{
#	define FLUXGL_NVX_gpu_memory_info 1
	GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047u,
	GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048u,
	GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049u,
	GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904Au,
	GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904Bu,
};
//- end: NVX_gpu_memory_info

//-//-- 
//- Ext: NV_blend_equation_advanced
enum GLext_NV_blend_equation_advanced
{
#	define FLUXGL_NV_blend_equation_advanced 1
//	GL::ZERO already defined in 1.1_core
	XOR_NV = 0x1506u,
//	GL::INVERT already defined in 1.1_core
	RED_NV = 0x1903u,
	GREEN_NV = 0x1904u,
	BLUE_NV = 0x1905u,
	BLEND_PREMULTIPLIED_SRC_NV = 0x9280u,
	BLEND_OVERLAP_NV = 0x9281u,
	UNCORRELATED_NV = 0x9282u,
	DISJOINT_NV = 0x9283u,
	CONJOINT_NV = 0x9284u,
	SRC_NV = 0x9286u,
	DST_NV = 0x9287u,
	SRC_OVER_NV = 0x9288u,
	DST_OVER_NV = 0x9289u,
	SRC_IN_NV = 0x928Au,
	DST_IN_NV = 0x928Bu,
	SRC_OUT_NV = 0x928Cu,
	DST_OUT_NV = 0x928Du,
	SRC_ATOP_NV = 0x928Eu,
	DST_ATOP_NV = 0x928Fu,
	PLUS_NV = 0x9291u,
	PLUS_DARKER_NV = 0x9292u,
	MULTIPLY_NV = 0x9294u,
	SCREEN_NV = 0x9295u,
	OVERLAY_NV = 0x9296u,
	DARKEN_NV = 0x9297u,
	LIGHTEN_NV = 0x9298u,
	COLORDODGE_NV = 0x9299u,
	COLORBURN_NV = 0x929Au,
	HARDLIGHT_NV = 0x929Bu,
	SOFTLIGHT_NV = 0x929Cu,
	DIFFERENCE_NV = 0x929Eu,
	MINUS_NV = 0x929Fu,
	EXCLUSION_NV = 0x92A0u,
	CONTRAST_NV = 0x92A1u,
	INVERT_RGB_NV = 0x92A3u,
	LINEARDODGE_NV = 0x92A4u,
	LINEARBURN_NV = 0x92A5u,
	VIVIDLIGHT_NV = 0x92A6u,
	LINEARLIGHT_NV = 0x92A7u,
	PINLIGHT_NV = 0x92A8u,
	HARDMIX_NV = 0x92A9u,
	HSL_HUE_NV = 0x92ADu,
	HSL_SATURATION_NV = 0x92AEu,
	HSL_COLOR_NV = 0x92AFu,
	HSL_LUMINOSITY_NV = 0x92B0u,
	PLUS_CLAMPED_NV = 0x92B1u,
	PLUS_CLAMPED_ALPHA_NV = 0x92B2u,
	MINUS_CLAMPED_NV = 0x92B3u,
	INVERT_OVG_NV = 0x92B4u,
};
//- end: NV_blend_equation_advanced

//-//-- 
//- Ext: NV_blend_equation_advanced_coherent
enum GLext_NV_blend_equation_advanced_coherent
{
#	define FLUXGL_NV_blend_equation_advanced_coherent 1
	BLEND_ADVANCED_COHERENT_NV = 0x9285u,
};
//- end: NV_blend_equation_advanced_coherent

//-//-- 
//- Ext: NV_command_list
enum GLext_NV_command_list
{
#	define FLUXGL_NV_command_list 1
	TERMINATE_SEQUENCE_COMMAND_NV = 0x0000u,
	NOP_COMMAND_NV = 0x0001u,
	DRAW_ELEMENTS_COMMAND_NV = 0x0002u,
	DRAW_ARRAYS_COMMAND_NV = 0x0003u,
	DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004u,
	DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005u,
	DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006u,
	DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007u,
	ELEMENT_ADDRESS_COMMAND_NV = 0x0008u,
	ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009u,
	UNIFORM_ADDRESS_COMMAND_NV = 0x000Au,
	BLEND_COLOR_COMMAND_NV = 0x000Bu,
	STENCIL_REF_COMMAND_NV = 0x000Cu,
	LINE_WIDTH_COMMAND_NV = 0x000Du,
	POLYGON_OFFSET_COMMAND_NV = 0x000Eu,
	ALPHA_REF_COMMAND_NV = 0x000Fu,
	VIEWPORT_COMMAND_NV = 0x0010u,
	SCISSOR_COMMAND_NV = 0x0011u,
	FRONT_FACE_COMMAND_NV = 0x0012u,
};
//- end: NV_command_list

//-//-- 
//- Ext: NV_compute_program5
enum GLext_NV_compute_program5
{
#	define FLUXGL_NV_compute_program5 1
	COMPUTE_PROGRAM_NV = 0x90FBu,
	COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FCu,
};
//- end: NV_compute_program5

//-//-- 
//- Ext: NV_conditional_render
enum GLext_NV_conditional_render
{
#	define FLUXGL_NV_conditional_render 1
	QUERY_WAIT_NV = 0x8E13u,
	QUERY_NO_WAIT_NV = 0x8E14u,
	QUERY_BY_REGION_WAIT_NV = 0x8E15u,
	QUERY_BY_REGION_NO_WAIT_NV = 0x8E16u,
};
//- end: NV_conditional_render

//-//-- 
//- Ext: NV_conservative_raster
enum GLext_NV_conservative_raster
{
#	define FLUXGL_NV_conservative_raster 1
	CONSERVATIVE_RASTERIZATION_NV = 0x9346u,
	SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347u,
	SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348u,
	MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349u,
};
//- end: NV_conservative_raster

//-//-- 
//- Ext: NV_conservative_raster_dilate
enum GLext_NV_conservative_raster_dilate
{
#	define FLUXGL_NV_conservative_raster_dilate 1
	CONSERVATIVE_RASTER_DILATE_NV = 0x9379u,
	CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937Au,
	CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937Bu,
};
//- end: NV_conservative_raster_dilate

//-//-- 
//- Ext: NV_copy_depth_to_color
enum GLext_NV_copy_depth_to_color
{
#	define FLUXGL_NV_copy_depth_to_color 1
	DEPTH_STENCIL_TO_RGBA_NV = 0x886Eu,
	DEPTH_STENCIL_TO_BGRA_NV = 0x886Fu,
};
//- end: NV_copy_depth_to_color

//-//-- 
//- Ext: NV_deep_texture3D
enum GLext_NV_deep_texture3D
{
#	define FLUXGL_NV_deep_texture3D 1
	MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0u,
	MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1u,
};
//- end: NV_deep_texture3D

//-//-- 
//- Ext: NV_depth_buffer_float
enum GLext_NV_depth_buffer_float
{
#	define FLUXGL_NV_depth_buffer_float 1
	DEPTH_COMPONENT32F_NV = 0x8DABu,
	DEPTH32F_STENCIL8_NV = 0x8DACu,
	FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DADu,
	DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAFu,
};
//- end: NV_depth_buffer_float

//-//-- 
//- Ext: NV_depth_clamp
enum GLext_NV_depth_clamp
{
#	define FLUXGL_NV_depth_clamp 1
	DEPTH_CLAMP_NV = 0x864Fu,
};
//- end: NV_depth_clamp

//-//-- 
//- Ext: NV_evaluators
enum GLext_NV_evaluators
{
#	define FLUXGL_NV_evaluators 1
	EVAL_2D_NV = 0x86C0u,
	EVAL_TRIANGULAR_2D_NV = 0x86C1u,
	MAP_TESSELLATION_NV = 0x86C2u,
	MAP_ATTRIB_U_ORDER_NV = 0x86C3u,
	MAP_ATTRIB_V_ORDER_NV = 0x86C4u,
	EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5u,
	EVAL_VERTEX_ATTRIB0_NV = 0x86C6u,
	EVAL_VERTEX_ATTRIB1_NV = 0x86C7u,
	EVAL_VERTEX_ATTRIB2_NV = 0x86C8u,
	EVAL_VERTEX_ATTRIB3_NV = 0x86C9u,
	EVAL_VERTEX_ATTRIB4_NV = 0x86CAu,
	EVAL_VERTEX_ATTRIB5_NV = 0x86CBu,
	EVAL_VERTEX_ATTRIB6_NV = 0x86CCu,
	EVAL_VERTEX_ATTRIB7_NV = 0x86CDu,
	EVAL_VERTEX_ATTRIB8_NV = 0x86CEu,
	EVAL_VERTEX_ATTRIB9_NV = 0x86CFu,
	EVAL_VERTEX_ATTRIB10_NV = 0x86D0u,
	EVAL_VERTEX_ATTRIB11_NV = 0x86D1u,
	EVAL_VERTEX_ATTRIB12_NV = 0x86D2u,
	EVAL_VERTEX_ATTRIB13_NV = 0x86D3u,
	EVAL_VERTEX_ATTRIB14_NV = 0x86D4u,
	EVAL_VERTEX_ATTRIB15_NV = 0x86D5u,
	MAX_MAP_TESSELLATION_NV = 0x86D6u,
	MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7u,
};
//- end: NV_evaluators

//-//-- 
//- Ext: NV_explicit_multisample
enum GLext_NV_explicit_multisample
{
#	define FLUXGL_NV_explicit_multisample 1
	SAMPLE_POSITION_NV = 0x8E50u,
	SAMPLE_MASK_NV = 0x8E51u,
	SAMPLE_MASK_VALUE_NV = 0x8E52u,
	TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53u,
	TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54u,
	TEXTURE_RENDERBUFFER_NV = 0x8E55u,
	SAMPLER_RENDERBUFFER_NV = 0x8E56u,
	INT_SAMPLER_RENDERBUFFER_NV = 0x8E57u,
	UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58u,
	MAX_SAMPLE_MASK_WORDS_NV = 0x8E59u,
};
//- end: NV_explicit_multisample

//-//-- 
//- Ext: NV_fence
enum GLext_NV_fence
{
#	define FLUXGL_NV_fence 1
	ALL_COMPLETED_NV = 0x84F2u,
	FENCE_STATUS_NV = 0x84F3u,
	FENCE_CONDITION_NV = 0x84F4u,
};
//- end: NV_fence

//-//-- 
//- Ext: NV_fill_rectangle
enum GLext_NV_fill_rectangle
{
#	define FLUXGL_NV_fill_rectangle 1
	FILL_RECTANGLE_NV = 0x933Cu,
};
//- end: NV_fill_rectangle

//-//-- 
//- Ext: NV_float_buffer
enum GLext_NV_float_buffer
{
#	define FLUXGL_NV_float_buffer 1
	FLOAT_R_NV = 0x8880u,
	FLOAT_RG_NV = 0x8881u,
	FLOAT_RGB_NV = 0x8882u,
	FLOAT_RGBA_NV = 0x8883u,
	FLOAT_R16_NV = 0x8884u,
	FLOAT_R32_NV = 0x8885u,
	FLOAT_RG16_NV = 0x8886u,
	FLOAT_RG32_NV = 0x8887u,
	FLOAT_RGB16_NV = 0x8888u,
	FLOAT_RGB32_NV = 0x8889u,
	FLOAT_RGBA16_NV = 0x888Au,
	FLOAT_RGBA32_NV = 0x888Bu,
	TEXTURE_FLOAT_COMPONENTS_NV = 0x888Cu,
	FLOAT_CLEAR_COLOR_VALUE_NV = 0x888Du,
	FLOAT_RGBA_MODE_NV = 0x888Eu,
};
//- end: NV_float_buffer

//-//-- 
//- Ext: NV_fog_distance
enum GLext_NV_fog_distance
{
#	define FLUXGL_NV_fog_distance 1
//	GL::EYE_PLANE already defined in 1.1_core
	FOG_DISTANCE_MODE_NV = 0x855Au,
	EYE_RADIAL_NV = 0x855Bu,
	EYE_PLANE_ABSOLUTE_NV = 0x855Cu,
};
//- end: NV_fog_distance

//-//-- 
//- Ext: NV_fragment_coverage_to_color
enum GLext_NV_fragment_coverage_to_color
{
#	define FLUXGL_NV_fragment_coverage_to_color 1
	FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DDu,
	FRAGMENT_COVERAGE_COLOR_NV = 0x92DEu,
};
//- end: NV_fragment_coverage_to_color

//-//-- 
//- Ext: NV_fragment_program
enum GLext_NV_fragment_program
{
#	define FLUXGL_NV_fragment_program 1
	MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868u,
	FRAGMENT_PROGRAM_NV = 0x8870u,
	MAX_TEXTURE_COORDS_NV = 0x8871u,
	MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872u,
	FRAGMENT_PROGRAM_BINDING_NV = 0x8873u,
	PROGRAM_ERROR_STRING_NV = 0x8874u,
};
//- end: NV_fragment_program

//-//-- 
//- Ext: NV_fragment_program2
enum GLext_NV_fragment_program2
{
#	define FLUXGL_NV_fragment_program2 1
	MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4u,
	MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5u,
	MAX_PROGRAM_IF_DEPTH_NV = 0x88F6u,
	MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7u,
	MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8u,
};
//- end: NV_fragment_program2

//-//-- 
//- Ext: NV_framebuffer_mixed_samples
enum GLext_NV_framebuffer_mixed_samples
{
#	define FLUXGL_NV_framebuffer_mixed_samples 1
	COLOR_SAMPLES_NV = 0x8E20u,
//	GL::RASTER_MULTISAMPLE_EXT already defined in EXT_raster_multisample
//	GL::RASTER_SAMPLES_EXT already defined in EXT_raster_multisample
//	GL::MAX_RASTER_SAMPLES_EXT already defined in EXT_raster_multisample
//	GL::RASTER_FIXED_SAMPLE_LOCATIONS_EXT already defined in EXT_raster_multisample
//	GL::MULTISAMPLE_RASTERIZATION_ALLOWED_EXT already defined in EXT_raster_multisample
//	GL::EFFECTIVE_RASTER_SAMPLES_EXT already defined in EXT_raster_multisample
	DEPTH_SAMPLES_NV = 0x932Du,
	STENCIL_SAMPLES_NV = 0x932Eu,
	MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932Fu,
	MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330u,
	COVERAGE_MODULATION_TABLE_NV = 0x9331u,
	COVERAGE_MODULATION_NV = 0x9332u,
	COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333u,
};
//- end: NV_framebuffer_mixed_samples

//-//-- 
//- Ext: NV_framebuffer_multisample_coverage
enum GLext_NV_framebuffer_multisample_coverage
{
#	define FLUXGL_NV_framebuffer_multisample_coverage 1
	RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CABu,
	RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10u,
	MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11u,
	MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12u,
};
//- end: NV_framebuffer_multisample_coverage

//-//-- 
//- Ext: NV_geometry_program4
enum GLext_NV_geometry_program4
{
#	define FLUXGL_NV_geometry_program4 1
//	GL::LINES_ADJACENCY_EXT already defined in EXT_geometry_shader4
//	GL::LINE_STRIP_ADJACENCY_EXT already defined in EXT_geometry_shader4
//	GL::TRIANGLES_ADJACENCY_EXT already defined in EXT_geometry_shader4
//	GL::TRIANGLE_STRIP_ADJACENCY_EXT already defined in EXT_geometry_shader4
//	GL::PROGRAM_POINT_SIZE_EXT already defined in EXT_geometry_shader4
	GEOMETRY_PROGRAM_NV = 0x8C26u,
	MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27u,
	MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28u,
//	GL::MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT already defined in EXT_geometry_shader4
//	GL::FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT already defined in EXT_geometry_shader4
//	GL::FRAMEBUFFER_ATTACHMENT_LAYERED_EXT already defined in EXT_geometry_shader4
//	GL::FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT already defined in EXT_geometry_shader4
//	GL::FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT already defined in EXT_geometry_shader4
//	GL::GEOMETRY_VERTICES_OUT_EXT already defined in EXT_geometry_shader4
//	GL::GEOMETRY_INPUT_TYPE_EXT already defined in EXT_geometry_shader4
//	GL::GEOMETRY_OUTPUT_TYPE_EXT already defined in EXT_geometry_shader4
};
//- end: NV_geometry_program4

//-//-- 
//- Ext: NV_gpu_program4
enum GLext_NV_gpu_program4
{
#	define FLUXGL_NV_gpu_program4 1
	MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904u,
	MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905u,
	PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906u,
	PROGRAM_RESULT_COMPONENTS_NV = 0x8907u,
	MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908u,
	MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909u,
	MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5u,
	MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6u,
};
//- end: NV_gpu_program4

//-//-- 
//- Ext: NV_gpu_program5
enum GLext_NV_gpu_program5
{
#	define FLUXGL_NV_gpu_program5 1
	MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5Au,
	MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5Bu,
	MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5Cu,
	FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5Du,
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5Eu,
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5Fu,
	MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44u,
	MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45u,
};
//- end: NV_gpu_program5

//-//-- 
//- Ext: NV_gpu_shader5
enum GLext_NV_gpu_shader5
{
#	define FLUXGL_NV_gpu_shader5 1
//	GL::PATCHES already defined in 4.0_core
//	GL::INT64_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT64_NV already defined in AMD_gpu_shader_int64
//	GL::INT8_NV already defined in AMD_gpu_shader_int64
//	GL::INT8_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::INT8_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::INT8_VEC4_NV already defined in AMD_gpu_shader_int64
//	GL::INT16_NV already defined in AMD_gpu_shader_int64
//	GL::INT16_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::INT16_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::INT16_VEC4_NV already defined in AMD_gpu_shader_int64
//	GL::INT64_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::INT64_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::INT64_VEC4_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT8_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT8_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT8_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT8_VEC4_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT16_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT16_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT16_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT16_VEC4_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT64_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT64_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT64_VEC4_NV already defined in AMD_gpu_shader_int64
//	GL::FLOAT16_NV already defined in AMD_gpu_shader_int64
//	GL::FLOAT16_VEC2_NV already defined in AMD_gpu_shader_int64
//	GL::FLOAT16_VEC3_NV already defined in AMD_gpu_shader_int64
//	GL::FLOAT16_VEC4_NV already defined in AMD_gpu_shader_int64
};
//- end: NV_gpu_shader5

//-//-- 
//- Ext: NV_half_float
enum GLext_NV_half_float
{
#	define FLUXGL_NV_half_float 1
	HALF_FLOAT_NV = 0x140Bu,
};
//- end: NV_half_float

//-//-- 
//- Ext: NV_internalformat_sample_query
enum GLext_NV_internalformat_sample_query
{
#	define FLUXGL_NV_internalformat_sample_query 1
//	GL::RENDERBUFFER already defined in 3.0_core
//	GL::TEXTURE_2D_MULTISAMPLE already defined in 3.2_core
//	GL::TEXTURE_2D_MULTISAMPLE_ARRAY already defined in 3.2_core
	MULTISAMPLES_NV = 0x9371u,
	SUPERSAMPLE_SCALE_X_NV = 0x9372u,
	SUPERSAMPLE_SCALE_Y_NV = 0x9373u,
	CONFORMANT_NV = 0x9374u,
};
//- end: NV_internalformat_sample_query

//-//-- 
//- Ext: NV_light_max_exponent
enum GLext_NV_light_max_exponent
{
#	define FLUXGL_NV_light_max_exponent 1
	MAX_SHININESS_NV = 0x8504u,
	MAX_SPOT_EXPONENT_NV = 0x8505u,
};
//- end: NV_light_max_exponent

//-//-- 
//- Ext: NV_multisample_coverage
enum GLext_NV_multisample_coverage
{
#	define FLUXGL_NV_multisample_coverage 1
//	GL::SAMPLES_ARB already defined in ARB_multisample
//	GL::COLOR_SAMPLES_NV already defined in NV_framebuffer_mixed_samples
};
//- end: NV_multisample_coverage

//-//-- 
//- Ext: NV_multisample_filter_hint
enum GLext_NV_multisample_filter_hint
{
#	define FLUXGL_NV_multisample_filter_hint 1
	MULTISAMPLE_FILTER_HINT_NV = 0x8534u,
};
//- end: NV_multisample_filter_hint

//-//-- 
//- Ext: NV_occlusion_query
enum GLext_NV_occlusion_query
{
#	define FLUXGL_NV_occlusion_query 1
	PIXEL_COUNTER_BITS_NV = 0x8864u,
	CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865u,
	PIXEL_COUNT_NV = 0x8866u,
	PIXEL_COUNT_AVAILABLE_NV = 0x8867u,
};
//- end: NV_occlusion_query

//-//-- 
//- Ext: NV_packed_depth_stencil
enum GLext_NV_packed_depth_stencil
{
#	define FLUXGL_NV_packed_depth_stencil 1
	DEPTH_STENCIL_NV = 0x84F9u,
	UNSIGNED_INT_24_8_NV = 0x84FAu,
};
//- end: NV_packed_depth_stencil

//-//-- 
//- Ext: NV_parameter_buffer_object
enum GLext_NV_parameter_buffer_object
{
#	define FLUXGL_NV_parameter_buffer_object 1
	MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0u,
	MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1u,
	VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2u,
	GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3u,
	FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4u,
};
//- end: NV_parameter_buffer_object

//-//-- 
//- Ext: NV_path_rendering
enum GLext_NV_path_rendering
{
#	define FLUXGL_NV_path_rendering 1
	CLOSE_PATH_NV = 0x00u,
	FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000u,
	FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000u,
	FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000u,
	FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000u,
	FONT_UNITS_PER_EM_BIT_NV = 0x00100000u,
	FONT_ASCENDER_BIT_NV = 0x00200000u,
	FONT_DESCENDER_BIT_NV = 0x00400000u,
	FONT_HEIGHT_BIT_NV = 0x00800000u,
	GLYPH_WIDTH_BIT_NV = 0x01u,
	BOLD_BIT_NV = 0x01u,
	FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000u,
	MOVE_TO_NV = 0x02u,
	GLYPH_HEIGHT_BIT_NV = 0x02u,
	ITALIC_BIT_NV = 0x02u,
	FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000u,
	RELATIVE_MOVE_TO_NV = 0x03u,
	LINE_TO_NV = 0x04u,
	GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04u,
	FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000u,
	RELATIVE_LINE_TO_NV = 0x05u,
	HORIZONTAL_LINE_TO_NV = 0x06u,
	RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07u,
	VERTICAL_LINE_TO_NV = 0x08u,
	GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08u,
	FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000u,
	RELATIVE_VERTICAL_LINE_TO_NV = 0x09u,
	QUADRATIC_CURVE_TO_NV = 0x0Au,
	RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0Bu,
	PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3u,
	PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4u,
	PATH_MODELVIEW_MATRIX_NV = 0x0BA6u,
	PATH_PROJECTION_MATRIX_NV = 0x0BA7u,
	CUBIC_CURVE_TO_NV = 0x0Cu,
	RELATIVE_CUBIC_CURVE_TO_NV = 0x0Du,
	PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36u,
	PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38u,
	SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0Eu,
	RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0Fu,
	GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10u,
	SMOOTH_CUBIC_CURVE_TO_NV = 0x10u,
	GLYPH_HAS_KERNING_BIT_NV = 0x100u,
	FONT_HAS_KERNING_BIT_NV = 0x10000000u,
	RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11u,
	SMALL_CCW_ARC_TO_NV = 0x12u,
	RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13u,
	SMALL_CW_ARC_TO_NV = 0x14u,
	GL2_BYTES_NV = 0x1407u,
	GL3_BYTES_NV = 0x1408u,
	GL4_BYTES_NV = 0x1409u,
	RELATIVE_SMALL_CW_ARC_TO_NV = 0x15u,
	LARGE_CCW_ARC_TO_NV = 0x16u,
	RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17u,
	PATH_MODELVIEW_NV = 0x1700u,
	PATH_PROJECTION_NV = 0x1701u,
	LARGE_CW_ARC_TO_NV = 0x18u,
	RELATIVE_LARGE_CW_ARC_TO_NV = 0x19u,
	CONIC_CURVE_TO_NV = 0x1Au,
	RELATIVE_CONIC_CURVE_TO_NV = 0x1Bu,
	GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20u,
	FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000u,
	EYE_LINEAR_NV = 0x2400u,
	OBJECT_LINEAR_NV = 0x2401u,
	GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40u,
	GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80u,
	PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3u,
	PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4u,
	PRIMARY_COLOR_NV = 0x852Cu,
	SECONDARY_COLOR_NV = 0x852Du,
	CONSTANT_NV = 0x8576u,
//	GL::PRIMARY_COLOR already defined in 1.3_core
	PATH_FORMAT_SVG_NV = 0x9070u,
	PATH_FORMAT_PS_NV = 0x9071u,
	STANDARD_FONT_NAME_NV = 0x9072u,
	SYSTEM_FONT_NAME_NV = 0x9073u,
	FILE_NAME_NV = 0x9074u,
	PATH_STROKE_WIDTH_NV = 0x9075u,
	PATH_END_CAPS_NV = 0x9076u,
	PATH_INITIAL_END_CAP_NV = 0x9077u,
	PATH_TERMINAL_END_CAP_NV = 0x9078u,
	PATH_JOIN_STYLE_NV = 0x9079u,
	PATH_MITER_LIMIT_NV = 0x907Au,
	PATH_DASH_CAPS_NV = 0x907Bu,
	PATH_INITIAL_DASH_CAP_NV = 0x907Cu,
	PATH_TERMINAL_DASH_CAP_NV = 0x907Du,
	PATH_DASH_OFFSET_NV = 0x907Eu,
	PATH_CLIENT_LENGTH_NV = 0x907Fu,
	PATH_FILL_MODE_NV = 0x9080u,
	PATH_FILL_MASK_NV = 0x9081u,
	PATH_FILL_COVER_MODE_NV = 0x9082u,
	PATH_STROKE_COVER_MODE_NV = 0x9083u,
	PATH_STROKE_MASK_NV = 0x9084u,
	COUNT_UP_NV = 0x9088u,
	COUNT_DOWN_NV = 0x9089u,
	PATH_OBJECT_BOUNDING_BOX_NV = 0x908Au,
	CONVEX_HULL_NV = 0x908Bu,
	BOUNDING_BOX_NV = 0x908Du,
	TRANSLATE_X_NV = 0x908Eu,
	TRANSLATE_Y_NV = 0x908Fu,
	TRANSLATE_2D_NV = 0x9090u,
	TRANSLATE_3D_NV = 0x9091u,
	AFFINE_2D_NV = 0x9092u,
	AFFINE_3D_NV = 0x9094u,
	TRANSPOSE_AFFINE_2D_NV = 0x9096u,
	TRANSPOSE_AFFINE_3D_NV = 0x9098u,
	UTF8_NV = 0x909Au,
	UTF16_NV = 0x909Bu,
	BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909Cu,
	PATH_COMMAND_COUNT_NV = 0x909Du,
	PATH_COORD_COUNT_NV = 0x909Eu,
	PATH_DASH_ARRAY_COUNT_NV = 0x909Fu,
	PATH_COMPUTED_LENGTH_NV = 0x90A0u,
	PATH_FILL_BOUNDING_BOX_NV = 0x90A1u,
	PATH_STROKE_BOUNDING_BOX_NV = 0x90A2u,
	SQUARE_NV = 0x90A3u,
	ROUND_NV = 0x90A4u,
	TRIANGULAR_NV = 0x90A5u,
	BEVEL_NV = 0x90A6u,
	MITER_REVERT_NV = 0x90A7u,
	MITER_TRUNCATE_NV = 0x90A8u,
	SKIP_MISSING_GLYPH_NV = 0x90A9u,
	USE_MISSING_GLYPH_NV = 0x90AAu,
	PATH_ERROR_POSITION_NV = 0x90ABu,
	PATH_FOG_GEN_MODE_NV = 0x90ACu,
	ACCUM_ADJACENT_PAIRS_NV = 0x90ADu,
	ADJACENT_PAIRS_NV = 0x90AEu,
	FIRST_TO_REST_NV = 0x90AFu,
	PATH_GEN_MODE_NV = 0x90B0u,
	PATH_GEN_COEFF_NV = 0x90B1u,
	PATH_GEN_COLOR_FORMAT_NV = 0x90B2u,
	PATH_GEN_COMPONENTS_NV = 0x90B3u,
	PATH_DASH_OFFSET_RESET_NV = 0x90B4u,
	MOVE_TO_RESETS_NV = 0x90B5u,
	MOVE_TO_CONTINUES_NV = 0x90B6u,
	PATH_STENCIL_FUNC_NV = 0x90B7u,
	PATH_STENCIL_REF_NV = 0x90B8u,
	PATH_STENCIL_VALUE_MASK_NV = 0x90B9u,
	PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BDu,
	PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BEu,
	PATH_COVER_DEPTH_FUNC_NV = 0x90BFu,
	FONT_GLYPHS_AVAILABLE_NV = 0x9368u,
	FONT_TARGET_UNAVAILABLE_NV = 0x9369u,
	FONT_UNAVAILABLE_NV = 0x936Au,
	FONT_UNINTELLIGIBLE_NV = 0x936Bu,
	STANDARD_FONT_FORMAT_NV = 0x936Cu,
	FRAGMENT_INPUT_NV = 0x936Du,
	ROUNDED_RECT_NV = 0xE8u,
	RELATIVE_ROUNDED_RECT_NV = 0xE9u,
	ROUNDED_RECT2_NV = 0xEAu,
	RELATIVE_ROUNDED_RECT2_NV = 0xEBu,
	ROUNDED_RECT4_NV = 0xECu,
	RELATIVE_ROUNDED_RECT4_NV = 0xEDu,
	ROUNDED_RECT8_NV = 0xEEu,
	RELATIVE_ROUNDED_RECT8_NV = 0xEFu,
	RESTART_PATH_NV = 0xF0u,
	DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2u,
	DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4u,
	RECT_NV = 0xF6u,
	RELATIVE_RECT_NV = 0xF7u,
	CIRCULAR_CCW_ARC_TO_NV = 0xF8u,
	CIRCULAR_CW_ARC_TO_NV = 0xFAu,
	CIRCULAR_TANGENT_ARC_TO_NV = 0xFCu,
	ARC_TO_NV = 0xFEu,
	RELATIVE_ARC_TO_NV = 0xFFu,
};
//- end: NV_path_rendering

//-//-- 
//- Ext: NV_path_rendering_shared_edge
enum GLext_NV_path_rendering_shared_edge
{
#	define FLUXGL_NV_path_rendering_shared_edge 1
	SHARED_EDGE_NV = 0xC0u,
};
//- end: NV_path_rendering_shared_edge

//-//-- 
//- Ext: NV_pixel_data_range
enum GLext_NV_pixel_data_range
{
#	define FLUXGL_NV_pixel_data_range 1
	WRITE_PIXEL_DATA_RANGE_NV = 0x8878u,
	READ_PIXEL_DATA_RANGE_NV = 0x8879u,
	WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887Au,
	READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887Bu,
	WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887Cu,
	READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887Du,
};
//- end: NV_pixel_data_range

//-//-- 
//- Ext: NV_point_sprite
enum GLext_NV_point_sprite
{
#	define FLUXGL_NV_point_sprite 1
	POINT_SPRITE_NV = 0x8861u,
	COORD_REPLACE_NV = 0x8862u,
	POINT_SPRITE_R_MODE_NV = 0x8863u,
};
//- end: NV_point_sprite

//-//-- 
//- Ext: NV_present_video
enum GLext_NV_present_video
{
#	define FLUXGL_NV_present_video 1
	FRAME_NV = 0x8E26u,
	FIELDS_NV = 0x8E27u,
	CURRENT_TIME_NV = 0x8E28u,
	NUM_FILL_STREAMS_NV = 0x8E29u,
	PRESENT_TIME_NV = 0x8E2Au,
	PRESENT_DURATION_NV = 0x8E2Bu,
};
//- end: NV_present_video

//-//-- 
//- Ext: NV_primitive_restart
enum GLext_NV_primitive_restart
{
#	define FLUXGL_NV_primitive_restart 1
	PRIMITIVE_RESTART_NV = 0x8558u,
	PRIMITIVE_RESTART_INDEX_NV = 0x8559u,
};
//- end: NV_primitive_restart

//-//-- 
//- Ext: NV_register_combiners
enum GLext_NV_register_combiners
{
#	define FLUXGL_NV_register_combiners 1
//	GL::NONE already defined in 1.1_core
//	GL::ZERO already defined in 1.1_core
//	GL::FOG already defined in 1.1_core
//	GL::TEXTURE0_ARB already defined in ARB_multitexture
//	GL::TEXTURE1_ARB already defined in ARB_multitexture
	REGISTER_COMBINERS_NV = 0x8522u,
	VARIABLE_A_NV = 0x8523u,
	VARIABLE_B_NV = 0x8524u,
	VARIABLE_C_NV = 0x8525u,
	VARIABLE_D_NV = 0x8526u,
	VARIABLE_E_NV = 0x8527u,
	VARIABLE_F_NV = 0x8528u,
	VARIABLE_G_NV = 0x8529u,
	CONSTANT_COLOR0_NV = 0x852Au,
	CONSTANT_COLOR1_NV = 0x852Bu,
//	GL::PRIMARY_COLOR_NV already defined in NV_path_rendering
//	GL::SECONDARY_COLOR_NV already defined in NV_path_rendering
	SPARE0_NV = 0x852Eu,
	SPARE1_NV = 0x852Fu,
	DISCARD_NV = 0x8530u,
	E_TIMES_F_NV = 0x8531u,
	SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532u,
	UNSIGNED_IDENTITY_NV = 0x8536u,
	UNSIGNED_INVERT_NV = 0x8537u,
	EXPAND_NORMAL_NV = 0x8538u,
	EXPAND_NEGATE_NV = 0x8539u,
	HALF_BIAS_NORMAL_NV = 0x853Au,
	HALF_BIAS_NEGATE_NV = 0x853Bu,
	SIGNED_IDENTITY_NV = 0x853Cu,
	SIGNED_NEGATE_NV = 0x853Du,
	SCALE_BY_TWO_NV = 0x853Eu,
	SCALE_BY_FOUR_NV = 0x853Fu,
	SCALE_BY_ONE_HALF_NV = 0x8540u,
	BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541u,
	COMBINER_INPUT_NV = 0x8542u,
	COMBINER_MAPPING_NV = 0x8543u,
	COMBINER_COMPONENT_USAGE_NV = 0x8544u,
	COMBINER_AB_DOT_PRODUCT_NV = 0x8545u,
	COMBINER_CD_DOT_PRODUCT_NV = 0x8546u,
	COMBINER_MUX_SUM_NV = 0x8547u,
	COMBINER_SCALE_NV = 0x8548u,
	COMBINER_BIAS_NV = 0x8549u,
	COMBINER_AB_OUTPUT_NV = 0x854Au,
	COMBINER_CD_OUTPUT_NV = 0x854Bu,
	COMBINER_SUM_OUTPUT_NV = 0x854Cu,
	MAX_GENERAL_COMBINERS_NV = 0x854Du,
	NUM_GENERAL_COMBINERS_NV = 0x854Eu,
	COLOR_SUM_CLAMP_NV = 0x854Fu,
	COMBINER0_NV = 0x8550u,
	COMBINER1_NV = 0x8551u,
	COMBINER2_NV = 0x8552u,
	COMBINER3_NV = 0x8553u,
	COMBINER4_NV = 0x8554u,
	COMBINER5_NV = 0x8555u,
	COMBINER6_NV = 0x8556u,
	COMBINER7_NV = 0x8557u,
};
//- end: NV_register_combiners

//-//-- 
//- Ext: NV_register_combiners2
enum GLext_NV_register_combiners2
{
#	define FLUXGL_NV_register_combiners2 1
	PER_STAGE_CONSTANTS_NV = 0x8535u,
};
//- end: NV_register_combiners2

//-//-- 
//- Ext: NV_sample_locations
enum GLext_NV_sample_locations
{
#	define FLUXGL_NV_sample_locations 1
	SAMPLE_LOCATION_NV = 0x8E50u,
	SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933Du,
	SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933Eu,
	SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933Fu,
	PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340u,
	PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341u,
	FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342u,
	FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343u,
};
//- end: NV_sample_locations

//-//-- 
//- Ext: NV_shader_buffer_load
enum GLext_NV_shader_buffer_load
{
#	define FLUXGL_NV_shader_buffer_load 1
	BUFFER_GPU_ADDRESS_NV = 0x8F1Du,
	GPU_ADDRESS_NV = 0x8F34u,
	MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35u,
};
//- end: NV_shader_buffer_load

//-//-- 
//- Ext: NV_shader_buffer_store
enum GLext_NV_shader_buffer_store
{
#	define FLUXGL_NV_shader_buffer_store 1
	SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010u,
//	GL::WRITE_ONLY already defined in 1.5_core
//	GL::READ_WRITE already defined in 1.5_core
};
//- end: NV_shader_buffer_store

//-//-- 
//- Ext: NV_shader_thread_group
enum GLext_NV_shader_thread_group
{
#	define FLUXGL_NV_shader_thread_group 1
	WARP_SIZE_NV = 0x9339u,
	WARPS_PER_SM_NV = 0x933Au,
	SM_COUNT_NV = 0x933Bu,
};
//- end: NV_shader_thread_group

//-//-- 
//- Ext: NV_tessellation_program5
enum GLext_NV_tessellation_program5
{
#	define FLUXGL_NV_tessellation_program5 1
	MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8u,
	TESS_CONTROL_PROGRAM_NV = 0x891Eu,
	TESS_EVALUATION_PROGRAM_NV = 0x891Fu,
	TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74u,
	TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75u,
};
//- end: NV_tessellation_program5

//-//-- 
//- Ext: NV_texgen_emboss
enum GLext_NV_texgen_emboss
{
#	define FLUXGL_NV_texgen_emboss 1
	EMBOSS_LIGHT_NV = 0x855Du,
	EMBOSS_CONSTANT_NV = 0x855Eu,
	EMBOSS_MAP_NV = 0x855Fu,
};
//- end: NV_texgen_emboss

//-//-- 
//- Ext: NV_texgen_reflection
enum GLext_NV_texgen_reflection
{
#	define FLUXGL_NV_texgen_reflection 1
	NORMAL_MAP_NV = 0x8511u,
	REFLECTION_MAP_NV = 0x8512u,
};
//- end: NV_texgen_reflection

//-//-- 
//- Ext: NV_texture_env_combine4
enum GLext_NV_texture_env_combine4
{
#	define FLUXGL_NV_texture_env_combine4 1
	COMBINE4_NV = 0x8503u,
	SOURCE3_RGB_NV = 0x8583u,
	SOURCE3_ALPHA_NV = 0x858Bu,
	OPERAND3_RGB_NV = 0x8593u,
	OPERAND3_ALPHA_NV = 0x859Bu,
};
//- end: NV_texture_env_combine4

//-//-- 
//- Ext: NV_texture_expand_normal
enum GLext_NV_texture_expand_normal
{
#	define FLUXGL_NV_texture_expand_normal 1
	TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888Fu,
};
//- end: NV_texture_expand_normal

//-//-- 
//- Ext: NV_texture_multisample
enum GLext_NV_texture_multisample
{
#	define FLUXGL_NV_texture_multisample 1
	TEXTURE_COVERAGE_SAMPLES_NV = 0x9045u,
	TEXTURE_COLOR_SAMPLES_NV = 0x9046u,
};
//- end: NV_texture_multisample

//-//-- 
//- Ext: NV_texture_rectangle
enum GLext_NV_texture_rectangle
{
#	define FLUXGL_NV_texture_rectangle 1
	TEXTURE_RECTANGLE_NV = 0x84F5u,
	TEXTURE_BINDING_RECTANGLE_NV = 0x84F6u,
	PROXY_TEXTURE_RECTANGLE_NV = 0x84F7u,
	MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8u,
};
//- end: NV_texture_rectangle

//-//-- 
//- Ext: NV_texture_shader
enum GLext_NV_texture_shader
{
#	define FLUXGL_NV_texture_shader 1
	OFFSET_TEXTURE_RECTANGLE_NV = 0x864Cu,
	OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864Du,
	DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864Eu,
	RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9u,
	UNSIGNED_INT_S8_S8_8_8_NV = 0x86DAu,
	UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DBu,
	DSDT_MAG_INTENSITY_NV = 0x86DCu,
	SHADER_CONSISTENT_NV = 0x86DDu,
	TEXTURE_SHADER_NV = 0x86DEu,
	SHADER_OPERATION_NV = 0x86DFu,
	CULL_MODES_NV = 0x86E0u,
	OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1u,
	OFFSET_TEXTURE_MATRIX_NV = 0x86E1u,
	OFFSET_TEXTURE_SCALE_NV = 0x86E2u,
	OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2u,
	OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3u,
	OFFSET_TEXTURE_BIAS_NV = 0x86E3u,
	PREVIOUS_TEXTURE_INPUT_NV = 0x86E4u,
	CONST_EYE_NV = 0x86E5u,
	PASS_THROUGH_NV = 0x86E6u,
	CULL_FRAGMENT_NV = 0x86E7u,
	OFFSET_TEXTURE_2D_NV = 0x86E8u,
	DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9u,
	DEPENDENT_GB_TEXTURE_2D_NV = 0x86EAu,
	DOT_PRODUCT_NV = 0x86ECu,
	DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86EDu,
	DOT_PRODUCT_TEXTURE_2D_NV = 0x86EEu,
	DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0u,
	DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1u,
	DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2u,
	DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3u,
	HILO_NV = 0x86F4u,
	DSDT_NV = 0x86F5u,
	DSDT_MAG_NV = 0x86F6u,
	DSDT_MAG_VIB_NV = 0x86F7u,
	HILO16_NV = 0x86F8u,
	SIGNED_HILO_NV = 0x86F9u,
	SIGNED_HILO16_NV = 0x86FAu,
	SIGNED_RGBA_NV = 0x86FBu,
	SIGNED_RGBA8_NV = 0x86FCu,
	SIGNED_RGB_NV = 0x86FEu,
	SIGNED_RGB8_NV = 0x86FFu,
	SIGNED_LUMINANCE_NV = 0x8701u,
	SIGNED_LUMINANCE8_NV = 0x8702u,
	SIGNED_LUMINANCE_ALPHA_NV = 0x8703u,
	SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704u,
	SIGNED_ALPHA_NV = 0x8705u,
	SIGNED_ALPHA8_NV = 0x8706u,
	SIGNED_INTENSITY_NV = 0x8707u,
	SIGNED_INTENSITY8_NV = 0x8708u,
	DSDT8_NV = 0x8709u,
	DSDT8_MAG8_NV = 0x870Au,
	DSDT8_MAG8_INTENSITY8_NV = 0x870Bu,
	SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870Cu,
	SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870Du,
	HI_SCALE_NV = 0x870Eu,
	LO_SCALE_NV = 0x870Fu,
	DS_SCALE_NV = 0x8710u,
	DT_SCALE_NV = 0x8711u,
	MAGNITUDE_SCALE_NV = 0x8712u,
	VIBRANCE_SCALE_NV = 0x8713u,
	HI_BIAS_NV = 0x8714u,
	LO_BIAS_NV = 0x8715u,
	DS_BIAS_NV = 0x8716u,
	DT_BIAS_NV = 0x8717u,
	MAGNITUDE_BIAS_NV = 0x8718u,
	VIBRANCE_BIAS_NV = 0x8719u,
	TEXTURE_BORDER_VALUES_NV = 0x871Au,
	TEXTURE_HI_SIZE_NV = 0x871Bu,
	TEXTURE_LO_SIZE_NV = 0x871Cu,
	TEXTURE_DS_SIZE_NV = 0x871Du,
	TEXTURE_DT_SIZE_NV = 0x871Eu,
	TEXTURE_MAG_SIZE_NV = 0x871Fu,
};
//- end: NV_texture_shader

//-//-- 
//- Ext: NV_texture_shader2
enum GLext_NV_texture_shader2
{
#	define FLUXGL_NV_texture_shader2 1
	DOT_PRODUCT_TEXTURE_3D_NV = 0x86EFu,
};
//- end: NV_texture_shader2

//-//-- 
//- Ext: NV_texture_shader3
enum GLext_NV_texture_shader3
{
#	define FLUXGL_NV_texture_shader3 1
	OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850u,
	OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851u,
	OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852u,
	OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853u,
	OFFSET_HILO_TEXTURE_2D_NV = 0x8854u,
	OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855u,
	OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856u,
	OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857u,
	DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858u,
	DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859u,
	DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885Au,
	DOT_PRODUCT_PASS_THROUGH_NV = 0x885Bu,
	DOT_PRODUCT_TEXTURE_1D_NV = 0x885Cu,
	DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885Du,
	HILO8_NV = 0x885Eu,
	SIGNED_HILO8_NV = 0x885Fu,
	FORCE_BLUE_TO_ONE_NV = 0x8860u,
};
//- end: NV_texture_shader3

//-//-- 
//- Ext: NV_transform_feedback
enum GLext_NV_transform_feedback
{
#	define FLUXGL_NV_transform_feedback 1
	NEXT_BUFFER_NV = -2,
	SKIP_COMPONENTS4_NV = -3,
	SKIP_COMPONENTS3_NV = -4,
	SKIP_COMPONENTS2_NV = -5,
	SKIP_COMPONENTS1_NV = -6,
	BACK_PRIMARY_COLOR_NV = 0x8C77,
	BACK_SECONDARY_COLOR_NV = 0x8C78,
	TEXTURE_COORD_NV = 0x8C79,
	CLIP_DISTANCE_NV = 0x8C7A,
	VERTEX_ID_NV = 0x8C7B,
	PRIMITIVE_ID_NV = 0x8C7C,
	GENERIC_ATTRIB_NV = 0x8C7D,
	TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E,
	TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80,
	ACTIVE_VARYINGS_NV = 0x8C81,
	ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82,
	TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83,
	TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84,
	TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85,
	TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86,
	PRIMITIVES_GENERATED_NV = 0x8C87,
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88,
	RASTERIZER_DISCARD_NV = 0x8C89,
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A,
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B,
	INTERLEAVED_ATTRIBS_NV = 0x8C8C,
	SEPARATE_ATTRIBS_NV = 0x8C8D,
	TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E,
	TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F,
	LAYER_NV = 0x8DAA,
};
//- end: NV_transform_feedback

//-//-- 
//- Ext: NV_transform_feedback2
enum GLext_NV_transform_feedback2
{
#	define FLUXGL_NV_transform_feedback2 1
	TRANSFORM_FEEDBACK_NV = 0x8E22u,
	TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23u,
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24u,
	TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25u,
};
//- end: NV_transform_feedback2

//-//-- 
//- Ext: NV_uniform_buffer_unified_memory
enum GLext_NV_uniform_buffer_unified_memory
{
#	define FLUXGL_NV_uniform_buffer_unified_memory 1
	UNIFORM_BUFFER_UNIFIED_NV = 0x936Eu,
	UNIFORM_BUFFER_ADDRESS_NV = 0x936Fu,
	UNIFORM_BUFFER_LENGTH_NV = 0x9370u,
};
//- end: NV_uniform_buffer_unified_memory

//-//-- 
//- Ext: NV_vdpau_interop
enum GLext_NV_vdpau_interop
{
#	define FLUXGL_NV_vdpau_interop 1
	SURFACE_STATE_NV = 0x86EBu,
	SURFACE_REGISTERED_NV = 0x86FDu,
	SURFACE_MAPPED_NV = 0x8700u,
	WRITE_DISCARD_NV = 0x88BEu,
};
//- end: NV_vdpau_interop

//-//-- 
//- Ext: NV_vertex_array_range
enum GLext_NV_vertex_array_range
{
#	define FLUXGL_NV_vertex_array_range 1
	VERTEX_ARRAY_RANGE_NV = 0x851Du,
	VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851Eu,
	VERTEX_ARRAY_RANGE_VALID_NV = 0x851Fu,
	MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520u,
	VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521u,
};
//- end: NV_vertex_array_range

//-//-- 
//- Ext: NV_vertex_array_range2
enum GLext_NV_vertex_array_range2
{
#	define FLUXGL_NV_vertex_array_range2 1
	VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533u,
};
//- end: NV_vertex_array_range2

//-//-- 
//- Ext: NV_vertex_attrib_integer_64bit
enum GLext_NV_vertex_attrib_integer_64bit
{
#	define FLUXGL_NV_vertex_attrib_integer_64bit 1
//	GL::INT64_NV already defined in AMD_gpu_shader_int64
//	GL::UNSIGNED_INT64_NV already defined in AMD_gpu_shader_int64
};
//- end: NV_vertex_attrib_integer_64bit

//-//-- 
//- Ext: NV_vertex_buffer_unified_memory
enum GLext_NV_vertex_buffer_unified_memory
{
#	define FLUXGL_NV_vertex_buffer_unified_memory 1
	VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1Eu,
	ELEMENT_ARRAY_UNIFIED_NV = 0x8F1Fu,
	VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20u,
	VERTEX_ARRAY_ADDRESS_NV = 0x8F21u,
	NORMAL_ARRAY_ADDRESS_NV = 0x8F22u,
	COLOR_ARRAY_ADDRESS_NV = 0x8F23u,
	INDEX_ARRAY_ADDRESS_NV = 0x8F24u,
	TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25u,
	EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26u,
	SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27u,
	FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28u,
	ELEMENT_ARRAY_ADDRESS_NV = 0x8F29u,
	VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2Au,
	VERTEX_ARRAY_LENGTH_NV = 0x8F2Bu,
	NORMAL_ARRAY_LENGTH_NV = 0x8F2Cu,
	COLOR_ARRAY_LENGTH_NV = 0x8F2Du,
	INDEX_ARRAY_LENGTH_NV = 0x8F2Eu,
	TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2Fu,
	EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30u,
	SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31u,
	FOG_COORD_ARRAY_LENGTH_NV = 0x8F32u,
	ELEMENT_ARRAY_LENGTH_NV = 0x8F33u,
	DRAW_INDIRECT_UNIFIED_NV = 0x8F40u,
	DRAW_INDIRECT_ADDRESS_NV = 0x8F41u,
	DRAW_INDIRECT_LENGTH_NV = 0x8F42u,
};
//- end: NV_vertex_buffer_unified_memory

//-//-- 
//- Ext: NV_vertex_program
enum GLext_NV_vertex_program
{
#	define FLUXGL_NV_vertex_program 1
	VERTEX_PROGRAM_NV = 0x8620u,
	VERTEX_STATE_PROGRAM_NV = 0x8621u,
	ATTRIB_ARRAY_SIZE_NV = 0x8623u,
	ATTRIB_ARRAY_STRIDE_NV = 0x8624u,
	ATTRIB_ARRAY_TYPE_NV = 0x8625u,
	CURRENT_ATTRIB_NV = 0x8626u,
	PROGRAM_LENGTH_NV = 0x8627u,
	PROGRAM_STRING_NV = 0x8628u,
	MODELVIEW_PROJECTION_NV = 0x8629u,
	IDENTITY_NV = 0x862Au,
	INVERSE_NV = 0x862Bu,
	TRANSPOSE_NV = 0x862Cu,
	INVERSE_TRANSPOSE_NV = 0x862Du,
	MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862Eu,
	MAX_TRACK_MATRICES_NV = 0x862Fu,
	MATRIX0_NV = 0x8630u,
	MATRIX1_NV = 0x8631u,
	MATRIX2_NV = 0x8632u,
	MATRIX3_NV = 0x8633u,
	MATRIX4_NV = 0x8634u,
	MATRIX5_NV = 0x8635u,
	MATRIX6_NV = 0x8636u,
	MATRIX7_NV = 0x8637u,
	CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640u,
	CURRENT_MATRIX_NV = 0x8641u,
	VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642u,
	VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643u,
	PROGRAM_PARAMETER_NV = 0x8644u,
	ATTRIB_ARRAY_POINTER_NV = 0x8645u,
	PROGRAM_TARGET_NV = 0x8646u,
	PROGRAM_RESIDENT_NV = 0x8647u,
	TRACK_MATRIX_NV = 0x8648u,
	TRACK_MATRIX_TRANSFORM_NV = 0x8649u,
	VERTEX_PROGRAM_BINDING_NV = 0x864Au,
	PROGRAM_ERROR_POSITION_NV = 0x864Bu,
	VERTEX_ATTRIB_ARRAY0_NV = 0x8650u,
	VERTEX_ATTRIB_ARRAY1_NV = 0x8651u,
	VERTEX_ATTRIB_ARRAY2_NV = 0x8652u,
	VERTEX_ATTRIB_ARRAY3_NV = 0x8653u,
	VERTEX_ATTRIB_ARRAY4_NV = 0x8654u,
	VERTEX_ATTRIB_ARRAY5_NV = 0x8655u,
	VERTEX_ATTRIB_ARRAY6_NV = 0x8656u,
	VERTEX_ATTRIB_ARRAY7_NV = 0x8657u,
	VERTEX_ATTRIB_ARRAY8_NV = 0x8658u,
	VERTEX_ATTRIB_ARRAY9_NV = 0x8659u,
	VERTEX_ATTRIB_ARRAY10_NV = 0x865Au,
	VERTEX_ATTRIB_ARRAY11_NV = 0x865Bu,
	VERTEX_ATTRIB_ARRAY12_NV = 0x865Cu,
	VERTEX_ATTRIB_ARRAY13_NV = 0x865Du,
	VERTEX_ATTRIB_ARRAY14_NV = 0x865Eu,
	VERTEX_ATTRIB_ARRAY15_NV = 0x865Fu,
	MAP1_VERTEX_ATTRIB0_4_NV = 0x8660u,
	MAP1_VERTEX_ATTRIB1_4_NV = 0x8661u,
	MAP1_VERTEX_ATTRIB2_4_NV = 0x8662u,
	MAP1_VERTEX_ATTRIB3_4_NV = 0x8663u,
	MAP1_VERTEX_ATTRIB4_4_NV = 0x8664u,
	MAP1_VERTEX_ATTRIB5_4_NV = 0x8665u,
	MAP1_VERTEX_ATTRIB6_4_NV = 0x8666u,
	MAP1_VERTEX_ATTRIB7_4_NV = 0x8667u,
	MAP1_VERTEX_ATTRIB8_4_NV = 0x8668u,
	MAP1_VERTEX_ATTRIB9_4_NV = 0x8669u,
	MAP1_VERTEX_ATTRIB10_4_NV = 0x866Au,
	MAP1_VERTEX_ATTRIB11_4_NV = 0x866Bu,
	MAP1_VERTEX_ATTRIB12_4_NV = 0x866Cu,
	MAP1_VERTEX_ATTRIB13_4_NV = 0x866Du,
	MAP1_VERTEX_ATTRIB14_4_NV = 0x866Eu,
	MAP1_VERTEX_ATTRIB15_4_NV = 0x866Fu,
	MAP2_VERTEX_ATTRIB0_4_NV = 0x8670u,
	MAP2_VERTEX_ATTRIB1_4_NV = 0x8671u,
	MAP2_VERTEX_ATTRIB2_4_NV = 0x8672u,
	MAP2_VERTEX_ATTRIB3_4_NV = 0x8673u,
	MAP2_VERTEX_ATTRIB4_4_NV = 0x8674u,
	MAP2_VERTEX_ATTRIB5_4_NV = 0x8675u,
	MAP2_VERTEX_ATTRIB6_4_NV = 0x8676u,
	MAP2_VERTEX_ATTRIB7_4_NV = 0x8677u,
	MAP2_VERTEX_ATTRIB8_4_NV = 0x8678u,
	MAP2_VERTEX_ATTRIB9_4_NV = 0x8679u,
	MAP2_VERTEX_ATTRIB10_4_NV = 0x867Au,
	MAP2_VERTEX_ATTRIB11_4_NV = 0x867Bu,
	MAP2_VERTEX_ATTRIB12_4_NV = 0x867Cu,
	MAP2_VERTEX_ATTRIB13_4_NV = 0x867Du,
	MAP2_VERTEX_ATTRIB14_4_NV = 0x867Eu,
	MAP2_VERTEX_ATTRIB15_4_NV = 0x867Fu,
};
//- end: NV_vertex_program

//-//-- 
//- Ext: NV_vertex_program2_option
enum GLext_NV_vertex_program2_option
{
#	define FLUXGL_NV_vertex_program2_option 1
//	GL::MAX_PROGRAM_EXEC_INSTRUCTIONS_NV already defined in NV_fragment_program2
//	GL::MAX_PROGRAM_CALL_DEPTH_NV already defined in NV_fragment_program2
};
//- end: NV_vertex_program2_option

//-//-- 
//- Ext: NV_vertex_program3
enum GLext_NV_vertex_program3
{
#	define FLUXGL_NV_vertex_program3 1
//	GL::GLMAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB already defined in ARB_vertex_shader
};
//- end: NV_vertex_program3

//-//-- 
//- Ext: NV_vertex_program4
enum GLext_NV_vertex_program4
{
#	define FLUXGL_NV_vertex_program4 1
	VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FDu,
};
//- end: NV_vertex_program4

//-//-- 
//- Ext: NV_video_capture
enum GLext_NV_video_capture
{
#	define FLUXGL_NV_video_capture 1
	VIDEO_BUFFER_NV = 0x9020u,
	VIDEO_BUFFER_BINDING_NV = 0x9021u,
	FIELD_UPPER_NV = 0x9022u,
	FIELD_LOWER_NV = 0x9023u,
	NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024u,
	NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025u,
	VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026u,
	LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027u,
	VIDEO_BUFFER_PITCH_NV = 0x9028u,
	VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029u,
	VIDEO_COLOR_CONVERSION_MAX_NV = 0x902Au,
	VIDEO_COLOR_CONVERSION_MIN_NV = 0x902Bu,
	VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902Cu,
	VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902Du,
	PARTIAL_SUCCESS_NV = 0x902Eu,
	SUCCESS_NV = 0x902Fu,
	FAILURE_NV = 0x9030u,
	YCBYCR8_422_NV = 0x9031u,
	YCBAYCR8A_4224_NV = 0x9032u,
	Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033u,
	Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034u,
	Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035u,
	Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036u,
	Z4Y12Z4CB12Z4CR12_444_NV = 0x9037u,
	VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038u,
	VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039u,
	VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903Au,
	VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903Bu,
	VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903Cu,
};
//- end: NV_video_capture

//-//-- 
//- Ext: OES_byte_coordinates
enum GLext_OES_byte_coordinates
{
#	define FLUXGL_OES_byte_coordinates 1
//	GL::BYTE already defined in 1.1_core
};
//- end: OES_byte_coordinates

//-//-- 
//- Ext: OES_compressed_paletted_texture
enum GLext_OES_compressed_paletted_texture
{
#	define FLUXGL_OES_compressed_paletted_texture 1
	PALETTE4_RGB8_OES = 0x8B90u,
	PALETTE4_RGBA8_OES = 0x8B91u,
	PALETTE4_R5_G6_B5_OES = 0x8B92u,
	PALETTE4_RGBA4_OES = 0x8B93u,
	PALETTE4_RGB5_A1_OES = 0x8B94u,
	PALETTE8_RGB8_OES = 0x8B95u,
	PALETTE8_RGBA8_OES = 0x8B96u,
	PALETTE8_R5_G6_B5_OES = 0x8B97u,
	PALETTE8_RGBA4_OES = 0x8B98u,
	PALETTE8_RGB5_A1_OES = 0x8B99u,
};
//- end: OES_compressed_paletted_texture

//-//-- 
//- Ext: OES_fixed_point
enum GLext_OES_fixed_point
{
#	define FLUXGL_OES_fixed_point 1
	FIXED_OES = 0x140Cu,
};
//- end: OES_fixed_point

//-//-- 
//- Ext: OES_read_format
enum GLext_OES_read_format
{
#	define FLUXGL_OES_read_format 1
	IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9Au,
	IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9Bu,
};
//- end: OES_read_format

//-//-- 
//- Ext: OML_interlace
enum GLext_OML_interlace
{
#	define FLUXGL_OML_interlace 1
	INTERLACE_OML = 0x8980u,
	INTERLACE_READ_OML = 0x8981u,
};
//- end: OML_interlace

//-//-- 
//- Ext: OML_resample
enum GLext_OML_resample
{
#	define FLUXGL_OML_resample 1
	PACK_RESAMPLE_OML = 0x8984u,
	UNPACK_RESAMPLE_OML = 0x8985u,
	RESAMPLE_REPLICATE_OML = 0x8986u,
	RESAMPLE_ZERO_FILL_OML = 0x8987u,
	RESAMPLE_AVERAGE_OML = 0x8988u,
	RESAMPLE_DECIMATE_OML = 0x8989u,
};
//- end: OML_resample

//-//-- 
//- Ext: OML_subsample
enum GLext_OML_subsample
{
#	define FLUXGL_OML_subsample 1
	FORMAT_SUBSAMPLE_24_24_OML = 0x8982u,
	FORMAT_SUBSAMPLE_244_244_OML = 0x8983u,
};
//- end: OML_subsample

//-//-- 
//- Ext: OVR_multiview
enum GLext_OVR_multiview
{
#	define FLUXGL_OVR_multiview 1
	FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630u,
	MAX_VIEWS_OVR = 0x9631u,
	FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632u,
};
//- end: OVR_multiview

//-//-- 
//- Ext: PGI_misc_hints
enum GLext_PGI_misc_hints
{
#	define FLUXGL_PGI_misc_hints 1
	PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8u,
	CONSERVE_MEMORY_HINT_PGI = 0x1A1FDu,
	RECLAIM_MEMORY_HINT_PGI = 0x1A1FEu,
	NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202u,
	NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203u,
	NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204u,
	ALWAYS_FAST_HINT_PGI = 0x1A20Cu,
	ALWAYS_SOFT_HINT_PGI = 0x1A20Du,
	ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20Eu,
	ALLOW_DRAW_WIN_HINT_PGI = 0x1A20Fu,
	ALLOW_DRAW_FRG_HINT_PGI = 0x1A210u,
	ALLOW_DRAW_MEM_HINT_PGI = 0x1A211u,
	STRICT_DEPTHFUNC_HINT_PGI = 0x1A216u,
	STRICT_LIGHTING_HINT_PGI = 0x1A217u,
	STRICT_SCISSOR_HINT_PGI = 0x1A218u,
	FULL_STIPPLE_HINT_PGI = 0x1A219u,
	CLIP_NEAR_HINT_PGI = 0x1A220u,
	CLIP_FAR_HINT_PGI = 0x1A221u,
	WIDE_LINE_HINT_PGI = 0x1A222u,
	BACK_NORMALS_HINT_PGI = 0x1A223u,
};
//- end: PGI_misc_hints

//-//-- 
//- Ext: PGI_vertex_hints
enum GLext_PGI_vertex_hints
{
#	define FLUXGL_PGI_vertex_hints 1
	VERTEX23_BIT_PGI = 0x00000004u,
	VERTEX4_BIT_PGI = 0x00000008u,
	COLOR3_BIT_PGI = 0x00010000u,
	COLOR4_BIT_PGI = 0x00020000u,
	EDGEFLAG_BIT_PGI = 0x00040000u,
	INDEX_BIT_PGI = 0x00080000u,
	MAT_AMBIENT_BIT_PGI = 0x00100000u,
	MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000u,
	MAT_DIFFUSE_BIT_PGI = 0x00400000u,
	MAT_EMISSION_BIT_PGI = 0x00800000u,
	MAT_COLOR_INDEXES_BIT_PGI = 0x01000000u,
	MAT_SHININESS_BIT_PGI = 0x02000000u,
	MAT_SPECULAR_BIT_PGI = 0x04000000u,
	NORMAL_BIT_PGI = 0x08000000u,
	TEXCOORD1_BIT_PGI = 0x10000000u,
	VERTEX_DATA_HINT_PGI = 0x1A22Au,
	VERTEX_CONSISTENT_HINT_PGI = 0x1A22Bu,
	MATERIAL_SIDE_HINT_PGI = 0x1A22Cu,
	MAX_VERTEX_HINT_PGI = 0x1A22Du,
	TEXCOORD2_BIT_PGI = 0x20000000u,
	TEXCOORD3_BIT_PGI = 0x40000000u,
	TEXCOORD4_BIT_PGI = 0x80000000u,
};
//- end: PGI_vertex_hints

//-//-- 
//- Ext: REND_screen_coordinates
enum GLext_REND_screen_coordinates
{
#	define FLUXGL_REND_screen_coordinates 1
	SCREEN_COORDINATES_REND = 0x8490u,
	INVERTED_SCREEN_W_REND = 0x8491u,
};
//- end: REND_screen_coordinates

//-//-- 
//- Ext: S3_s3tc
enum GLext_S3_s3tc
{
#	define FLUXGL_S3_s3tc 1
	RGB_S3TC = 0x83A0u,
	RGB4_S3TC = 0x83A1u,
	RGBA_S3TC = 0x83A2u,
	RGBA4_S3TC = 0x83A3u,
	RGBA_DXT5_S3TC = 0x83A4u,
	RGBA4_DXT5_S3TC = 0x83A5u,
};
//- end: S3_s3tc

//-//-- 
//- Ext: SGIS_detail_texture
enum GLext_SGIS_detail_texture
{
#	define FLUXGL_SGIS_detail_texture 1
	DETAIL_TEXTURE_2D_SGIS = 0x8095u,
	DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096u,
	LINEAR_DETAIL_SGIS = 0x8097u,
	LINEAR_DETAIL_ALPHA_SGIS = 0x8098u,
	LINEAR_DETAIL_COLOR_SGIS = 0x8099u,
	DETAIL_TEXTURE_LEVEL_SGIS = 0x809Au,
	DETAIL_TEXTURE_MODE_SGIS = 0x809Bu,
	DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809Cu,
};
//- end: SGIS_detail_texture

//-//-- 
//- Ext: SGIS_fog_function
enum GLext_SGIS_fog_function
{
#	define FLUXGL_SGIS_fog_function 1
	FOG_FUNC_SGIS = 0x812Au,
	FOG_FUNC_POINTS_SGIS = 0x812Bu,
	MAX_FOG_FUNC_POINTS_SGIS = 0x812Cu,
};
//- end: SGIS_fog_function

//-//-- 
//- Ext: SGIS_generate_mipmap
enum GLext_SGIS_generate_mipmap
{
#	define FLUXGL_SGIS_generate_mipmap 1
	GENERATE_MIPMAP_SGIS = 0x8191u,
	GENERATE_MIPMAP_HINT_SGIS = 0x8192u,
};
//- end: SGIS_generate_mipmap

//-//-- 
//- Ext: SGIS_multisample
enum GLext_SGIS_multisample
{
#	define FLUXGL_SGIS_multisample 1
	MULTISAMPLE_SGIS = 0x809Du,
	SAMPLE_ALPHA_TO_MASK_SGIS = 0x809Eu,
	SAMPLE_ALPHA_TO_ONE_SGIS = 0x809Fu,
	SAMPLE_MASK_SGIS = 0x80A0u,
	GL1PASS_SGIS = 0x80A1u,
	GL2PASS_0_SGIS = 0x80A2u,
	GL2PASS_1_SGIS = 0x80A3u,
	GL4PASS_0_SGIS = 0x80A4u,
	GL4PASS_1_SGIS = 0x80A5u,
	GL4PASS_2_SGIS = 0x80A6u,
	GL4PASS_3_SGIS = 0x80A7u,
	SAMPLE_BUFFERS_SGIS = 0x80A8u,
	SAMPLES_SGIS = 0x80A9u,
	SAMPLE_MASK_VALUE_SGIS = 0x80AAu,
	SAMPLE_MASK_INVERT_SGIS = 0x80ABu,
	SAMPLE_PATTERN_SGIS = 0x80ACu,
};
//- end: SGIS_multisample

//-//-- 
//- Ext: SGIS_pixel_texture
enum GLext_SGIS_pixel_texture
{
#	define FLUXGL_SGIS_pixel_texture 1
	PIXEL_TEXTURE_SGIS = 0x8353u,
	PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354u,
	PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355u,
	PIXEL_GROUP_COLOR_SGIS = 0x8356u,
};
//- end: SGIS_pixel_texture

//-//-- 
//- Ext: SGIS_point_line_texgen
enum GLext_SGIS_point_line_texgen
{
#	define FLUXGL_SGIS_point_line_texgen 1
	EYE_DISTANCE_TO_POINT_SGIS = 0x81F0u,
	OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1u,
	EYE_DISTANCE_TO_LINE_SGIS = 0x81F2u,
	OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3u,
	EYE_POINT_SGIS = 0x81F4u,
	OBJECT_POINT_SGIS = 0x81F5u,
	EYE_LINE_SGIS = 0x81F6u,
	OBJECT_LINE_SGIS = 0x81F7u,
};
//- end: SGIS_point_line_texgen

//-//-- 
//- Ext: SGIS_point_parameters
enum GLext_SGIS_point_parameters
{
#	define FLUXGL_SGIS_point_parameters 1
	POINT_SIZE_MIN_SGIS = 0x8126u,
	POINT_SIZE_MAX_SGIS = 0x8127u,
	POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128u,
	DISTANCE_ATTENUATION_SGIS = 0x8129u,
};
//- end: SGIS_point_parameters

//-//-- 
//- Ext: SGIS_sharpen_texture
enum GLext_SGIS_sharpen_texture
{
#	define FLUXGL_SGIS_sharpen_texture 1
	LINEAR_SHARPEN_SGIS = 0x80ADu,
	LINEAR_SHARPEN_ALPHA_SGIS = 0x80AEu,
	LINEAR_SHARPEN_COLOR_SGIS = 0x80AFu,
	SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0u,
};
//- end: SGIS_sharpen_texture

//-//-- 
//- Ext: SGIS_texture4D
enum GLext_SGIS_texture4D
{
#	define FLUXGL_SGIS_texture4D 1
	PACK_SKIP_VOLUMES_SGIS = 0x8130u,
	PACK_IMAGE_DEPTH_SGIS = 0x8131u,
	UNPACK_SKIP_VOLUMES_SGIS = 0x8132u,
	UNPACK_IMAGE_DEPTH_SGIS = 0x8133u,
	TEXTURE_4D_SGIS = 0x8134u,
	PROXY_TEXTURE_4D_SGIS = 0x8135u,
	TEXTURE_4DSIZE_SGIS = 0x8136u,
	TEXTURE_WRAP_Q_SGIS = 0x8137u,
	MAX_4D_TEXTURE_SIZE_SGIS = 0x8138u,
	TEXTURE_4D_BINDING_SGIS = 0x814Fu,
};
//- end: SGIS_texture4D

//-//-- 
//- Ext: SGIS_texture_border_clamp
enum GLext_SGIS_texture_border_clamp
{
#	define FLUXGL_SGIS_texture_border_clamp 1
	CLAMP_TO_BORDER_SGIS = 0x812Du,
};
//- end: SGIS_texture_border_clamp

//-//-- 
//- Ext: SGIS_texture_color_mask
enum GLext_SGIS_texture_color_mask
{
#	define FLUXGL_SGIS_texture_color_mask 1
	TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EFu,
};
//- end: SGIS_texture_color_mask

//-//-- 
//- Ext: SGIS_texture_edge_clamp
enum GLext_SGIS_texture_edge_clamp
{
#	define FLUXGL_SGIS_texture_edge_clamp 1
	CLAMP_TO_EDGE_SGIS = 0x812Fu,
};
//- end: SGIS_texture_edge_clamp

//-//-- 
//- Ext: SGIS_texture_filter4
enum GLext_SGIS_texture_filter4
{
#	define FLUXGL_SGIS_texture_filter4 1
	FILTER4_SGIS = 0x8146u,
	TEXTURE_FILTER4_SIZE_SGIS = 0x8147u,
};
//- end: SGIS_texture_filter4

//-//-- 
//- Ext: SGIS_texture_lod
enum GLext_SGIS_texture_lod
{
#	define FLUXGL_SGIS_texture_lod 1
	TEXTURE_MIN_LOD_SGIS = 0x813Au,
	TEXTURE_MAX_LOD_SGIS = 0x813Bu,
	TEXTURE_BASE_LEVEL_SGIS = 0x813Cu,
	TEXTURE_MAX_LEVEL_SGIS = 0x813Du,
};
//- end: SGIS_texture_lod

//-//-- 
//- Ext: SGIS_texture_select
enum GLext_SGIS_texture_select
{
#	define FLUXGL_SGIS_texture_select 1
	DUAL_ALPHA4_SGIS = 0x8110u,
	DUAL_ALPHA8_SGIS = 0x8111u,
	DUAL_ALPHA12_SGIS = 0x8112u,
	DUAL_ALPHA16_SGIS = 0x8113u,
	DUAL_LUMINANCE4_SGIS = 0x8114u,
	DUAL_LUMINANCE8_SGIS = 0x8115u,
	DUAL_LUMINANCE12_SGIS = 0x8116u,
	DUAL_LUMINANCE16_SGIS = 0x8117u,
	DUAL_INTENSITY4_SGIS = 0x8118u,
	DUAL_INTENSITY8_SGIS = 0x8119u,
	DUAL_INTENSITY12_SGIS = 0x811Au,
	DUAL_INTENSITY16_SGIS = 0x811Bu,
	DUAL_LUMINANCE_ALPHA4_SGIS = 0x811Cu,
	DUAL_LUMINANCE_ALPHA8_SGIS = 0x811Du,
	QUAD_ALPHA4_SGIS = 0x811Eu,
	QUAD_ALPHA8_SGIS = 0x811Fu,
	QUAD_LUMINANCE4_SGIS = 0x8120u,
	QUAD_LUMINANCE8_SGIS = 0x8121u,
	QUAD_INTENSITY4_SGIS = 0x8122u,
	QUAD_INTENSITY8_SGIS = 0x8123u,
	DUAL_TEXTURE_SELECT_SGIS = 0x8124u,
	QUAD_TEXTURE_SELECT_SGIS = 0x8125u,
};
//- end: SGIS_texture_select

//-//-- 
//- Ext: SGIX_async
enum GLext_SGIX_async
{
#	define FLUXGL_SGIX_async 1
	ASYNC_MARKER_SGIX = 0x8329u,
};
//- end: SGIX_async

//-//-- 
//- Ext: SGIX_async_histogram
enum GLext_SGIX_async_histogram
{
#	define FLUXGL_SGIX_async_histogram 1
	ASYNC_HISTOGRAM_SGIX = 0x832Cu,
	MAX_ASYNC_HISTOGRAM_SGIX = 0x832Du,
};
//- end: SGIX_async_histogram

//-//-- 
//- Ext: SGIX_async_pixel
enum GLext_SGIX_async_pixel
{
#	define FLUXGL_SGIX_async_pixel 1
	ASYNC_TEX_IMAGE_SGIX = 0x835Cu,
	ASYNC_DRAW_PIXELS_SGIX = 0x835Du,
	ASYNC_READ_PIXELS_SGIX = 0x835Eu,
	MAX_ASYNC_TEX_IMAGE_SGIX = 0x835Fu,
	MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360u,
	MAX_ASYNC_READ_PIXELS_SGIX = 0x8361u,
};
//- end: SGIX_async_pixel

//-//-- 
//- Ext: SGIX_blend_alpha_minmax
enum GLext_SGIX_blend_alpha_minmax
{
#	define FLUXGL_SGIX_blend_alpha_minmax 1
	ALPHA_MIN_SGIX = 0x8320u,
	ALPHA_MAX_SGIX = 0x8321u,
};
//- end: SGIX_blend_alpha_minmax

//-//-- 
//- Ext: SGIX_calligraphic_fragment
enum GLext_SGIX_calligraphic_fragment
{
#	define FLUXGL_SGIX_calligraphic_fragment 1
	CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183u,
};
//- end: SGIX_calligraphic_fragment

//-//-- 
//- Ext: SGIX_clipmap
enum GLext_SGIX_clipmap
{
#	define FLUXGL_SGIX_clipmap 1
	LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170u,
	TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171u,
	TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172u,
	TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173u,
	TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174u,
	TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175u,
	TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176u,
	MAX_CLIPMAP_DEPTH_SGIX = 0x8177u,
	MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178u,
	NEAREST_CLIPMAP_NEAREST_SGIX = 0x844Du,
	NEAREST_CLIPMAP_LINEAR_SGIX = 0x844Eu,
	LINEAR_CLIPMAP_NEAREST_SGIX = 0x844Fu,
};
//- end: SGIX_clipmap

//-//-- 
//- Ext: SGIX_convolution_accuracy
enum GLext_SGIX_convolution_accuracy
{
#	define FLUXGL_SGIX_convolution_accuracy 1
	CONVOLUTION_HINT_SGIX = 0x8316u,
};
//- end: SGIX_convolution_accuracy

//-//-- 
//- Ext: SGIX_depth_texture
enum GLext_SGIX_depth_texture
{
#	define FLUXGL_SGIX_depth_texture 1
	DEPTH_COMPONENT16_SGIX = 0x81A5u,
	DEPTH_COMPONENT24_SGIX = 0x81A6u,
	DEPTH_COMPONENT32_SGIX = 0x81A7u,
};
//- end: SGIX_depth_texture

//-//-- 
//- Ext: SGIX_fog_offset
enum GLext_SGIX_fog_offset
{
#	define FLUXGL_SGIX_fog_offset 1
	FOG_OFFSET_SGIX = 0x8198u,
	FOG_OFFSET_VALUE_SGIX = 0x8199u,
};
//- end: SGIX_fog_offset

//-//-- 
//- Ext: SGIX_fragment_lighting
enum GLext_SGIX_fragment_lighting
{
#	define FLUXGL_SGIX_fragment_lighting 1
	FRAGMENT_LIGHTING_SGIX = 0x8400u,
	FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401u,
	FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402u,
	FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403u,
	MAX_FRAGMENT_LIGHTS_SGIX = 0x8404u,
	MAX_ACTIVE_LIGHTS_SGIX = 0x8405u,
	CURRENT_RASTER_NORMAL_SGIX = 0x8406u,
	LIGHT_ENV_MODE_SGIX = 0x8407u,
	FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408u,
	FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409u,
	FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840Au,
	FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840Bu,
	FRAGMENT_LIGHT0_SGIX = 0x840Cu,
	FRAGMENT_LIGHT1_SGIX = 0x840Du,
	FRAGMENT_LIGHT2_SGIX = 0x840Eu,
	FRAGMENT_LIGHT3_SGIX = 0x840Fu,
	FRAGMENT_LIGHT4_SGIX = 0x8410u,
	FRAGMENT_LIGHT5_SGIX = 0x8411u,
	FRAGMENT_LIGHT6_SGIX = 0x8412u,
	FRAGMENT_LIGHT7_SGIX = 0x8413u,
};
//- end: SGIX_fragment_lighting

//-//-- 
//- Ext: SGIX_framezoom
enum GLext_SGIX_framezoom
{
#	define FLUXGL_SGIX_framezoom 1
	FRAMEZOOM_SGIX = 0x818Bu,
	FRAMEZOOM_FACTOR_SGIX = 0x818Cu,
	MAX_FRAMEZOOM_FACTOR_SGIX = 0x818Du,
};
//- end: SGIX_framezoom

//-//-- 
//- Ext: SGIX_instruments
enum GLext_SGIX_instruments
{
#	define FLUXGL_SGIX_instruments 1
	INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180u,
	INSTRUMENT_MEASUREMENTS_SGIX = 0x8181u,
};
//- end: SGIX_instruments

//-//-- 
//- Ext: SGIX_interlace
enum GLext_SGIX_interlace
{
#	define FLUXGL_SGIX_interlace 1
	INTERLACE_SGIX = 0x8094u,
};
//- end: SGIX_interlace

//-//-- 
//- Ext: SGIX_ir_instrument1
enum GLext_SGIX_ir_instrument1
{
#	define FLUXGL_SGIX_ir_instrument1 1
	IR_INSTRUMENT1_SGIX = 0x817Fu,
};
//- end: SGIX_ir_instrument1

//-//-- 
//- Ext: SGIX_list_priority
enum GLext_SGIX_list_priority
{
#	define FLUXGL_SGIX_list_priority 1
	LIST_PRIORITY_SGIX = 0x8182u,
};
//- end: SGIX_list_priority

//-//-- 
//- Ext: SGIX_pixel_texture
enum GLext_SGIX_pixel_texture
{
#	define FLUXGL_SGIX_pixel_texture 1
	PIXEL_TEX_GEN_SGIX = 0x8139u,
	PIXEL_TEX_GEN_MODE_SGIX = 0x832Bu,
};
//- end: SGIX_pixel_texture

//-//-- 
//- Ext: SGIX_pixel_tiles
enum GLext_SGIX_pixel_tiles
{
#	define FLUXGL_SGIX_pixel_tiles 1
	PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813Eu,
	PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813Fu,
	PIXEL_TILE_WIDTH_SGIX = 0x8140u,
	PIXEL_TILE_HEIGHT_SGIX = 0x8141u,
	PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142u,
	PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143u,
	PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144u,
	PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145u,
};
//- end: SGIX_pixel_tiles

//-//-- 
//- Ext: SGIX_polynomial_ffd
enum GLext_SGIX_polynomial_ffd
{
#	define FLUXGL_SGIX_polynomial_ffd 1
	TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001u,
	GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002u,
	GEOMETRY_DEFORMATION_SGIX = 0x8194u,
	TEXTURE_DEFORMATION_SGIX = 0x8195u,
	DEFORMATIONS_MASK_SGIX = 0x8196u,
	MAX_DEFORMATION_ORDER_SGIX = 0x8197u,
};
//- end: SGIX_polynomial_ffd

//-//-- 
//- Ext: SGIX_reference_plane
enum GLext_SGIX_reference_plane
{
#	define FLUXGL_SGIX_reference_plane 1
	REFERENCE_PLANE_SGIX = 0x817Du,
	REFERENCE_PLANE_EQUATION_SGIX = 0x817Eu,
};
//- end: SGIX_reference_plane

//-//-- 
//- Ext: SGIX_resample
enum GLext_SGIX_resample
{
#	define FLUXGL_SGIX_resample 1
	PACK_RESAMPLE_SGIX = 0x842Eu,
	UNPACK_RESAMPLE_SGIX = 0x842Fu,
	RESAMPLE_DECIMATE_SGIX = 0x8430u,
	RESAMPLE_REPLICATE_SGIX = 0x8433u,
	RESAMPLE_ZERO_FILL_SGIX = 0x8434u,
};
//- end: SGIX_resample

//-//-- 
//- Ext: SGIX_scalebias_hint
enum GLext_SGIX_scalebias_hint
{
#	define FLUXGL_SGIX_scalebias_hint 1
	SCALEBIAS_HINT_SGIX = 0x8322u,
};
//- end: SGIX_scalebias_hint

//-//-- 
//- Ext: SGIX_shadow
enum GLext_SGIX_shadow
{
#	define FLUXGL_SGIX_shadow 1
	TEXTURE_COMPARE_SGIX = 0x819Au,
	TEXTURE_COMPARE_OPERATOR_SGIX = 0x819Bu,
	TEXTURE_LEQUAL_R_SGIX = 0x819Cu,
	TEXTURE_GEQUAL_R_SGIX = 0x819Du,
};
//- end: SGIX_shadow

//-//-- 
//- Ext: SGIX_shadow_ambient
enum GLext_SGIX_shadow_ambient
{
#	define FLUXGL_SGIX_shadow_ambient 1
	SHADOW_AMBIENT_SGIX = 0x80BFu,
};
//- end: SGIX_shadow_ambient

//-//-- 
//- Ext: SGIX_sprite
enum GLext_SGIX_sprite
{
#	define FLUXGL_SGIX_sprite 1
	SPRITE_SGIX = 0x8148u,
	SPRITE_MODE_SGIX = 0x8149u,
	SPRITE_AXIS_SGIX = 0x814Au,
	SPRITE_TRANSLATION_SGIX = 0x814Bu,
	SPRITE_AXIAL_SGIX = 0x814Cu,
	SPRITE_OBJECT_ALIGNED_SGIX = 0x814Du,
	SPRITE_EYE_ALIGNED_SGIX = 0x814Eu,
};
//- end: SGIX_sprite

//-//-- 
//- Ext: SGIX_subsample
enum GLext_SGIX_subsample
{
#	define FLUXGL_SGIX_subsample 1
	PACK_SUBSAMPLE_RATE_SGIX = 0x85A0u,
	UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1u,
	PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2u,
	PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3u,
	PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4u,
};
//- end: SGIX_subsample

//-//-- 
//- Ext: SGIX_texture_add_env
enum GLext_SGIX_texture_add_env
{
#	define FLUXGL_SGIX_texture_add_env 1
	TEXTURE_ENV_BIAS_SGIX = 0x80BEu,
};
//- end: SGIX_texture_add_env

//-//-- 
//- Ext: SGIX_texture_coordinate_clamp
enum GLext_SGIX_texture_coordinate_clamp
{
#	define FLUXGL_SGIX_texture_coordinate_clamp 1
	TEXTURE_MAX_CLAMP_S_SGIX = 0x8369u,
	TEXTURE_MAX_CLAMP_T_SGIX = 0x836Au,
	TEXTURE_MAX_CLAMP_R_SGIX = 0x836Bu,
};
//- end: SGIX_texture_coordinate_clamp

//-//-- 
//- Ext: SGIX_texture_lod_bias
enum GLext_SGIX_texture_lod_bias
{
#	define FLUXGL_SGIX_texture_lod_bias 1
	TEXTURE_LOD_BIAS_S_SGIX = 0x818Eu,
	TEXTURE_LOD_BIAS_T_SGIX = 0x818Fu,
	TEXTURE_LOD_BIAS_R_SGIX = 0x8190u,
};
//- end: SGIX_texture_lod_bias

//-//-- 
//- Ext: SGIX_texture_multi_buffer
enum GLext_SGIX_texture_multi_buffer
{
#	define FLUXGL_SGIX_texture_multi_buffer 1
	TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812Eu,
};
//- end: SGIX_texture_multi_buffer

//-//-- 
//- Ext: SGIX_texture_scale_bias
enum GLext_SGIX_texture_scale_bias
{
#	define FLUXGL_SGIX_texture_scale_bias 1
	POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179u,
	POST_TEXTURE_FILTER_SCALE_SGIX = 0x817Au,
	POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817Bu,
	POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817Cu,
};
//- end: SGIX_texture_scale_bias

//-//-- 
//- Ext: SGIX_vertex_preclip
enum GLext_SGIX_vertex_preclip
{
#	define FLUXGL_SGIX_vertex_preclip 1
	VERTEX_PRECLIP_SGIX = 0x83EEu,
	VERTEX_PRECLIP_HINT_SGIX = 0x83EFu,
};
//- end: SGIX_vertex_preclip

//-//-- 
//- Ext: SGIX_ycrcb
enum GLext_SGIX_ycrcb
{
#	define FLUXGL_SGIX_ycrcb 1
	YCRCB_422_SGIX = 0x81BBu,
	YCRCB_444_SGIX = 0x81BCu,
};
//- end: SGIX_ycrcb

//-//-- 
//- Ext: SGIX_ycrcba
enum GLext_SGIX_ycrcba
{
#	define FLUXGL_SGIX_ycrcba 1
	YCRCB_SGIX = 0x8318u,
	YCRCBA_SGIX = 0x8319u,
};
//- end: SGIX_ycrcba

//-//-- 
//- Ext: SGI_color_matrix
enum GLext_SGI_color_matrix
{
#	define FLUXGL_SGI_color_matrix 1
	COLOR_MATRIX_SGI = 0x80B1u,
	COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2u,
	MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3u,
	POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4u,
	POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5u,
	POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6u,
	POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7u,
	POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8u,
	POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9u,
	POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BAu,
	POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BBu,
};
//- end: SGI_color_matrix

//-//-- 
//- Ext: SGI_color_table
enum GLext_SGI_color_table
{
#	define FLUXGL_SGI_color_table 1
	COLOR_TABLE_SGI = 0x80D0u,
	POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1u,
	POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2u,
	PROXY_COLOR_TABLE_SGI = 0x80D3u,
	PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4u,
	PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5u,
	COLOR_TABLE_SCALE_SGI = 0x80D6u,
	COLOR_TABLE_BIAS_SGI = 0x80D7u,
	COLOR_TABLE_FORMAT_SGI = 0x80D8u,
	COLOR_TABLE_WIDTH_SGI = 0x80D9u,
	COLOR_TABLE_RED_SIZE_SGI = 0x80DAu,
	COLOR_TABLE_GREEN_SIZE_SGI = 0x80DBu,
	COLOR_TABLE_BLUE_SIZE_SGI = 0x80DCu,
	COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DDu,
	COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DEu,
	COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DFu,
};
//- end: SGI_color_table

//-//-- 
//- Ext: SGI_texture_color_table
enum GLext_SGI_texture_color_table
{
#	define FLUXGL_SGI_texture_color_table 1
	TEXTURE_COLOR_TABLE_SGI = 0x80BCu,
	PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BDu,
};
//- end: SGI_texture_color_table

//-//-- 
//- Ext: WIN_phong_shading
enum GLext_WIN_phong_shading
{
#	define FLUXGL_WIN_phong_shading 1
	PHONG_WIN = 0x80EAu,
	PHONG_HINT_WIN = 0x80EBu,
};
//- end: WIN_phong_shading

//-//-- 
//- Ext: WIN_specular_fog
enum GLext_WIN_specular_fog
{
#	define FLUXGL_WIN_specular_fog 1
	FOG_SPECULAR_TEXTURE_WIN = 0x80ECu,
};
//- end: WIN_specular_fog

//-//-- 
//- Ext: ARB_gl_spirv
enum GLext_ARB_gl_spirv
{
#	define FLUXGL_ARB_gl_spirv 1
	SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551u,
	SPIR_V_BINARY_ARB = 0x9552u,
};
//- end: ARB_gl_spirv

//-//-- 
//- Ext: ARB_spirv_extensions
enum GLext_ARB_spirv_extensions
{
#	define FLUXGL_ARB_spirv_extensions 1
//	GL::SPIR_V_EXTENSIONS already defined in 4.6_core
//	GL::NUM_SPIR_V_EXTENSIONS already defined in 4.6_core
};
//- end: ARB_spirv_extensions

} // ~ namespace GL

//--    proto                           ///{{{2///////////////////////////////
namespace proto 
{
	//-//-- 
	//- Core 1.0
	typedef void (FLUXGL_API *AccumFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *AlphaFuncFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *BeginFn)( GL::Enum );
	typedef void (FLUXGL_API *BitmapFn)( GL::Sizei, GL::Sizei, GL::Float, GL::Float, GL::Float, GL::Float, GL::UByte const* );
	typedef void (FLUXGL_API *BlendFuncFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *CallListFn)( GL::UInt );
	typedef void (FLUXGL_API *CallListsFn)( GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClearFn)( GL::Bitfield );
	typedef void (FLUXGL_API *ClearAccumFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ClearColorFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ClearDepthFn)( GL::Double );
	typedef void (FLUXGL_API *ClearIndexFn)( GL::Float );
	typedef void (FLUXGL_API *ClearStencilFn)( GL::Int );
	typedef void (FLUXGL_API *ClipPlaneFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *Color3bFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Color3bvFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Color3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Color3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *Color3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Color3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *Color3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Color3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *Color3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Color3svFn)( GL::Short const* );
	typedef void (FLUXGL_API *Color3ubFn)( GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *Color3ubvFn)( GL::UByte const* );
	typedef void (FLUXGL_API *Color3uiFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Color3uivFn)( GL::UInt const* );
	typedef void (FLUXGL_API *Color3usFn)( GL::UShort, GL::UShort, GL::UShort );
	typedef void (FLUXGL_API *Color3usvFn)( GL::UShort const* );
	typedef void (FLUXGL_API *Color4bFn)( GL::Byte, GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Color4bvFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Color4dFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Color4dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *Color4fFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Color4fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *Color4iFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Color4ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *Color4sFn)( GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Color4svFn)( GL::Short const* );
	typedef void (FLUXGL_API *Color4ubFn)( GL::UByte, GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *Color4ubvFn)( GL::UByte const* );
	typedef void (FLUXGL_API *Color4uiFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Color4uivFn)( GL::UInt const* );
	typedef void (FLUXGL_API *Color4usFn)( GL::UShort, GL::UShort, GL::UShort, GL::UShort );
	typedef void (FLUXGL_API *Color4usvFn)( GL::UShort const* );
	typedef void (FLUXGL_API *ColorMaskFn)( GL::Boolean, GL::Boolean, GL::Boolean, GL::Boolean );
	typedef void (FLUXGL_API *ColorMaterialFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *CopyPixelsFn)( GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum );
	typedef void (FLUXGL_API *CullFaceFn)( GL::Enum );
	typedef void (FLUXGL_API *DeleteListsFn)( GL::UInt, GL::Sizei );
	typedef void (FLUXGL_API *DepthFuncFn)( GL::Enum );
	typedef void (FLUXGL_API *DepthMaskFn)( GL::Boolean );
	typedef void (FLUXGL_API *DepthRangeFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *DisableFn)( GL::Enum );
	typedef void (FLUXGL_API *DrawBufferFn)( GL::Enum );
	typedef void (FLUXGL_API *DrawPixelsFn)( GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *EdgeFlagFn)( GL::Boolean );
	typedef void (FLUXGL_API *EdgeFlagvFn)( GL::Boolean const* );
	typedef void (FLUXGL_API *EnableFn)( GL::Enum );
	typedef void (FLUXGL_API *EndFn)( );
	typedef void (FLUXGL_API *EndListFn)( );
	typedef void (FLUXGL_API *EvalCoord1dFn)( GL::Double );
	typedef void (FLUXGL_API *EvalCoord1dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *EvalCoord1fFn)( GL::Float );
	typedef void (FLUXGL_API *EvalCoord1fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *EvalCoord2dFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *EvalCoord2dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *EvalCoord2fFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *EvalCoord2fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *EvalMesh1Fn)( GL::Enum, GL::Int, GL::Int );
	typedef void (FLUXGL_API *EvalMesh2Fn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *EvalPoint1Fn)( GL::Int );
	typedef void (FLUXGL_API *EvalPoint2Fn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *FeedbackBufferFn)( GL::Sizei, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *FinishFn)( );
	typedef void (FLUXGL_API *FlushFn)( );
	typedef void (FLUXGL_API *FogfFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *FogfvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *FogiFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *FogivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *FrontFaceFn)( GL::Enum );
	typedef void (FLUXGL_API *FrustumFn)( GL::Double, GL::Double, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef GL::UInt (FLUXGL_API *GenListsFn)( GL::Sizei );
	typedef void (FLUXGL_API *GetBooleanvFn)( GL::Enum, GL::Boolean* );
	typedef void (FLUXGL_API *GetClipPlaneFn)( GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetDoublevFn)( GL::Enum, GL::Double* );
	typedef GL::Enum (FLUXGL_API *GetErrorFn)( );
	typedef void (FLUXGL_API *GetFloatvFn)( GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetIntegervFn)( GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetLightfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetLightivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMapdvFn)( GL::Enum, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetMapfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMapivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMaterialfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMaterialivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetPixelMapfvFn)( GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPixelMapuivFn)( GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetPixelMapusvFn)( GL::Enum, GL::UShort* );
	typedef void (FLUXGL_API *GetPolygonStippleFn)( GL::UByte* );
	typedef GL::UByte const* (FLUXGL_API *GetStringFn)( GL::Enum );
	typedef void (FLUXGL_API *GetTexEnvfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTexEnvivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTexGendvFn)( GL::Enum, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetTexGenfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTexGenivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTexImageFn)( GL::Enum, GL::Int, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetTexLevelParameterfvFn)( GL::Enum, GL::Int, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTexLevelParameterivFn)( GL::Enum, GL::Int, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTexParameterfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTexParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *HintFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *IndexMaskFn)( GL::UInt );
	typedef void (FLUXGL_API *IndexdFn)( GL::Double );
	typedef void (FLUXGL_API *IndexdvFn)( GL::Double const* );
	typedef void (FLUXGL_API *IndexfFn)( GL::Float );
	typedef void (FLUXGL_API *IndexfvFn)( GL::Float const* );
	typedef void (FLUXGL_API *IndexiFn)( GL::Int );
	typedef void (FLUXGL_API *IndexivFn)( GL::Int const* );
	typedef void (FLUXGL_API *IndexsFn)( GL::Short );
	typedef void (FLUXGL_API *IndexsvFn)( GL::Short const* );
	typedef void (FLUXGL_API *InitNamesFn)( );
	typedef GL::Boolean (FLUXGL_API *IsEnabledFn)( GL::Enum );
	typedef GL::Boolean (FLUXGL_API *IsListFn)( GL::UInt );
	typedef void (FLUXGL_API *LightModelfFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *LightModelfvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *LightModeliFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *LightModelivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *LightfFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *LightfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *LightiFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *LightivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *LineStippleFn)( GL::Int, GL::UShort );
	typedef void (FLUXGL_API *LineWidthFn)( GL::Float );
	typedef void (FLUXGL_API *ListBaseFn)( GL::UInt );
	typedef void (FLUXGL_API *LoadIdentityFn)( );
	typedef void (FLUXGL_API *LoadMatrixdFn)( GL::Double const* );
	typedef void (FLUXGL_API *LoadMatrixfFn)( GL::Float const* );
	typedef void (FLUXGL_API *LoadNameFn)( GL::UInt );
	typedef void (FLUXGL_API *LogicOpFn)( GL::Enum );
	typedef void (FLUXGL_API *Map1dFn)( GL::Enum, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double const* );
	typedef void (FLUXGL_API *Map1fFn)( GL::Enum, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *Map2dFn)( GL::Enum, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double const* );
	typedef void (FLUXGL_API *Map2fFn)( GL::Enum, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *MapGrid1dFn)( GL::Int, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MapGrid1fFn)( GL::Int, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MapGrid2dFn)( GL::Int, GL::Double, GL::Double, GL::Int, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MapGrid2fFn)( GL::Int, GL::Float, GL::Float, GL::Int, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MaterialfFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *MaterialfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MaterialiFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MaterialivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MatrixModeFn)( GL::Enum );
	typedef void (FLUXGL_API *MultMatrixdFn)( GL::Double const* );
	typedef void (FLUXGL_API *MultMatrixfFn)( GL::Float const* );
	typedef void (FLUXGL_API *NewListFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *Normal3bFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Normal3bvFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Normal3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Normal3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *Normal3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Normal3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *Normal3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Normal3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *Normal3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Normal3svFn)( GL::Short const* );
	typedef void (FLUXGL_API *OrthoFn)( GL::Double, GL::Double, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *PassThroughFn)( GL::Float );
	typedef void (FLUXGL_API *PixelMapfvFn)( GL::Enum, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *PixelMapuivFn)( GL::Enum, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *PixelMapusvFn)( GL::Enum, GL::Sizei, GL::UShort const* );
	typedef void (FLUXGL_API *PixelStorefFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PixelStoreiFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PixelTransferfFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PixelTransferiFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PixelZoomFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *PointSizeFn)( GL::Float );
	typedef void (FLUXGL_API *PolygonModeFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *PolygonStippleFn)( GL::UByte const* );
	typedef void (FLUXGL_API *PopAttribFn)( );
	typedef void (FLUXGL_API *PopMatrixFn)( );
	typedef void (FLUXGL_API *PopNameFn)( );
	typedef void (FLUXGL_API *PushAttribFn)( GL::Bitfield );
	typedef void (FLUXGL_API *PushMatrixFn)( );
	typedef void (FLUXGL_API *PushNameFn)( GL::UInt );
	typedef void (FLUXGL_API *RasterPos2dFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *RasterPos2dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *RasterPos2fFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *RasterPos2fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *RasterPos2iFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *RasterPos2ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *RasterPos2sFn)( GL::Short, GL::Short );
	typedef void (FLUXGL_API *RasterPos2svFn)( GL::Short const* );
	typedef void (FLUXGL_API *RasterPos3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *RasterPos3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *RasterPos3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *RasterPos3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *RasterPos3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *RasterPos3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *RasterPos3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *RasterPos3svFn)( GL::Short const* );
	typedef void (FLUXGL_API *RasterPos4dFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *RasterPos4dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *RasterPos4fFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *RasterPos4fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *RasterPos4iFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *RasterPos4ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *RasterPos4sFn)( GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *RasterPos4svFn)( GL::Short const* );
	typedef void (FLUXGL_API *ReadBufferFn)( GL::Enum );
	typedef void (FLUXGL_API *ReadPixelsFn)( GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *RectdFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *RectdvFn)( GL::Double const*, GL::Double const* );
	typedef void (FLUXGL_API *RectfFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *RectfvFn)( GL::Float const*, GL::Float const* );
	typedef void (FLUXGL_API *RectiFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *RectivFn)( GL::Int const*, GL::Int const* );
	typedef void (FLUXGL_API *RectsFn)( GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *RectsvFn)( GL::Short const*, GL::Short const* );
	typedef GL::Int (FLUXGL_API *RenderModeFn)( GL::Enum );
	typedef void (FLUXGL_API *RotatedFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *RotatefFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ScaledFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ScalefFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ScissorFn)( GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *SelectBufferFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *ShadeModelFn)( GL::Enum );
	typedef void (FLUXGL_API *StencilFuncFn)( GL::Enum, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *StencilMaskFn)( GL::UInt );
	typedef void (FLUXGL_API *StencilOpFn)( GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *TexCoord1dFn)( GL::Double );
	typedef void (FLUXGL_API *TexCoord1dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *TexCoord1fFn)( GL::Float );
	typedef void (FLUXGL_API *TexCoord1fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *TexCoord1iFn)( GL::Int );
	typedef void (FLUXGL_API *TexCoord1ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *TexCoord1sFn)( GL::Short );
	typedef void (FLUXGL_API *TexCoord1svFn)( GL::Short const* );
	typedef void (FLUXGL_API *TexCoord2dFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *TexCoord2dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *TexCoord2fFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *TexCoord2fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *TexCoord2iFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *TexCoord2ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *TexCoord2sFn)( GL::Short, GL::Short );
	typedef void (FLUXGL_API *TexCoord2svFn)( GL::Short const* );
	typedef void (FLUXGL_API *TexCoord3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *TexCoord3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *TexCoord3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *TexCoord3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *TexCoord3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *TexCoord3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *TexCoord3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *TexCoord3svFn)( GL::Short const* );
	typedef void (FLUXGL_API *TexCoord4dFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *TexCoord4dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *TexCoord4fFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *TexCoord4fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *TexCoord4iFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *TexCoord4ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *TexCoord4sFn)( GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *TexCoord4svFn)( GL::Short const* );
	typedef void (FLUXGL_API *TexEnvfFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *TexEnvfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *TexEnviFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *TexEnvivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TexGendFn)( GL::Enum, GL::Enum, GL::Double );
	typedef void (FLUXGL_API *TexGendvFn)( GL::Enum, GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *TexGenfFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *TexGenfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *TexGeniFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *TexGenivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TexImage1DFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexImage2DFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexParameterfFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *TexParameterfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *TexParameteriFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *TexParameterivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TranslatedFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *TranslatefFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Vertex2dFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *Vertex2dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *Vertex2fFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *Vertex2fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *Vertex2iFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *Vertex2ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *Vertex2sFn)( GL::Short, GL::Short );
	typedef void (FLUXGL_API *Vertex2svFn)( GL::Short const* );
	typedef void (FLUXGL_API *Vertex3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Vertex3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *Vertex3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Vertex3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *Vertex3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Vertex3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *Vertex3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Vertex3svFn)( GL::Short const* );
	typedef void (FLUXGL_API *Vertex4dFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Vertex4dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *Vertex4fFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Vertex4fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *Vertex4iFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Vertex4ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *Vertex4sFn)( GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Vertex4svFn)( GL::Short const* );
	typedef void (FLUXGL_API *ViewportFn)( GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	//-//-- 
	//- Core 1.1
	typedef GL::Boolean (FLUXGL_API *AreTexturesResidentFn)( GL::Sizei, GL::UInt const*, GL::Boolean* );
	typedef void (FLUXGL_API *ArrayElementFn)( GL::Int );
	typedef void (FLUXGL_API *BindTextureFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *ColorPointerFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CopyTexImage1DFn)( GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyTexImage2DFn)( GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyTexSubImage1DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyTexSubImage2DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DeleteTexturesFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DisableClientStateFn)( GL::Enum );
	typedef void (FLUXGL_API *DrawArraysFn)( GL::Enum, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *DrawElementsFn)( GL::Enum, GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *EdgeFlagPointerFn)( GL::Sizei, void const* );
	typedef void (FLUXGL_API *EnableClientStateFn)( GL::Enum );
	typedef void (FLUXGL_API *GenTexturesFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetPointervFn)( GL::Enum, void* * );
	typedef void (FLUXGL_API *IndexPointerFn)( GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *IndexubFn)( GL::UByte );
	typedef void (FLUXGL_API *IndexubvFn)( GL::UByte const* );
	typedef void (FLUXGL_API *InterleavedArraysFn)( GL::Enum, GL::Sizei, void const* );
	typedef GL::Boolean (FLUXGL_API *IsTextureFn)( GL::UInt );
	typedef void (FLUXGL_API *NormalPointerFn)( GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *PolygonOffsetFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *PopClientAttribFn)( );
	typedef void (FLUXGL_API *PrioritizeTexturesFn)( GL::Sizei, GL::UInt const*, GL::Float const* );
	typedef void (FLUXGL_API *PushClientAttribFn)( GL::Bitfield );
	typedef void (FLUXGL_API *TexCoordPointerFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *TexSubImage1DFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexSubImage2DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *VertexPointerFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	//-//-- 
	//- Core 1.2
	typedef void (FLUXGL_API *CopyTexSubImage3DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DrawRangeElementsFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexImage3DFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexSubImage3DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	//-//-- 
	//- Core 1.3
	typedef void (FLUXGL_API *ActiveTextureFn)( GL::Enum );
	typedef void (FLUXGL_API *ClientActiveTextureFn)( GL::Enum );
	typedef void (FLUXGL_API *CompressedTexImage1DFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexImage2DFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexImage3DFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexSubImage1DFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexSubImage2DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexSubImage3DFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *GetCompressedTexImageFn)( GL::Enum, GL::Int, void* );
	typedef void (FLUXGL_API *LoadTransposeMatrixdFn)( GL::Double const* );
	typedef void (FLUXGL_API *LoadTransposeMatrixfFn)( GL::Float const* );
	typedef void (FLUXGL_API *MultTransposeMatrixdFn)( GL::Double const* );
	typedef void (FLUXGL_API *MultTransposeMatrixfFn)( GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord1dFn)( GL::Enum, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord1dvFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord1fFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord1fvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord1iFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord1ivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord1sFn)( GL::Enum, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord1svFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *MultiTexCoord2dFn)( GL::Enum, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord2dvFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord2fFn)( GL::Enum, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord2fvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord2iFn)( GL::Enum, GL::Int, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord2ivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord2sFn)( GL::Enum, GL::Short, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord2svFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *MultiTexCoord3dFn)( GL::Enum, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord3dvFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord3fFn)( GL::Enum, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord3fvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord3iFn)( GL::Enum, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord3ivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord3sFn)( GL::Enum, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord3svFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *MultiTexCoord4dFn)( GL::Enum, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord4dvFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord4fFn)( GL::Enum, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord4fvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord4iFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord4ivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord4sFn)( GL::Enum, GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord4svFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *SampleCoverageFn)( GL::Float, GL::Boolean );
	//-//-- 
	//- Core 1.4
	typedef void (FLUXGL_API *BlendColorFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *BlendEquationFn)( GL::Enum );
	typedef void (FLUXGL_API *BlendFuncSeparateFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *FogCoordPointerFn)( GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *FogCoorddFn)( GL::Double );
	typedef void (FLUXGL_API *FogCoorddvFn)( GL::Double const* );
	typedef void (FLUXGL_API *FogCoordfFn)( GL::Float );
	typedef void (FLUXGL_API *FogCoordfvFn)( GL::Float const* );
	typedef void (FLUXGL_API *MultiDrawArraysFn)( GL::Enum, GL::Int const*, GL::Sizei const*, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawElementsFn)( GL::Enum, GL::Sizei const*, GL::Enum, void const* const*, GL::Sizei );
	typedef void (FLUXGL_API *PointParameterfFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PointParameterfvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PointParameteriFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PointParameterivFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *SecondaryColor3bFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *SecondaryColor3bvFn)( GL::Byte const* );
	typedef void (FLUXGL_API *SecondaryColor3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *SecondaryColor3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *SecondaryColor3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *SecondaryColor3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *SecondaryColor3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *SecondaryColor3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *SecondaryColor3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *SecondaryColor3svFn)( GL::Short const* );
	typedef void (FLUXGL_API *SecondaryColor3ubFn)( GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *SecondaryColor3ubvFn)( GL::UByte const* );
	typedef void (FLUXGL_API *SecondaryColor3uiFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *SecondaryColor3uivFn)( GL::UInt const* );
	typedef void (FLUXGL_API *SecondaryColor3usFn)( GL::UShort, GL::UShort, GL::UShort );
	typedef void (FLUXGL_API *SecondaryColor3usvFn)( GL::UShort const* );
	typedef void (FLUXGL_API *SecondaryColorPointerFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *WindowPos2dFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos2dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos2fFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos2fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos2iFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos2ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos2sFn)( GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos2svFn)( GL::Short const* );
	typedef void (FLUXGL_API *WindowPos3dFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos3dvFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos3fFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos3fvFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos3iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos3ivFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos3sFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos3svFn)( GL::Short const* );
	//-//-- 
	//- Core 1.5
	typedef void (FLUXGL_API *BeginQueryFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BindBufferFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BufferDataFn)( GL::Enum, GL::Sizeiptr, void const*, GL::Enum );
	typedef void (FLUXGL_API *BufferSubDataFn)( GL::Enum, GL::Intptr, GL::Sizeiptr, void const* );
	typedef void (FLUXGL_API *DeleteBuffersFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DeleteQueriesFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *EndQueryFn)( GL::Enum );
	typedef void (FLUXGL_API *GenBuffersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GenQueriesFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetBufferParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetBufferPointervFn)( GL::Enum, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetBufferSubDataFn)( GL::Enum, GL::Intptr, GL::Sizeiptr, void* );
	typedef void (FLUXGL_API *GetQueryObjectivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetQueryObjectuivFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetQueryivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsBufferFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsQueryFn)( GL::UInt );
	typedef void* (FLUXGL_API *MapBufferFn)( GL::Enum, GL::Enum );
	typedef GL::Boolean (FLUXGL_API *UnmapBufferFn)( GL::Enum );
	//-//-- 
	//- Core 2.0
	typedef void (FLUXGL_API *AttachShaderFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BindAttribLocationFn)( GL::UInt, GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *BlendEquationSeparateFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *CompileShaderFn)( GL::UInt );
	typedef GL::UInt (FLUXGL_API *CreateProgramFn)( );
	typedef GL::UInt (FLUXGL_API *CreateShaderFn)( GL::Enum );
	typedef void (FLUXGL_API *DeleteProgramFn)( GL::UInt );
	typedef void (FLUXGL_API *DeleteShaderFn)( GL::UInt );
	typedef void (FLUXGL_API *DetachShaderFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *DisableVertexAttribArrayFn)( GL::UInt );
	typedef void (FLUXGL_API *DrawBuffersFn)( GL::Sizei, GL::Enum const* );
	typedef void (FLUXGL_API *EnableVertexAttribArrayFn)( GL::UInt );
	typedef void (FLUXGL_API *GetActiveAttribFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Int*, GL::Enum*, GL::Char* );
	typedef void (FLUXGL_API *GetActiveUniformFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Int*, GL::Enum*, GL::Char* );
	typedef void (FLUXGL_API *GetAttachedShadersFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::UInt* );
	typedef GL::Int (FLUXGL_API *GetAttribLocationFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *GetProgramInfoLogFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetProgramivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetShaderInfoLogFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetShaderSourceFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetShaderivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Int (FLUXGL_API *GetUniformLocationFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *GetUniformfvFn)( GL::UInt, GL::Int, GL::Float* );
	typedef void (FLUXGL_API *GetUniformivFn)( GL::UInt, GL::Int, GL::Int* );
	typedef void (FLUXGL_API *GetVertexAttribPointervFn)( GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetVertexAttribdvFn)( GL::UInt, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetVertexAttribfvFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVertexAttribivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsProgramFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsShaderFn)( GL::UInt );
	typedef void (FLUXGL_API *LinkProgramFn)( GL::UInt );
	typedef void (FLUXGL_API *ShaderSourceFn)( GL::UInt, GL::Sizei, GL::Char const* const*, GL::Int const* );
	typedef void (FLUXGL_API *StencilFuncSeparateFn)( GL::Enum, GL::Enum, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *StencilMaskSeparateFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *StencilOpSeparateFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *Uniform1fFn)( GL::Int, GL::Float );
	typedef void (FLUXGL_API *Uniform1fvFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform1iFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform1ivFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *Uniform2fFn)( GL::Int, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Uniform2fvFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform2iFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform2ivFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *Uniform3fFn)( GL::Int, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Uniform3fvFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform3iFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform3ivFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *Uniform4fFn)( GL::Int, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Uniform4fvFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform4iFn)( GL::Int, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform4ivFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *UniformMatrix2fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix3fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix4fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UseProgramFn)( GL::UInt );
	typedef void (FLUXGL_API *ValidateProgramFn)( GL::UInt );
	typedef void (FLUXGL_API *VertexAttrib1dFn)( GL::UInt, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib1dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib1fFn)( GL::UInt, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib1fvFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib1sFn)( GL::UInt, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib1svFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib2dFn)( GL::UInt, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib2dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib2fFn)( GL::UInt, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib2fvFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib2sFn)( GL::UInt, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib2svFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib3dFn)( GL::UInt, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib3dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib3fFn)( GL::UInt, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib3fvFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib3sFn)( GL::UInt, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib3svFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4NbvFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VertexAttrib4NivFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttrib4NsvFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4NubFn)( GL::UInt, GL::UByte, GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *VertexAttrib4NubvFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttrib4NuivFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttrib4NusvFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *VertexAttrib4bvFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VertexAttrib4dFn)( GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib4dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib4fFn)( GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib4fvFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib4ivFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttrib4sFn)( GL::UInt, GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib4svFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4ubvFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttrib4uivFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttrib4usvFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *VertexAttribPointerFn)( GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::Sizei, void const* );
	//-//-- 
	//- Core 2.1
	typedef void (FLUXGL_API *UniformMatrix2x3fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix2x4fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix3x2fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix3x4fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix4x2fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix4x3fvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	//-//-- 
	//- Core 3.0
	typedef void (FLUXGL_API *BeginConditionalRenderFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *BeginTransformFeedbackFn)( GL::Enum );
	typedef void (FLUXGL_API *BindBufferBaseFn)( GL::Enum, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BindBufferRangeFn)( GL::Enum, GL::UInt, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *BindFragDataLocationFn)( GL::UInt, GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *BindFramebufferFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BindRenderbufferFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BindVertexArrayFn)( GL::UInt );
	typedef void (FLUXGL_API *BlitFramebufferFn)( GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Bitfield, GL::Enum );
	typedef GL::Enum (FLUXGL_API *CheckFramebufferStatusFn)( GL::Enum );
	typedef void (FLUXGL_API *ClampColorFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *ClearBufferfiFn)( GL::Enum, GL::Int, GL::Float, GL::Int );
	typedef void (FLUXGL_API *ClearBufferfvFn)( GL::Enum, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *ClearBufferivFn)( GL::Enum, GL::Int, GL::Int const* );
	typedef void (FLUXGL_API *ClearBufferuivFn)( GL::Enum, GL::Int, GL::UInt const* );
	typedef void (FLUXGL_API *ColorMaskiFn)( GL::UInt, GL::Boolean, GL::Boolean, GL::Boolean, GL::Boolean );
	typedef void (FLUXGL_API *DeleteFramebuffersFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DeleteRenderbuffersFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DeleteVertexArraysFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DisableiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *EnableiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *EndConditionalRenderFn)( );
	typedef void (FLUXGL_API *EndTransformFeedbackFn)( );
	typedef void (FLUXGL_API *FlushMappedBufferRangeFn)( GL::Enum, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *FramebufferRenderbufferFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *FramebufferTexture1DFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *FramebufferTexture2DFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *FramebufferTexture3DFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *FramebufferTextureLayerFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *GenFramebuffersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GenRenderbuffersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GenVertexArraysFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GenerateMipmapFn)( GL::Enum );
	typedef void (FLUXGL_API *GetBooleani_vFn)( GL::Enum, GL::UInt, GL::Boolean* );
	typedef GL::Int (FLUXGL_API *GetFragDataLocationFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *GetFramebufferAttachmentParameterivFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetIntegeri_vFn)( GL::Enum, GL::UInt, GL::Int* );
	typedef void (FLUXGL_API *GetRenderbufferParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef GL::UByte const* (FLUXGL_API *GetStringiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *GetTexParameterIivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTexParameterIuivFn)( GL::Enum, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetTransformFeedbackVaryingFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Sizei*, GL::Enum*, GL::Char* );
	typedef void (FLUXGL_API *GetUniformuivFn)( GL::UInt, GL::Int, GL::UInt* );
	typedef void (FLUXGL_API *GetVertexAttribIivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexAttribIuivFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsEnablediFn)( GL::Enum, GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsFramebufferFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsRenderbufferFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsVertexArrayFn)( GL::UInt );
	typedef void* (FLUXGL_API *MapBufferRangeFn)( GL::Enum, GL::Intptr, GL::Sizeiptr, GL::Bitfield );
	typedef void (FLUXGL_API *RenderbufferStorageFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *RenderbufferStorageMultisampleFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *TexParameterIivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TexParameterIuivFn)( GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TransformFeedbackVaryingsFn)( GL::UInt, GL::Sizei, GL::Char const* const*, GL::Enum );
	typedef void (FLUXGL_API *Uniform1uiFn)( GL::Int, GL::UInt );
	typedef void (FLUXGL_API *Uniform1uivFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *Uniform2uiFn)( GL::Int, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Uniform2uivFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *Uniform3uiFn)( GL::Int, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Uniform3uivFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *Uniform4uiFn)( GL::Int, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Uniform4uivFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI1iFn)( GL::UInt, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI1ivFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI1uiFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI1uivFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI2iFn)( GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI2ivFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI2uiFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI2uivFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI3iFn)( GL::UInt, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI3ivFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI3uiFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI3uivFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI4bvFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VertexAttribI4iFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI4ivFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI4svFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttribI4ubvFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttribI4uiFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI4uivFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI4usvFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *VertexAttribIPointerFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei, void const* );
	//-//-- 
	//- Core 3.1
	// BindBufferBaseFn already defined in 3.0_core
	// BindBufferRangeFn already defined in 3.0_core
	typedef void (FLUXGL_API *CopyBufferSubDataFn)( GL::Enum, GL::Enum, GL::Intptr, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *DrawArraysInstancedFn)( GL::Enum, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DrawElementsInstancedFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Sizei );
	typedef void (FLUXGL_API *GetActiveUniformBlockNameFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetActiveUniformBlockivFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetActiveUniformNameFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetActiveUniformsivFn)( GL::UInt, GL::Sizei, GL::UInt const*, GL::Enum, GL::Int* );
	// GetIntegeri_vFn already defined in 3.0_core
	typedef GL::UInt (FLUXGL_API *GetUniformBlockIndexFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *GetUniformIndicesFn)( GL::UInt, GL::Sizei, GL::Char const* const*, GL::UInt* );
	typedef void (FLUXGL_API *PrimitiveRestartIndexFn)( GL::UInt );
	typedef void (FLUXGL_API *TexBufferFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *UniformBlockBindingFn)( GL::UInt, GL::UInt, GL::UInt );
	//-//-- 
	//- Core 3.2
	typedef GL::Enum (FLUXGL_API *ClientWaitSyncFn)( GL::Sync, GL::Bitfield, GL::UInt64 );
	typedef void (FLUXGL_API *DeleteSyncFn)( GL::Sync );
	typedef void (FLUXGL_API *DrawElementsBaseVertexFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Int );
	typedef void (FLUXGL_API *DrawElementsInstancedBaseVertexFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *DrawRangeElementsBaseVertexFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei, GL::Enum, void const*, GL::Int );
	typedef GL::Sync (FLUXGL_API *FenceSyncFn)( GL::Enum, GL::Bitfield );
	typedef void (FLUXGL_API *FramebufferTextureFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *GetBufferParameteri64vFn)( GL::Enum, GL::Enum, GL::Int64* );
	typedef void (FLUXGL_API *GetInteger64i_vFn)( GL::Enum, GL::UInt, GL::Int64* );
	typedef void (FLUXGL_API *GetInteger64vFn)( GL::Enum, GL::Int64* );
	typedef void (FLUXGL_API *GetMultisamplefvFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetSyncivFn)( GL::Sync, GL::Enum, GL::Sizei, GL::Sizei*, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsSyncFn)( GL::Sync );
	typedef void (FLUXGL_API *MultiDrawElementsBaseVertexFn)( GL::Enum, GL::Sizei const*, GL::Enum, void const* const*, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProvokingVertexFn)( GL::Enum );
	typedef void (FLUXGL_API *SampleMaskiFn)( GL::UInt, GL::Bitfield );
	typedef void (FLUXGL_API *TexImage2DMultisampleFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TexImage3DMultisampleFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *WaitSyncFn)( GL::Sync, GL::Bitfield, GL::UInt64 );
	//-//-- 
	//- Compatibility 3.2
	// AccumFn already defined in 1.0_core
	// AlphaFuncFn already defined in 1.0_core
	// AreTexturesResidentFn already defined in 1.1_core
	// ArrayElementFn already defined in 1.1_core
	// BeginFn already defined in 1.0_core
	// BitmapFn already defined in 1.0_core
	// CallListFn already defined in 1.0_core
	// CallListsFn already defined in 1.0_core
	// ClearAccumFn already defined in 1.0_core
	// ClearIndexFn already defined in 1.0_core
	// ClientActiveTextureFn already defined in 1.3_core
	// ClipPlaneFn already defined in 1.0_core
	// Color3bFn already defined in 1.0_core
	// Color3bvFn already defined in 1.0_core
	// Color3dFn already defined in 1.0_core
	// Color3dvFn already defined in 1.0_core
	// Color3fFn already defined in 1.0_core
	// Color3fvFn already defined in 1.0_core
	// Color3iFn already defined in 1.0_core
	// Color3ivFn already defined in 1.0_core
	// Color3sFn already defined in 1.0_core
	// Color3svFn already defined in 1.0_core
	// Color3ubFn already defined in 1.0_core
	// Color3ubvFn already defined in 1.0_core
	// Color3uiFn already defined in 1.0_core
	// Color3uivFn already defined in 1.0_core
	// Color3usFn already defined in 1.0_core
	// Color3usvFn already defined in 1.0_core
	// Color4bFn already defined in 1.0_core
	// Color4bvFn already defined in 1.0_core
	// Color4dFn already defined in 1.0_core
	// Color4dvFn already defined in 1.0_core
	// Color4fFn already defined in 1.0_core
	// Color4fvFn already defined in 1.0_core
	// Color4iFn already defined in 1.0_core
	// Color4ivFn already defined in 1.0_core
	// Color4sFn already defined in 1.0_core
	// Color4svFn already defined in 1.0_core
	// Color4ubFn already defined in 1.0_core
	// Color4ubvFn already defined in 1.0_core
	// Color4uiFn already defined in 1.0_core
	// Color4uivFn already defined in 1.0_core
	// Color4usFn already defined in 1.0_core
	// Color4usvFn already defined in 1.0_core
	// ColorMaterialFn already defined in 1.0_core
	// ColorPointerFn already defined in 1.1_core
	// CopyPixelsFn already defined in 1.0_core
	// DeleteListsFn already defined in 1.0_core
	// DisableClientStateFn already defined in 1.1_core
	// DrawPixelsFn already defined in 1.0_core
	// EdgeFlagFn already defined in 1.0_core
	// EdgeFlagPointerFn already defined in 1.1_core
	// EdgeFlagvFn already defined in 1.0_core
	// EnableClientStateFn already defined in 1.1_core
	// EndFn already defined in 1.0_core
	// EndListFn already defined in 1.0_core
	// EvalCoord1dFn already defined in 1.0_core
	// EvalCoord1dvFn already defined in 1.0_core
	// EvalCoord1fFn already defined in 1.0_core
	// EvalCoord1fvFn already defined in 1.0_core
	// EvalCoord2dFn already defined in 1.0_core
	// EvalCoord2dvFn already defined in 1.0_core
	// EvalCoord2fFn already defined in 1.0_core
	// EvalCoord2fvFn already defined in 1.0_core
	// EvalMesh1Fn already defined in 1.0_core
	// EvalMesh2Fn already defined in 1.0_core
	// EvalPoint1Fn already defined in 1.0_core
	// EvalPoint2Fn already defined in 1.0_core
	// FeedbackBufferFn already defined in 1.0_core
	// FogCoordPointerFn already defined in 1.4_core
	// FogCoorddFn already defined in 1.4_core
	// FogCoorddvFn already defined in 1.4_core
	// FogCoordfFn already defined in 1.4_core
	// FogCoordfvFn already defined in 1.4_core
	// FogfFn already defined in 1.0_core
	// FogfvFn already defined in 1.0_core
	// FogiFn already defined in 1.0_core
	// FogivFn already defined in 1.0_core
	// FrustumFn already defined in 1.0_core
	// GenListsFn already defined in 1.0_core
	// GetClipPlaneFn already defined in 1.0_core
	// GetLightfvFn already defined in 1.0_core
	// GetLightivFn already defined in 1.0_core
	// GetMapdvFn already defined in 1.0_core
	// GetMapfvFn already defined in 1.0_core
	// GetMapivFn already defined in 1.0_core
	// GetMaterialfvFn already defined in 1.0_core
	// GetMaterialivFn already defined in 1.0_core
	// GetPixelMapfvFn already defined in 1.0_core
	// GetPixelMapuivFn already defined in 1.0_core
	// GetPixelMapusvFn already defined in 1.0_core
	// GetPointervFn already defined in 1.1_core
	// GetPolygonStippleFn already defined in 1.0_core
	// GetTexEnvfvFn already defined in 1.0_core
	// GetTexEnvivFn already defined in 1.0_core
	// GetTexGendvFn already defined in 1.0_core
	// GetTexGenfvFn already defined in 1.0_core
	// GetTexGenivFn already defined in 1.0_core
	// IndexMaskFn already defined in 1.0_core
	// IndexPointerFn already defined in 1.1_core
	// IndexdFn already defined in 1.0_core
	// IndexdvFn already defined in 1.0_core
	// IndexfFn already defined in 1.0_core
	// IndexfvFn already defined in 1.0_core
	// IndexiFn already defined in 1.0_core
	// IndexivFn already defined in 1.0_core
	// IndexsFn already defined in 1.0_core
	// IndexsvFn already defined in 1.0_core
	// IndexubFn already defined in 1.1_core
	// IndexubvFn already defined in 1.1_core
	// InitNamesFn already defined in 1.0_core
	// InterleavedArraysFn already defined in 1.1_core
	// IsListFn already defined in 1.0_core
	// LightModelfFn already defined in 1.0_core
	// LightModelfvFn already defined in 1.0_core
	// LightModeliFn already defined in 1.0_core
	// LightModelivFn already defined in 1.0_core
	// LightfFn already defined in 1.0_core
	// LightfvFn already defined in 1.0_core
	// LightiFn already defined in 1.0_core
	// LightivFn already defined in 1.0_core
	// LineStippleFn already defined in 1.0_core
	// ListBaseFn already defined in 1.0_core
	// LoadIdentityFn already defined in 1.0_core
	// LoadMatrixdFn already defined in 1.0_core
	// LoadMatrixfFn already defined in 1.0_core
	// LoadNameFn already defined in 1.0_core
	// LoadTransposeMatrixdFn already defined in 1.3_core
	// LoadTransposeMatrixfFn already defined in 1.3_core
	// Map1dFn already defined in 1.0_core
	// Map1fFn already defined in 1.0_core
	// Map2dFn already defined in 1.0_core
	// Map2fFn already defined in 1.0_core
	// MapGrid1dFn already defined in 1.0_core
	// MapGrid1fFn already defined in 1.0_core
	// MapGrid2dFn already defined in 1.0_core
	// MapGrid2fFn already defined in 1.0_core
	// MaterialfFn already defined in 1.0_core
	// MaterialfvFn already defined in 1.0_core
	// MaterialiFn already defined in 1.0_core
	// MaterialivFn already defined in 1.0_core
	// MatrixModeFn already defined in 1.0_core
	// MultMatrixdFn already defined in 1.0_core
	// MultMatrixfFn already defined in 1.0_core
	// MultTransposeMatrixdFn already defined in 1.3_core
	// MultTransposeMatrixfFn already defined in 1.3_core
	// MultiTexCoord1dFn already defined in 1.3_core
	// MultiTexCoord1dvFn already defined in 1.3_core
	// MultiTexCoord1fFn already defined in 1.3_core
	// MultiTexCoord1fvFn already defined in 1.3_core
	// MultiTexCoord1iFn already defined in 1.3_core
	// MultiTexCoord1ivFn already defined in 1.3_core
	// MultiTexCoord1sFn already defined in 1.3_core
	// MultiTexCoord1svFn already defined in 1.3_core
	// MultiTexCoord2dFn already defined in 1.3_core
	// MultiTexCoord2dvFn already defined in 1.3_core
	// MultiTexCoord2fFn already defined in 1.3_core
	// MultiTexCoord2fvFn already defined in 1.3_core
	// MultiTexCoord2iFn already defined in 1.3_core
	// MultiTexCoord2ivFn already defined in 1.3_core
	// MultiTexCoord2sFn already defined in 1.3_core
	// MultiTexCoord2svFn already defined in 1.3_core
	// MultiTexCoord3dFn already defined in 1.3_core
	// MultiTexCoord3dvFn already defined in 1.3_core
	// MultiTexCoord3fFn already defined in 1.3_core
	// MultiTexCoord3fvFn already defined in 1.3_core
	// MultiTexCoord3iFn already defined in 1.3_core
	// MultiTexCoord3ivFn already defined in 1.3_core
	// MultiTexCoord3sFn already defined in 1.3_core
	// MultiTexCoord3svFn already defined in 1.3_core
	// MultiTexCoord4dFn already defined in 1.3_core
	// MultiTexCoord4dvFn already defined in 1.3_core
	// MultiTexCoord4fFn already defined in 1.3_core
	// MultiTexCoord4fvFn already defined in 1.3_core
	// MultiTexCoord4iFn already defined in 1.3_core
	// MultiTexCoord4ivFn already defined in 1.3_core
	// MultiTexCoord4sFn already defined in 1.3_core
	// MultiTexCoord4svFn already defined in 1.3_core
	// NewListFn already defined in 1.0_core
	// Normal3bFn already defined in 1.0_core
	// Normal3bvFn already defined in 1.0_core
	// Normal3dFn already defined in 1.0_core
	// Normal3dvFn already defined in 1.0_core
	// Normal3fFn already defined in 1.0_core
	// Normal3fvFn already defined in 1.0_core
	// Normal3iFn already defined in 1.0_core
	// Normal3ivFn already defined in 1.0_core
	// Normal3sFn already defined in 1.0_core
	// Normal3svFn already defined in 1.0_core
	// NormalPointerFn already defined in 1.1_core
	// OrthoFn already defined in 1.0_core
	// PassThroughFn already defined in 1.0_core
	// PixelMapfvFn already defined in 1.0_core
	// PixelMapuivFn already defined in 1.0_core
	// PixelMapusvFn already defined in 1.0_core
	// PixelTransferfFn already defined in 1.0_core
	// PixelTransferiFn already defined in 1.0_core
	// PixelZoomFn already defined in 1.0_core
	// PolygonStippleFn already defined in 1.0_core
	// PopAttribFn already defined in 1.0_core
	// PopClientAttribFn already defined in 1.1_core
	// PopMatrixFn already defined in 1.0_core
	// PopNameFn already defined in 1.0_core
	// PrioritizeTexturesFn already defined in 1.1_core
	// PushAttribFn already defined in 1.0_core
	// PushClientAttribFn already defined in 1.1_core
	// PushMatrixFn already defined in 1.0_core
	// PushNameFn already defined in 1.0_core
	// RasterPos2dFn already defined in 1.0_core
	// RasterPos2dvFn already defined in 1.0_core
	// RasterPos2fFn already defined in 1.0_core
	// RasterPos2fvFn already defined in 1.0_core
	// RasterPos2iFn already defined in 1.0_core
	// RasterPos2ivFn already defined in 1.0_core
	// RasterPos2sFn already defined in 1.0_core
	// RasterPos2svFn already defined in 1.0_core
	// RasterPos3dFn already defined in 1.0_core
	// RasterPos3dvFn already defined in 1.0_core
	// RasterPos3fFn already defined in 1.0_core
	// RasterPos3fvFn already defined in 1.0_core
	// RasterPos3iFn already defined in 1.0_core
	// RasterPos3ivFn already defined in 1.0_core
	// RasterPos3sFn already defined in 1.0_core
	// RasterPos3svFn already defined in 1.0_core
	// RasterPos4dFn already defined in 1.0_core
	// RasterPos4dvFn already defined in 1.0_core
	// RasterPos4fFn already defined in 1.0_core
	// RasterPos4fvFn already defined in 1.0_core
	// RasterPos4iFn already defined in 1.0_core
	// RasterPos4ivFn already defined in 1.0_core
	// RasterPos4sFn already defined in 1.0_core
	// RasterPos4svFn already defined in 1.0_core
	// RectdFn already defined in 1.0_core
	// RectdvFn already defined in 1.0_core
	// RectfFn already defined in 1.0_core
	// RectfvFn already defined in 1.0_core
	// RectiFn already defined in 1.0_core
	// RectivFn already defined in 1.0_core
	// RectsFn already defined in 1.0_core
	// RectsvFn already defined in 1.0_core
	// RenderModeFn already defined in 1.0_core
	// RotatedFn already defined in 1.0_core
	// RotatefFn already defined in 1.0_core
	// ScaledFn already defined in 1.0_core
	// ScalefFn already defined in 1.0_core
	// SecondaryColor3bFn already defined in 1.4_core
	// SecondaryColor3bvFn already defined in 1.4_core
	// SecondaryColor3dFn already defined in 1.4_core
	// SecondaryColor3dvFn already defined in 1.4_core
	// SecondaryColor3fFn already defined in 1.4_core
	// SecondaryColor3fvFn already defined in 1.4_core
	// SecondaryColor3iFn already defined in 1.4_core
	// SecondaryColor3ivFn already defined in 1.4_core
	// SecondaryColor3sFn already defined in 1.4_core
	// SecondaryColor3svFn already defined in 1.4_core
	// SecondaryColor3ubFn already defined in 1.4_core
	// SecondaryColor3ubvFn already defined in 1.4_core
	// SecondaryColor3uiFn already defined in 1.4_core
	// SecondaryColor3uivFn already defined in 1.4_core
	// SecondaryColor3usFn already defined in 1.4_core
	// SecondaryColor3usvFn already defined in 1.4_core
	// SecondaryColorPointerFn already defined in 1.4_core
	// SelectBufferFn already defined in 1.0_core
	// ShadeModelFn already defined in 1.0_core
	// TexCoord1dFn already defined in 1.0_core
	// TexCoord1dvFn already defined in 1.0_core
	// TexCoord1fFn already defined in 1.0_core
	// TexCoord1fvFn already defined in 1.0_core
	// TexCoord1iFn already defined in 1.0_core
	// TexCoord1ivFn already defined in 1.0_core
	// TexCoord1sFn already defined in 1.0_core
	// TexCoord1svFn already defined in 1.0_core
	// TexCoord2dFn already defined in 1.0_core
	// TexCoord2dvFn already defined in 1.0_core
	// TexCoord2fFn already defined in 1.0_core
	// TexCoord2fvFn already defined in 1.0_core
	// TexCoord2iFn already defined in 1.0_core
	// TexCoord2ivFn already defined in 1.0_core
	// TexCoord2sFn already defined in 1.0_core
	// TexCoord2svFn already defined in 1.0_core
	// TexCoord3dFn already defined in 1.0_core
	// TexCoord3dvFn already defined in 1.0_core
	// TexCoord3fFn already defined in 1.0_core
	// TexCoord3fvFn already defined in 1.0_core
	// TexCoord3iFn already defined in 1.0_core
	// TexCoord3ivFn already defined in 1.0_core
	// TexCoord3sFn already defined in 1.0_core
	// TexCoord3svFn already defined in 1.0_core
	// TexCoord4dFn already defined in 1.0_core
	// TexCoord4dvFn already defined in 1.0_core
	// TexCoord4fFn already defined in 1.0_core
	// TexCoord4fvFn already defined in 1.0_core
	// TexCoord4iFn already defined in 1.0_core
	// TexCoord4ivFn already defined in 1.0_core
	// TexCoord4sFn already defined in 1.0_core
	// TexCoord4svFn already defined in 1.0_core
	// TexCoordPointerFn already defined in 1.1_core
	// TexEnvfFn already defined in 1.0_core
	// TexEnvfvFn already defined in 1.0_core
	// TexEnviFn already defined in 1.0_core
	// TexEnvivFn already defined in 1.0_core
	// TexGendFn already defined in 1.0_core
	// TexGendvFn already defined in 1.0_core
	// TexGenfFn already defined in 1.0_core
	// TexGenfvFn already defined in 1.0_core
	// TexGeniFn already defined in 1.0_core
	// TexGenivFn already defined in 1.0_core
	// TranslatedFn already defined in 1.0_core
	// TranslatefFn already defined in 1.0_core
	// Vertex2dFn already defined in 1.0_core
	// Vertex2dvFn already defined in 1.0_core
	// Vertex2fFn already defined in 1.0_core
	// Vertex2fvFn already defined in 1.0_core
	// Vertex2iFn already defined in 1.0_core
	// Vertex2ivFn already defined in 1.0_core
	// Vertex2sFn already defined in 1.0_core
	// Vertex2svFn already defined in 1.0_core
	// Vertex3dFn already defined in 1.0_core
	// Vertex3dvFn already defined in 1.0_core
	// Vertex3fFn already defined in 1.0_core
	// Vertex3fvFn already defined in 1.0_core
	// Vertex3iFn already defined in 1.0_core
	// Vertex3ivFn already defined in 1.0_core
	// Vertex3sFn already defined in 1.0_core
	// Vertex3svFn already defined in 1.0_core
	// Vertex4dFn already defined in 1.0_core
	// Vertex4dvFn already defined in 1.0_core
	// Vertex4fFn already defined in 1.0_core
	// Vertex4fvFn already defined in 1.0_core
	// Vertex4iFn already defined in 1.0_core
	// Vertex4ivFn already defined in 1.0_core
	// Vertex4sFn already defined in 1.0_core
	// Vertex4svFn already defined in 1.0_core
	// VertexPointerFn already defined in 1.1_core
	// WindowPos2dFn already defined in 1.4_core
	// WindowPos2dvFn already defined in 1.4_core
	// WindowPos2fFn already defined in 1.4_core
	// WindowPos2fvFn already defined in 1.4_core
	// WindowPos2iFn already defined in 1.4_core
	// WindowPos2ivFn already defined in 1.4_core
	// WindowPos2sFn already defined in 1.4_core
	// WindowPos2svFn already defined in 1.4_core
	// WindowPos3dFn already defined in 1.4_core
	// WindowPos3dvFn already defined in 1.4_core
	// WindowPos3fFn already defined in 1.4_core
	// WindowPos3fvFn already defined in 1.4_core
	// WindowPos3iFn already defined in 1.4_core
	// WindowPos3ivFn already defined in 1.4_core
	// WindowPos3sFn already defined in 1.4_core
	// WindowPos3svFn already defined in 1.4_core
	//-//-- 
	//- Core 3.3
	typedef void (FLUXGL_API *BindFragDataLocationIndexedFn)( GL::UInt, GL::UInt, GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *BindSamplerFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *DeleteSamplersFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *GenSamplersFn)( GL::Sizei, GL::UInt* );
	typedef GL::Int (FLUXGL_API *GetFragDataIndexFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *GetQueryObjecti64vFn)( GL::UInt, GL::Enum, GL::Int64* );
	typedef void (FLUXGL_API *GetQueryObjectui64vFn)( GL::UInt, GL::Enum, GL::UInt64* );
	typedef void (FLUXGL_API *GetSamplerParameterIivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetSamplerParameterIuivFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetSamplerParameterfvFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetSamplerParameterivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsSamplerFn)( GL::UInt );
	typedef void (FLUXGL_API *QueryCounterFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *SamplerParameterIivFn)( GL::UInt, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *SamplerParameterIuivFn)( GL::UInt, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *SamplerParameterfFn)( GL::UInt, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *SamplerParameterfvFn)( GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *SamplerParameteriFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *SamplerParameterivFn)( GL::UInt, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribDivisorFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribP1uiFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribP1uivFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribP2uiFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribP2uivFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribP3uiFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribP3uivFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribP4uiFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribP4uivFn)( GL::UInt, GL::Enum, GL::Boolean, GL::UInt const* );
	//-//-- 
	//- Compatibility 3.3
	typedef void (FLUXGL_API *ColorP3uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *ColorP3uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *ColorP4uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *ColorP4uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *MultiTexCoordP1uiFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *MultiTexCoordP1uivFn)( GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *MultiTexCoordP2uiFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *MultiTexCoordP2uivFn)( GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *MultiTexCoordP3uiFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *MultiTexCoordP3uivFn)( GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *MultiTexCoordP4uiFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *MultiTexCoordP4uivFn)( GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *NormalP3uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *NormalP3uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *SecondaryColorP3uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *SecondaryColorP3uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TexCoordP1uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TexCoordP1uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TexCoordP2uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TexCoordP2uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TexCoordP3uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TexCoordP3uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TexCoordP4uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TexCoordP4uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *VertexP2uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexP2uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *VertexP3uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexP3uivFn)( GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *VertexP4uiFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexP4uivFn)( GL::Enum, GL::UInt const* );
	//-//-- 
	//- Core 4.0
	typedef void (FLUXGL_API *BeginQueryIndexedFn)( GL::Enum, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BindTransformFeedbackFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BlendEquationSeparateiFn)( GL::UInt, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BlendEquationiFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *BlendFuncSeparateiFn)( GL::UInt, GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BlendFunciFn)( GL::UInt, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *DeleteTransformFeedbacksFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DrawArraysIndirectFn)( GL::Enum, void const* );
	typedef void (FLUXGL_API *DrawElementsIndirectFn)( GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *DrawTransformFeedbackFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DrawTransformFeedbackStreamFn)( GL::Enum, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *EndQueryIndexedFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *GenTransformFeedbacksFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetActiveSubroutineNameFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetActiveSubroutineUniformNameFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetActiveSubroutineUniformivFn)( GL::UInt, GL::Enum, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetProgramStageivFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetQueryIndexedivFn)( GL::Enum, GL::UInt, GL::Enum, GL::Int* );
	typedef GL::UInt (FLUXGL_API *GetSubroutineIndexFn)( GL::UInt, GL::Enum, GL::Char const* );
	typedef GL::Int (FLUXGL_API *GetSubroutineUniformLocationFn)( GL::UInt, GL::Enum, GL::Char const* );
	typedef void (FLUXGL_API *GetUniformSubroutineuivFn)( GL::Enum, GL::Int, GL::UInt* );
	typedef void (FLUXGL_API *GetUniformdvFn)( GL::UInt, GL::Int, GL::Double* );
	typedef GL::Boolean (FLUXGL_API *IsTransformFeedbackFn)( GL::UInt );
	typedef void (FLUXGL_API *MinSampleShadingFn)( GL::Float );
	typedef void (FLUXGL_API *PatchParameterfvFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PatchParameteriFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PauseTransformFeedbackFn)( );
	typedef void (FLUXGL_API *ResumeTransformFeedbackFn)( );
	typedef void (FLUXGL_API *Uniform1dFn)( GL::Int, GL::Double );
	typedef void (FLUXGL_API *Uniform1dvFn)( GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *Uniform2dFn)( GL::Int, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Uniform2dvFn)( GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *Uniform3dFn)( GL::Int, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Uniform3dvFn)( GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *Uniform4dFn)( GL::Int, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Uniform4dvFn)( GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix2dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix2x3dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix2x4dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix3dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix3x2dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix3x4dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix4dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix4x2dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformMatrix4x3dvFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *UniformSubroutinesuivFn)( GL::Enum, GL::Sizei, GL::UInt const* );
	//-//-- 
	//- Core 4.1
	typedef void (FLUXGL_API *ActiveShaderProgramFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BindProgramPipelineFn)( GL::UInt );
	typedef void (FLUXGL_API *ClearDepthfFn)( GL::Float );
	typedef GL::UInt (FLUXGL_API *CreateShaderProgramvFn)( GL::Enum, GL::Sizei, GL::Char const* const* );
	typedef void (FLUXGL_API *DeleteProgramPipelinesFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DepthRangeArrayvFn)( GL::UInt, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *DepthRangeIndexedFn)( GL::UInt, GL::Double, GL::Double );
	typedef void (FLUXGL_API *DepthRangefFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *GenProgramPipelinesFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetDoublei_vFn)( GL::Enum, GL::UInt, GL::Double* );
	typedef void (FLUXGL_API *GetFloati_vFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetProgramBinaryFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::Enum*, void* );
	typedef void (FLUXGL_API *GetProgramPipelineInfoLogFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetProgramPipelineivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetShaderPrecisionFormatFn)( GL::Enum, GL::Enum, GL::Int*, GL::Int* );
	typedef void (FLUXGL_API *GetVertexAttribLdvFn)( GL::UInt, GL::Enum, GL::Double* );
	typedef GL::Boolean (FLUXGL_API *IsProgramPipelineFn)( GL::UInt );
	typedef void (FLUXGL_API *ProgramBinaryFn)( GL::UInt, GL::Enum, void const*, GL::Sizei );
	typedef void (FLUXGL_API *ProgramParameteriFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform1dFn)( GL::UInt, GL::Int, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform1dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform1fFn)( GL::UInt, GL::Int, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform1fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform1iFn)( GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform1ivFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform1uiFn)( GL::UInt, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform1uivFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniform2dFn)( GL::UInt, GL::Int, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform2dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform2fFn)( GL::UInt, GL::Int, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform2fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform2iFn)( GL::UInt, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform2ivFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform2uiFn)( GL::UInt, GL::Int, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform2uivFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniform3dFn)( GL::UInt, GL::Int, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform3dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform3fFn)( GL::UInt, GL::Int, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform3fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform3iFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform3ivFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform3uiFn)( GL::UInt, GL::Int, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform3uivFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniform4dFn)( GL::UInt, GL::Int, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform4dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform4fFn)( GL::UInt, GL::Int, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform4fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform4iFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform4ivFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform4uiFn)( GL::UInt, GL::Int, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform4uivFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x3dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x3fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x4dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x4fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x2dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x2fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x4dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x4fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x2dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x2fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x3dvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x3fvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ReleaseShaderCompilerFn)( );
	typedef void (FLUXGL_API *ScissorArrayvFn)( GL::UInt, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ScissorIndexedFn)( GL::UInt, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *ScissorIndexedvFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *ShaderBinaryFn)( GL::Sizei, GL::UInt const*, GL::Enum, void const*, GL::Sizei );
	typedef void (FLUXGL_API *UseProgramStagesFn)( GL::UInt, GL::Bitfield, GL::UInt );
	typedef void (FLUXGL_API *ValidateProgramPipelineFn)( GL::UInt );
	typedef void (FLUXGL_API *VertexAttribL1dFn)( GL::UInt, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL1dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribL2dFn)( GL::UInt, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL2dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribL3dFn)( GL::UInt, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL3dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribL4dFn)( GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL4dvFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribLPointerFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *ViewportArrayvFn)( GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ViewportIndexedfFn)( GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ViewportIndexedfvFn)( GL::UInt, GL::Float const* );
	//-//-- 
	//- Core 4.2
	typedef void (FLUXGL_API *BindImageTextureFn)( GL::UInt, GL::UInt, GL::Int, GL::Boolean, GL::Int, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *DrawArraysInstancedBaseInstanceFn)( GL::Enum, GL::Int, GL::Sizei, GL::Sizei, GL::UInt );
	typedef void (FLUXGL_API *DrawElementsInstancedBaseInstanceFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Sizei, GL::UInt );
	typedef void (FLUXGL_API *DrawElementsInstancedBaseVertexBaseInstanceFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Sizei, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *DrawTransformFeedbackInstancedFn)( GL::Enum, GL::UInt, GL::Sizei );
	typedef void (FLUXGL_API *DrawTransformFeedbackStreamInstancedFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei );
	typedef void (FLUXGL_API *GetActiveAtomicCounterBufferivFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetInternalformativFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, GL::Int* );
	typedef void (FLUXGL_API *MemoryBarrierFn)( GL::Bitfield );
	typedef void (FLUXGL_API *TexStorage1DFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *TexStorage2DFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *TexStorage3DFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei );
	//-//-- 
	//- Core 4.3
	typedef void (FLUXGL_API *BindVertexBufferFn)( GL::UInt, GL::UInt, GL::Intptr, GL::Sizei );
	typedef void (FLUXGL_API *ClearBufferDataFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClearBufferSubDataFn)( GL::Enum, GL::Enum, GL::Intptr, GL::Sizeiptr, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *CopyImageSubDataFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DebugMessageCallbackFn)( GL::DEBUGPROC, void const* );
	typedef void (FLUXGL_API *DebugMessageControlFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, GL::UInt const*, GL::Boolean );
	typedef void (FLUXGL_API *DebugMessageInsertFn)( GL::Enum, GL::Enum, GL::UInt, GL::Enum, GL::Sizei, GL::Char const* );
	typedef void (FLUXGL_API *DispatchComputeFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *DispatchComputeIndirectFn)( GL::Intptr );
	typedef void (FLUXGL_API *FramebufferParameteriFn)( GL::Enum, GL::Enum, GL::Int );
	typedef GL::UInt (FLUXGL_API *GetDebugMessageLogFn)( GL::UInt, GL::Sizei, GL::Enum*, GL::Enum*, GL::UInt*, GL::Enum*, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetFramebufferParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetInternalformati64vFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, GL::Int64* );
	typedef void (FLUXGL_API *GetObjectLabelFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetObjectPtrLabelFn)( void const*, GL::Sizei, GL::Sizei*, GL::Char* );
	// GetPointervFn already defined in 1.1_core
	// GetPointervFn already defined in 1.1_core
	typedef void (FLUXGL_API *GetProgramInterfaceivFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef GL::UInt (FLUXGL_API *GetProgramResourceIndexFn)( GL::UInt, GL::Enum, GL::Char const* );
	typedef GL::Int (FLUXGL_API *GetProgramResourceLocationFn)( GL::UInt, GL::Enum, GL::Char const* );
	typedef GL::Int (FLUXGL_API *GetProgramResourceLocationIndexFn)( GL::UInt, GL::Enum, GL::Char const* );
	typedef void (FLUXGL_API *GetProgramResourceNameFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetProgramResourceivFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Enum const*, GL::Sizei, GL::Sizei*, GL::Int* );
	typedef void (FLUXGL_API *InvalidateBufferDataFn)( GL::UInt );
	typedef void (FLUXGL_API *InvalidateBufferSubDataFn)( GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *InvalidateFramebufferFn)( GL::Enum, GL::Sizei, GL::Enum const* );
	typedef void (FLUXGL_API *InvalidateSubFramebufferFn)( GL::Enum, GL::Sizei, GL::Enum const*, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *InvalidateTexImageFn)( GL::UInt, GL::Int );
	typedef void (FLUXGL_API *InvalidateTexSubImageFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawArraysIndirectFn)( GL::Enum, void const*, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawElementsIndirectFn)( GL::Enum, GL::Enum, void const*, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *ObjectLabelFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Char const* );
	typedef void (FLUXGL_API *ObjectPtrLabelFn)( void const*, GL::Sizei, GL::Char const* );
	typedef void (FLUXGL_API *PopDebugGroupFn)( );
	typedef void (FLUXGL_API *PushDebugGroupFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Char const* );
	typedef void (FLUXGL_API *ShaderStorageBlockBindingFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *TexBufferRangeFn)( GL::Enum, GL::Enum, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *TexStorage2DMultisampleFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TexStorage3DMultisampleFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureViewFn)( GL::UInt, GL::Enum, GL::UInt, GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribBindingFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribFormatFn)( GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribIFormatFn)( GL::UInt, GL::Int, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribLFormatFn)( GL::UInt, GL::Int, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexBindingDivisorFn)( GL::UInt, GL::UInt );
	//-//-- 
	//- Core 4.4
	typedef void (FLUXGL_API *BindBuffersBaseFn)( GL::Enum, GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *BindBuffersRangeFn)( GL::Enum, GL::UInt, GL::Sizei, GL::UInt const*, GL::Intptr const*, GL::Sizeiptr const* );
	typedef void (FLUXGL_API *BindImageTexturesFn)( GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *BindSamplersFn)( GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *BindTexturesFn)( GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *BindVertexBuffersFn)( GL::UInt, GL::Sizei, GL::UInt const*, GL::Intptr const*, GL::Sizei const* );
	typedef void (FLUXGL_API *BufferStorageFn)( GL::Enum, GL::Sizeiptr, void const*, GL::Bitfield );
	typedef void (FLUXGL_API *ClearTexImageFn)( GL::UInt, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClearTexSubImageFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	//-//-- 
	//- Core 4.5
	typedef void (FLUXGL_API *BindTextureUnitFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BlitNamedFramebufferFn)( GL::UInt, GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Bitfield, GL::Enum );
	typedef GL::Enum (FLUXGL_API *CheckNamedFramebufferStatusFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *ClearNamedBufferDataFn)( GL::UInt, GL::Enum, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClearNamedBufferSubDataFn)( GL::UInt, GL::Enum, GL::Intptr, GL::Sizeiptr, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClearNamedFramebufferfiFn)( GL::UInt, GL::Enum, GL::Float const, GL::Int );
	typedef void (FLUXGL_API *ClearNamedFramebufferfvFn)( GL::UInt, GL::Enum, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *ClearNamedFramebufferivFn)( GL::UInt, GL::Enum, GL::Int, GL::Int const* );
	typedef void (FLUXGL_API *ClearNamedFramebufferuivFn)( GL::UInt, GL::Enum, GL::Int, GL::UInt const* );
	typedef void (FLUXGL_API *ClipControlFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *CompressedTextureSubImage1DFn)( GL::UInt, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureSubImage2DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureSubImage3DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CopyNamedBufferSubDataFn)( GL::UInt, GL::UInt, GL::Intptr, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *CopyTextureSubImage1DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyTextureSubImage2DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *CopyTextureSubImage3DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *CreateBuffersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateFramebuffersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateProgramPipelinesFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateQueriesFn)( GL::Enum, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateRenderbuffersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateSamplersFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateTexturesFn)( GL::Enum, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateTransformFeedbacksFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateVertexArraysFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *DisableVertexArrayAttribFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *EnableVertexArrayAttribFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *FlushMappedNamedBufferRangeFn)( GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *GenerateTextureMipmapFn)( GL::UInt );
	typedef void (FLUXGL_API *GetCompressedTextureImageFn)( GL::UInt, GL::Int, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetCompressedTextureSubImageFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Sizei, void* );
	typedef GL::Enum (FLUXGL_API *GetGraphicsResetStatusFn)( );
	typedef void (FLUXGL_API *GetNamedBufferParameteri64vFn)( GL::UInt, GL::Enum, GL::Int64* );
	typedef void (FLUXGL_API *GetNamedBufferParameterivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedBufferPointervFn)( GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetNamedBufferSubDataFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, void* );
	typedef void (FLUXGL_API *GetNamedFramebufferAttachmentParameterivFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedFramebufferParameterivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedRenderbufferParameterivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetQueryBufferObjecti64vFn)( GL::UInt, GL::UInt, GL::Enum, GL::Intptr );
	typedef void (FLUXGL_API *GetQueryBufferObjectivFn)( GL::UInt, GL::UInt, GL::Enum, GL::Intptr );
	typedef void (FLUXGL_API *GetQueryBufferObjectui64vFn)( GL::UInt, GL::UInt, GL::Enum, GL::Intptr );
	typedef void (FLUXGL_API *GetQueryBufferObjectuivFn)( GL::UInt, GL::UInt, GL::Enum, GL::Intptr );
	typedef void (FLUXGL_API *GetTextureImageFn)( GL::UInt, GL::Int, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetTextureLevelParameterfvFn)( GL::UInt, GL::Int, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTextureLevelParameterivFn)( GL::UInt, GL::Int, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTextureParameterIivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTextureParameterIuivFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetTextureParameterfvFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTextureParameterivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTextureSubImageFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetTransformFeedbacki64_vFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int64* );
	typedef void (FLUXGL_API *GetTransformFeedbacki_vFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int* );
	typedef void (FLUXGL_API *GetTransformFeedbackivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexArrayIndexed64ivFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int64* );
	typedef void (FLUXGL_API *GetVertexArrayIndexedivFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexArrayivFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetnCompressedTexImageFn)( GL::Enum, GL::Int, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnTexImageFn)( GL::Enum, GL::Int, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnUniformdvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double* );
	typedef void (FLUXGL_API *GetnUniformfvFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetnUniformivFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int* );
	typedef void (FLUXGL_API *GetnUniformuivFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *InvalidateNamedFramebufferDataFn)( GL::UInt, GL::Sizei, GL::Enum const* );
	typedef void (FLUXGL_API *InvalidateNamedFramebufferSubDataFn)( GL::UInt, GL::Sizei, GL::Enum const*, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void* (FLUXGL_API *MapNamedBufferFn)( GL::UInt, GL::Enum );
	typedef void* (FLUXGL_API *MapNamedBufferRangeFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, GL::Bitfield );
	typedef void (FLUXGL_API *MemoryBarrierByRegionFn)( GL::Bitfield );
	typedef void (FLUXGL_API *NamedBufferDataFn)( GL::UInt, GL::Sizeiptr, void const*, GL::Enum );
	typedef void (FLUXGL_API *NamedBufferStorageFn)( GL::UInt, GL::Sizeiptr, void const*, GL::Bitfield );
	typedef void (FLUXGL_API *NamedBufferSubDataFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, void const* );
	typedef void (FLUXGL_API *NamedFramebufferDrawBufferFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *NamedFramebufferDrawBuffersFn)( GL::UInt, GL::Sizei, GL::Enum const* );
	typedef void (FLUXGL_API *NamedFramebufferParameteriFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferReadBufferFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *NamedFramebufferRenderbufferFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *NamedFramebufferTextureFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferTextureLayerFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *NamedRenderbufferStorageFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *NamedRenderbufferStorageMultisampleFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *ReadnPixelsFn)( GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *TextureBarrierFn)( );
	typedef void (FLUXGL_API *TextureBufferFn)( GL::UInt, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TextureBufferRangeFn)( GL::UInt, GL::Enum, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *TextureParameterIivFn)( GL::UInt, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TextureParameterIuivFn)( GL::UInt, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TextureParameterfFn)( GL::UInt, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *TextureParameterfvFn)( GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *TextureParameteriFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *TextureParameterivFn)( GL::UInt, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TextureStorage1DFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *TextureStorage2DFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *TextureStorage2DMultisampleFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureStorage3DFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *TextureStorage3DMultisampleFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureSubImage1DFn)( GL::UInt, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TextureSubImage2DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TextureSubImage3DFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TransformFeedbackBufferBaseFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *TransformFeedbackBufferRangeFn)( GL::UInt, GL::UInt, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef GL::Boolean (FLUXGL_API *UnmapNamedBufferFn)( GL::UInt );
	typedef void (FLUXGL_API *VertexArrayAttribBindingFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayAttribFormatFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayAttribIFormatFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayAttribLFormatFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayBindingDivisorFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayElementBufferFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexBufferFn)( GL::UInt, GL::UInt, GL::UInt, GL::Intptr, GL::Sizei );
	typedef void (FLUXGL_API *VertexArrayVertexBuffersFn)( GL::UInt, GL::UInt, GL::Sizei, GL::UInt const*, GL::Intptr const*, GL::Sizei const* );
	//-//-- 
	//- Compatibility 4.5
	typedef void (FLUXGL_API *GetnColorTableFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnConvolutionFilterFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnHistogramFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnMapdvFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Double* );
	typedef void (FLUXGL_API *GetnMapfvFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetnMapivFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Int* );
	typedef void (FLUXGL_API *GetnMinmaxFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnPixelMapfvFn)( GL::Enum, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetnPixelMapuivFn)( GL::Enum, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetnPixelMapusvFn)( GL::Enum, GL::Sizei, GL::UShort* );
	typedef void (FLUXGL_API *GetnPolygonStippleFn)( GL::Sizei, GL::UByte* );
	typedef void (FLUXGL_API *GetnSeparableFilterFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, void*, GL::Sizei, void*, void* );
	//-//-- 
	//- Core 4.6
	typedef void (FLUXGL_API *MultiDrawArraysIndirectCountFn)( GL::Enum, void const*, GL::Intptr, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawElementsIndirectCountFn)( GL::Enum, GL::Enum, void const*, GL::Intptr, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *SpecializeShaderFn)( GL::UInt, GL::Char const*, GL::UInt, GL::UInt const*, GL::UInt const* );
	//-//-- 
	//- Ext: AMD_debug_output
	typedef void (FLUXGL_API *DebugMessageCallbackAMDFn)( GL::DEBUGPROCAMD, void* );
	typedef void (FLUXGL_API *DebugMessageEnableAMDFn)( GL::Enum, GL::Enum, GL::Sizei, GL::UInt const*, GL::Boolean );
	typedef void (FLUXGL_API *DebugMessageInsertAMDFn)( GL::Enum, GL::Enum, GL::UInt, GL::Sizei, GL::Char const* );
	typedef GL::UInt (FLUXGL_API *GetDebugMessageLogAMDFn)( GL::UInt, GL::Sizei, GL::Enum*, GL::UInt*, GL::UInt*, GL::Sizei*, GL::Char* );
	//- end: AMD_debug_output

	//-//-- 
	//- Ext: AMD_draw_buffers_blend
	typedef void (FLUXGL_API *BlendEquationIndexedAMDFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *BlendEquationSeparateIndexedAMDFn)( GL::UInt, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BlendFuncIndexedAMDFn)( GL::UInt, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BlendFuncSeparateIndexedAMDFn)( GL::UInt, GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	//- end: AMD_draw_buffers_blend

	//-//-- 
	//- Ext: AMD_gpu_shader_int64
	typedef void (FLUXGL_API *GetUniformi64vNVFn)( GL::UInt, GL::Int, GL::Int64EXT* );
	typedef void (FLUXGL_API *GetUniformui64vNVFn)( GL::UInt, GL::Int, GL::UInt64EXT* );
	typedef void (FLUXGL_API *ProgramUniform1i64NVFn)( GL::UInt, GL::Int, GL::Int64EXT );
	typedef void (FLUXGL_API *ProgramUniform1i64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform1ui64NVFn)( GL::UInt, GL::Int, GL::UInt64EXT );
	typedef void (FLUXGL_API *ProgramUniform1ui64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform2i64NVFn)( GL::UInt, GL::Int, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *ProgramUniform2i64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform2ui64NVFn)( GL::UInt, GL::Int, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *ProgramUniform2ui64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform3i64NVFn)( GL::UInt, GL::Int, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *ProgramUniform3i64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform3ui64NVFn)( GL::UInt, GL::Int, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *ProgramUniform3ui64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform4i64NVFn)( GL::UInt, GL::Int, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *ProgramUniform4i64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *ProgramUniform4ui64NVFn)( GL::UInt, GL::Int, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *ProgramUniform4ui64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *Uniform1i64NVFn)( GL::Int, GL::Int64EXT );
	typedef void (FLUXGL_API *Uniform1i64vNVFn)( GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *Uniform1ui64NVFn)( GL::Int, GL::UInt64EXT );
	typedef void (FLUXGL_API *Uniform1ui64vNVFn)( GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *Uniform2i64NVFn)( GL::Int, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *Uniform2i64vNVFn)( GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *Uniform2ui64NVFn)( GL::Int, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *Uniform2ui64vNVFn)( GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *Uniform3i64NVFn)( GL::Int, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *Uniform3i64vNVFn)( GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *Uniform3ui64NVFn)( GL::Int, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *Uniform3ui64vNVFn)( GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *Uniform4i64NVFn)( GL::Int, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *Uniform4i64vNVFn)( GL::Int, GL::Sizei, GL::Int64EXT const* );
	typedef void (FLUXGL_API *Uniform4ui64NVFn)( GL::Int, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *Uniform4ui64vNVFn)( GL::Int, GL::Sizei, GL::UInt64EXT const* );
	//- end: AMD_gpu_shader_int64

	//-//-- 
	//- Ext: AMD_interleaved_elements
	typedef void (FLUXGL_API *VertexAttribParameteriAMDFn)( GL::UInt, GL::Enum, GL::Int );
	//- end: AMD_interleaved_elements

	//-//-- 
	//- Ext: AMD_multi_draw_indirect
	typedef void (FLUXGL_API *MultiDrawArraysIndirectAMDFn)( GL::Enum, void const*, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawElementsIndirectAMDFn)( GL::Enum, GL::Enum, void const*, GL::Sizei, GL::Sizei );
	//- end: AMD_multi_draw_indirect

	//-//-- 
	//- Ext: AMD_name_gen_delete
	typedef void (FLUXGL_API *DeleteNamesAMDFn)( GL::Enum, GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *GenNamesAMDFn)( GL::Enum, GL::UInt, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsNameAMDFn)( GL::Enum, GL::UInt );
	//- end: AMD_name_gen_delete

	//-//-- 
	//- Ext: AMD_occlusion_query_event
	typedef void (FLUXGL_API *QueryObjectParameteruiAMDFn)( GL::Enum, GL::UInt, GL::Enum, GL::UInt );
	//- end: AMD_occlusion_query_event

	//-//-- 
	//- Ext: AMD_performance_monitor
	typedef void (FLUXGL_API *BeginPerfMonitorAMDFn)( GL::UInt );
	typedef void (FLUXGL_API *DeletePerfMonitorsAMDFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *EndPerfMonitorAMDFn)( GL::UInt );
	typedef void (FLUXGL_API *GenPerfMonitorsAMDFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetPerfMonitorCounterDataAMDFn)( GL::UInt, GL::Enum, GL::Sizei, GL::UInt*, GL::Int* );
	typedef void (FLUXGL_API *GetPerfMonitorCounterInfoAMDFn)( GL::UInt, GL::UInt, GL::Enum, void* );
	typedef void (FLUXGL_API *GetPerfMonitorCounterStringAMDFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetPerfMonitorCountersAMDFn)( GL::UInt, GL::Int*, GL::Int*, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetPerfMonitorGroupStringAMDFn)( GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *GetPerfMonitorGroupsAMDFn)( GL::Int*, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *SelectPerfMonitorCountersAMDFn)( GL::UInt, GL::Boolean, GL::UInt, GL::Int, GL::UInt* );
	//- end: AMD_performance_monitor

	//-//-- 
	//- Ext: AMD_sample_positions
	typedef void (FLUXGL_API *SetMultisamplefvAMDFn)( GL::Enum, GL::UInt, GL::Float const* );
	//- end: AMD_sample_positions

	//-//-- 
	//- Ext: AMD_sparse_texture
	typedef void (FLUXGL_API *TexStorageSparseAMDFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Sizei, GL::Bitfield );
	typedef void (FLUXGL_API *TextureStorageSparseAMDFn)( GL::UInt, GL::Enum, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Sizei, GL::Bitfield );
	//- end: AMD_sparse_texture

	//-//-- 
	//- Ext: AMD_stencil_operation_extended
	typedef void (FLUXGL_API *StencilOpValueAMDFn)( GL::Enum, GL::UInt );
	//- end: AMD_stencil_operation_extended

	//-//-- 
	//- Ext: AMD_vertex_shader_tessellator
	typedef void (FLUXGL_API *TessellationFactorAMDFn)( GL::Float );
	typedef void (FLUXGL_API *TessellationModeAMDFn)( GL::Enum );
	//- end: AMD_vertex_shader_tessellator

	//-//-- 
	//- Ext: APPLE_element_array
	typedef void (FLUXGL_API *DrawElementArrayAPPLEFn)( GL::Enum, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *DrawRangeElementArrayAPPLEFn)( GL::Enum, GL::UInt, GL::UInt, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *ElementPointerAPPLEFn)( GL::Enum, void const* );
	typedef void (FLUXGL_API *MultiDrawElementArrayAPPLEFn)( GL::Enum, GL::Int const*, GL::Sizei const*, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawRangeElementArrayAPPLEFn)( GL::Enum, GL::UInt, GL::UInt, GL::Int const*, GL::Sizei const*, GL::Sizei );
	//- end: APPLE_element_array

	//-//-- 
	//- Ext: APPLE_fence
	typedef void (FLUXGL_API *DeleteFencesAPPLEFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *FinishFenceAPPLEFn)( GL::UInt );
	typedef void (FLUXGL_API *FinishObjectAPPLEFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *GenFencesAPPLEFn)( GL::Sizei, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsFenceAPPLEFn)( GL::UInt );
	typedef void (FLUXGL_API *SetFenceAPPLEFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *TestFenceAPPLEFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *TestObjectAPPLEFn)( GL::Enum, GL::UInt );
	//- end: APPLE_fence

	//-//-- 
	//- Ext: APPLE_flush_buffer_range
	typedef void (FLUXGL_API *BufferParameteriAPPLEFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *FlushMappedBufferRangeAPPLEFn)( GL::Enum, GL::Intptr, GL::Sizeiptr );
	//- end: APPLE_flush_buffer_range

	//-//-- 
	//- Ext: APPLE_object_purgeable
	typedef void (FLUXGL_API *GetObjectParameterivAPPLEFn)( GL::Enum, GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Enum (FLUXGL_API *ObjectPurgeableAPPLEFn)( GL::Enum, GL::UInt, GL::Enum );
	typedef GL::Enum (FLUXGL_API *ObjectUnpurgeableAPPLEFn)( GL::Enum, GL::UInt, GL::Enum );
	//- end: APPLE_object_purgeable

	//-//-- 
	//- Ext: APPLE_texture_range
	typedef void (FLUXGL_API *GetTexParameterPointervAPPLEFn)( GL::Enum, GL::Enum, void* * );
	typedef void (FLUXGL_API *TextureRangeAPPLEFn)( GL::Enum, GL::Sizei, void const* );
	//- end: APPLE_texture_range

	//-//-- 
	//- Ext: APPLE_vertex_array_object
	typedef void (FLUXGL_API *BindVertexArrayAPPLEFn)( GL::UInt );
	typedef void (FLUXGL_API *DeleteVertexArraysAPPLEFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *GenVertexArraysAPPLEFn)( GL::Sizei, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsVertexArrayAPPLEFn)( GL::UInt );
	//- end: APPLE_vertex_array_object

	//-//-- 
	//- Ext: APPLE_vertex_array_range
	typedef void (FLUXGL_API *FlushVertexArrayRangeAPPLEFn)( GL::Sizei, void* );
	typedef void (FLUXGL_API *VertexArrayParameteriAPPLEFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *VertexArrayRangeAPPLEFn)( GL::Sizei, void* );
	//- end: APPLE_vertex_array_range

	//-//-- 
	//- Ext: APPLE_vertex_program_evaluators
	typedef void (FLUXGL_API *DisableVertexAttribAPPLEFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *EnableVertexAttribAPPLEFn)( GL::UInt, GL::Enum );
	typedef GL::Boolean (FLUXGL_API *IsVertexAttribEnabledAPPLEFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *MapVertexAttrib1dAPPLEFn)( GL::UInt, GL::UInt, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double const* );
	typedef void (FLUXGL_API *MapVertexAttrib1fAPPLEFn)( GL::UInt, GL::UInt, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *MapVertexAttrib2dAPPLEFn)( GL::UInt, GL::UInt, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double const* );
	typedef void (FLUXGL_API *MapVertexAttrib2fAPPLEFn)( GL::UInt, GL::UInt, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float const* );
	//- end: APPLE_vertex_program_evaluators

	//-//-- 
	//- Ext: ARB_ES2_compatibility
	// ClearDepthfFn already defined in 4.1_core
	// DepthRangefFn already defined in 4.1_core
	// GetShaderPrecisionFormatFn already defined in 4.1_core
	// ReleaseShaderCompilerFn already defined in 4.1_core
	// ShaderBinaryFn already defined in 4.1_core
	//- end: ARB_ES2_compatibility

	//-//-- 
	//- Ext: ARB_ES3_1_compatibility
	// MemoryBarrierByRegionFn already defined in 4.5_core
	//- end: ARB_ES3_1_compatibility

	//-//-- 
	//- Ext: ARB_ES3_2_compatibility
	typedef void (FLUXGL_API *PrimitiveBoundingBoxARBFn)( GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float );
	//- end: ARB_ES3_2_compatibility

	//-//-- 
	//- Ext: ARB_base_instance
	// DrawArraysInstancedBaseInstanceFn already defined in 4.2_core
	// DrawElementsInstancedBaseInstanceFn already defined in 4.2_core
	// DrawElementsInstancedBaseVertexBaseInstanceFn already defined in 4.2_core
	//- end: ARB_base_instance

	//-//-- 
	//- Ext: ARB_bindless_texture
	typedef GL::UInt64 (FLUXGL_API *GetImageHandleARBFn)( GL::UInt, GL::Int, GL::Boolean, GL::Int, GL::Enum );
	typedef GL::UInt64 (FLUXGL_API *GetTextureHandleARBFn)( GL::UInt );
	typedef GL::UInt64 (FLUXGL_API *GetTextureSamplerHandleARBFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *GetVertexAttribLui64vARBFn)( GL::UInt, GL::Enum, GL::UInt64EXT* );
	typedef GL::Boolean (FLUXGL_API *IsImageHandleResidentARBFn)( GL::UInt64 );
	typedef GL::Boolean (FLUXGL_API *IsTextureHandleResidentARBFn)( GL::UInt64 );
	typedef void (FLUXGL_API *MakeImageHandleNonResidentARBFn)( GL::UInt64 );
	typedef void (FLUXGL_API *MakeImageHandleResidentARBFn)( GL::UInt64, GL::Enum );
	typedef void (FLUXGL_API *MakeTextureHandleNonResidentARBFn)( GL::UInt64 );
	typedef void (FLUXGL_API *MakeTextureHandleResidentARBFn)( GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniformHandleui64ARBFn)( GL::UInt, GL::Int, GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniformHandleui64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *UniformHandleui64ARBFn)( GL::Int, GL::UInt64 );
	typedef void (FLUXGL_API *UniformHandleui64vARBFn)( GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *VertexAttribL1ui64ARBFn)( GL::UInt, GL::UInt64EXT );
	typedef void (FLUXGL_API *VertexAttribL1ui64vARBFn)( GL::UInt, GL::UInt64EXT const* );
	//- end: ARB_bindless_texture

	//-//-- 
	//- Ext: ARB_blend_func_extended
	// BindFragDataLocationIndexedFn already defined in 3.3_core
	// GetFragDataIndexFn already defined in 3.3_core
	//- end: ARB_blend_func_extended

	//-//-- 
	//- Ext: ARB_buffer_storage
	// BufferStorageFn already defined in 4.4_core
	//- end: ARB_buffer_storage

	//-//-- 
	//- Ext: ARB_cl_event
	typedef GL::Sync (FLUXGL_API *CreateSyncFromCLeventARBFn)( struct _cl_context *, struct _cl_event *, GL::Bitfield );
	//- end: ARB_cl_event

	//-//-- 
	//- Ext: ARB_clear_buffer_object
	// ClearBufferDataFn already defined in 4.3_core
	// ClearBufferSubDataFn already defined in 4.3_core
	//- end: ARB_clear_buffer_object

	//-//-- 
	//- Ext: ARB_clear_texture
	// ClearTexImageFn already defined in 4.4_core
	// ClearTexSubImageFn already defined in 4.4_core
	//- end: ARB_clear_texture

	//-//-- 
	//- Ext: ARB_clip_control
	// ClipControlFn already defined in 4.5_core
	//- end: ARB_clip_control

	//-//-- 
	//- Ext: ARB_color_buffer_float
	typedef void (FLUXGL_API *ClampColorARBFn)( GL::Enum, GL::Enum );
	//- end: ARB_color_buffer_float

	//-//-- 
	//- Ext: ARB_compute_shader
	// DispatchComputeFn already defined in 4.3_core
	// DispatchComputeIndirectFn already defined in 4.3_core
	//- end: ARB_compute_shader

	//-//-- 
	//- Ext: ARB_compute_variable_group_size
	typedef void (FLUXGL_API *DispatchComputeGroupSizeARBFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	//- end: ARB_compute_variable_group_size

	//-//-- 
	//- Ext: ARB_copy_buffer
	// CopyBufferSubDataFn already defined in 3.1_core
	//- end: ARB_copy_buffer

	//-//-- 
	//- Ext: ARB_copy_image
	// CopyImageSubDataFn already defined in 4.3_core
	//- end: ARB_copy_image

	//-//-- 
	//- Ext: ARB_debug_output
	typedef void (FLUXGL_API *DebugMessageCallbackARBFn)( GL::DEBUGPROCARB, void const* );
	typedef void (FLUXGL_API *DebugMessageControlARBFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, GL::UInt const*, GL::Boolean );
	typedef void (FLUXGL_API *DebugMessageInsertARBFn)( GL::Enum, GL::Enum, GL::UInt, GL::Enum, GL::Sizei, GL::Char const* );
	typedef GL::UInt (FLUXGL_API *GetDebugMessageLogARBFn)( GL::UInt, GL::Sizei, GL::Enum*, GL::Enum*, GL::UInt*, GL::Enum*, GL::Sizei*, GL::Char* );
	//- end: ARB_debug_output

	//-//-- 
	//- Ext: ARB_direct_state_access
	// BindTextureUnitFn already defined in 4.5_core
	// BlitNamedFramebufferFn already defined in 4.5_core
	// CheckNamedFramebufferStatusFn already defined in 4.5_core
	// ClearNamedBufferDataFn already defined in 4.5_core
	// ClearNamedBufferSubDataFn already defined in 4.5_core
	// ClearNamedFramebufferfiFn already defined in 4.5_core
	// ClearNamedFramebufferfvFn already defined in 4.5_core
	// ClearNamedFramebufferivFn already defined in 4.5_core
	// ClearNamedFramebufferuivFn already defined in 4.5_core
	// CompressedTextureSubImage1DFn already defined in 4.5_core
	// CompressedTextureSubImage2DFn already defined in 4.5_core
	// CompressedTextureSubImage3DFn already defined in 4.5_core
	// CopyNamedBufferSubDataFn already defined in 4.5_core
	// CopyTextureSubImage1DFn already defined in 4.5_core
	// CopyTextureSubImage2DFn already defined in 4.5_core
	// CopyTextureSubImage3DFn already defined in 4.5_core
	// CreateBuffersFn already defined in 4.5_core
	// CreateFramebuffersFn already defined in 4.5_core
	// CreateProgramPipelinesFn already defined in 4.5_core
	// CreateQueriesFn already defined in 4.5_core
	// CreateRenderbuffersFn already defined in 4.5_core
	// CreateSamplersFn already defined in 4.5_core
	// CreateTexturesFn already defined in 4.5_core
	// CreateTransformFeedbacksFn already defined in 4.5_core
	// CreateVertexArraysFn already defined in 4.5_core
	// DisableVertexArrayAttribFn already defined in 4.5_core
	// EnableVertexArrayAttribFn already defined in 4.5_core
	// FlushMappedNamedBufferRangeFn already defined in 4.5_core
	// GenerateTextureMipmapFn already defined in 4.5_core
	// GetCompressedTextureImageFn already defined in 4.5_core
	// GetNamedBufferParameteri64vFn already defined in 4.5_core
	// GetNamedBufferParameterivFn already defined in 4.5_core
	// GetNamedBufferPointervFn already defined in 4.5_core
	// GetNamedBufferSubDataFn already defined in 4.5_core
	// GetNamedFramebufferAttachmentParameterivFn already defined in 4.5_core
	// GetNamedFramebufferParameterivFn already defined in 4.5_core
	// GetNamedRenderbufferParameterivFn already defined in 4.5_core
	// GetQueryBufferObjecti64vFn already defined in 4.5_core
	// GetQueryBufferObjectivFn already defined in 4.5_core
	// GetQueryBufferObjectui64vFn already defined in 4.5_core
	// GetQueryBufferObjectuivFn already defined in 4.5_core
	// GetTextureImageFn already defined in 4.5_core
	// GetTextureLevelParameterfvFn already defined in 4.5_core
	// GetTextureLevelParameterivFn already defined in 4.5_core
	// GetTextureParameterIivFn already defined in 4.5_core
	// GetTextureParameterIuivFn already defined in 4.5_core
	// GetTextureParameterfvFn already defined in 4.5_core
	// GetTextureParameterivFn already defined in 4.5_core
	// GetTransformFeedbacki64_vFn already defined in 4.5_core
	// GetTransformFeedbacki_vFn already defined in 4.5_core
	// GetTransformFeedbackivFn already defined in 4.5_core
	// GetVertexArrayIndexed64ivFn already defined in 4.5_core
	// GetVertexArrayIndexedivFn already defined in 4.5_core
	// GetVertexArrayivFn already defined in 4.5_core
	// InvalidateNamedFramebufferDataFn already defined in 4.5_core
	// InvalidateNamedFramebufferSubDataFn already defined in 4.5_core
	// MapNamedBufferFn already defined in 4.5_core
	// MapNamedBufferRangeFn already defined in 4.5_core
	// NamedBufferDataFn already defined in 4.5_core
	// NamedBufferStorageFn already defined in 4.5_core
	// NamedBufferSubDataFn already defined in 4.5_core
	// NamedFramebufferDrawBufferFn already defined in 4.5_core
	// NamedFramebufferDrawBuffersFn already defined in 4.5_core
	// NamedFramebufferParameteriFn already defined in 4.5_core
	// NamedFramebufferReadBufferFn already defined in 4.5_core
	// NamedFramebufferRenderbufferFn already defined in 4.5_core
	// NamedFramebufferTextureFn already defined in 4.5_core
	// NamedFramebufferTextureLayerFn already defined in 4.5_core
	// NamedRenderbufferStorageFn already defined in 4.5_core
	// NamedRenderbufferStorageMultisampleFn already defined in 4.5_core
	// TextureBufferFn already defined in 4.5_core
	// TextureBufferRangeFn already defined in 4.5_core
	// TextureParameterIivFn already defined in 4.5_core
	// TextureParameterIuivFn already defined in 4.5_core
	// TextureParameterfFn already defined in 4.5_core
	// TextureParameterfvFn already defined in 4.5_core
	// TextureParameteriFn already defined in 4.5_core
	// TextureParameterivFn already defined in 4.5_core
	// TextureStorage1DFn already defined in 4.5_core
	// TextureStorage2DFn already defined in 4.5_core
	// TextureStorage2DMultisampleFn already defined in 4.5_core
	// TextureStorage3DFn already defined in 4.5_core
	// TextureStorage3DMultisampleFn already defined in 4.5_core
	// TextureSubImage1DFn already defined in 4.5_core
	// TextureSubImage2DFn already defined in 4.5_core
	// TextureSubImage3DFn already defined in 4.5_core
	// TransformFeedbackBufferBaseFn already defined in 4.5_core
	// TransformFeedbackBufferRangeFn already defined in 4.5_core
	// UnmapNamedBufferFn already defined in 4.5_core
	// VertexArrayAttribBindingFn already defined in 4.5_core
	// VertexArrayAttribFormatFn already defined in 4.5_core
	// VertexArrayAttribIFormatFn already defined in 4.5_core
	// VertexArrayAttribLFormatFn already defined in 4.5_core
	// VertexArrayBindingDivisorFn already defined in 4.5_core
	// VertexArrayElementBufferFn already defined in 4.5_core
	// VertexArrayVertexBufferFn already defined in 4.5_core
	// VertexArrayVertexBuffersFn already defined in 4.5_core
	//- end: ARB_direct_state_access

	//-//-- 
	//- Ext: ARB_draw_buffers
	typedef void (FLUXGL_API *DrawBuffersARBFn)( GL::Sizei, GL::Enum const* );
	//- end: ARB_draw_buffers

	//-//-- 
	//- Ext: ARB_draw_buffers_blend
	typedef void (FLUXGL_API *BlendEquationSeparateiARBFn)( GL::UInt, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BlendEquationiARBFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *BlendFuncSeparateiARBFn)( GL::UInt, GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BlendFunciARBFn)( GL::UInt, GL::Enum, GL::Enum );
	//- end: ARB_draw_buffers_blend

	//-//-- 
	//- Ext: ARB_draw_elements_base_vertex
	// DrawElementsBaseVertexFn already defined in 3.2_core
	// DrawElementsInstancedBaseVertexFn already defined in 3.2_core
	// DrawRangeElementsBaseVertexFn already defined in 3.2_core
	// MultiDrawElementsBaseVertexFn already defined in 3.2_core
	//- end: ARB_draw_elements_base_vertex

	//-//-- 
	//- Ext: ARB_draw_indirect
	// DrawArraysIndirectFn already defined in 4.0_core
	// DrawElementsIndirectFn already defined in 4.0_core
	//- end: ARB_draw_indirect

	//-//-- 
	//- Ext: ARB_draw_instanced
	typedef void (FLUXGL_API *DrawArraysInstancedARBFn)( GL::Enum, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DrawElementsInstancedARBFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Sizei );
	//- end: ARB_draw_instanced

	//-//-- 
	//- Ext: ARB_fragment_program
	typedef void (FLUXGL_API *BindProgramARBFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DeleteProgramsARBFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *GenProgramsARBFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetProgramEnvParameterdvARBFn)( GL::Enum, GL::UInt, GL::Double* );
	typedef void (FLUXGL_API *GetProgramEnvParameterfvARBFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetProgramLocalParameterdvARBFn)( GL::Enum, GL::UInt, GL::Double* );
	typedef void (FLUXGL_API *GetProgramLocalParameterfvARBFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetProgramStringARBFn)( GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetProgramivARBFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsProgramARBFn)( GL::UInt );
	typedef void (FLUXGL_API *ProgramEnvParameter4dARBFn)( GL::Enum, GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramEnvParameter4dvARBFn)( GL::Enum, GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *ProgramEnvParameter4fARBFn)( GL::Enum, GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramEnvParameter4fvARBFn)( GL::Enum, GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *ProgramLocalParameter4dARBFn)( GL::Enum, GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramLocalParameter4dvARBFn)( GL::Enum, GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *ProgramLocalParameter4fARBFn)( GL::Enum, GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramLocalParameter4fvARBFn)( GL::Enum, GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *ProgramStringARBFn)( GL::Enum, GL::Enum, GL::Sizei, void const* );
	//- end: ARB_fragment_program

	//-//-- 
	//- Ext: ARB_framebuffer_no_attachments
	// FramebufferParameteriFn already defined in 4.3_core
	// GetFramebufferParameterivFn already defined in 4.3_core
	//- end: ARB_framebuffer_no_attachments

	//-//-- 
	//- Ext: ARB_framebuffer_object
	// BindFramebufferFn already defined in 3.0_core
	// BindRenderbufferFn already defined in 3.0_core
	// BlitFramebufferFn already defined in 3.0_core
	// CheckFramebufferStatusFn already defined in 3.0_core
	// DeleteFramebuffersFn already defined in 3.0_core
	// DeleteRenderbuffersFn already defined in 3.0_core
	// FramebufferRenderbufferFn already defined in 3.0_core
	// FramebufferTexture1DFn already defined in 3.0_core
	// FramebufferTexture2DFn already defined in 3.0_core
	// FramebufferTexture3DFn already defined in 3.0_core
	// FramebufferTextureLayerFn already defined in 3.0_core
	// GenFramebuffersFn already defined in 3.0_core
	// GenRenderbuffersFn already defined in 3.0_core
	// GenerateMipmapFn already defined in 3.0_core
	// GetFramebufferAttachmentParameterivFn already defined in 3.0_core
	// GetRenderbufferParameterivFn already defined in 3.0_core
	// IsFramebufferFn already defined in 3.0_core
	// IsRenderbufferFn already defined in 3.0_core
	// RenderbufferStorageFn already defined in 3.0_core
	// RenderbufferStorageMultisampleFn already defined in 3.0_core
	//- end: ARB_framebuffer_object

	//-//-- 
	//- Ext: ARB_geometry_shader4
	typedef void (FLUXGL_API *FramebufferTextureARBFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *FramebufferTextureFaceARBFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Enum );
	typedef void (FLUXGL_API *FramebufferTextureLayerARBFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramParameteriARBFn)( GL::UInt, GL::Enum, GL::Int );
	//- end: ARB_geometry_shader4

	//-//-- 
	//- Ext: ARB_get_program_binary
	// GetProgramBinaryFn already defined in 4.1_core
	// ProgramBinaryFn already defined in 4.1_core
	// ProgramParameteriFn already defined in 4.1_core
	//- end: ARB_get_program_binary

	//-//-- 
	//- Ext: ARB_get_texture_sub_image
	// GetCompressedTextureSubImageFn already defined in 4.5_core
	// GetTextureSubImageFn already defined in 4.5_core
	//- end: ARB_get_texture_sub_image

	//-//-- 
	//- Ext: ARB_gpu_shader_fp64
	// GetUniformdvFn already defined in 4.0_core
	// Uniform1dFn already defined in 4.0_core
	// Uniform1dvFn already defined in 4.0_core
	// Uniform2dFn already defined in 4.0_core
	// Uniform2dvFn already defined in 4.0_core
	// Uniform3dFn already defined in 4.0_core
	// Uniform3dvFn already defined in 4.0_core
	// Uniform4dFn already defined in 4.0_core
	// Uniform4dvFn already defined in 4.0_core
	// UniformMatrix2dvFn already defined in 4.0_core
	// UniformMatrix2x3dvFn already defined in 4.0_core
	// UniformMatrix2x4dvFn already defined in 4.0_core
	// UniformMatrix3dvFn already defined in 4.0_core
	// UniformMatrix3x2dvFn already defined in 4.0_core
	// UniformMatrix3x4dvFn already defined in 4.0_core
	// UniformMatrix4dvFn already defined in 4.0_core
	// UniformMatrix4x2dvFn already defined in 4.0_core
	// UniformMatrix4x3dvFn already defined in 4.0_core
	//- end: ARB_gpu_shader_fp64

	//-//-- 
	//- Ext: ARB_gpu_shader_int64
	typedef void (FLUXGL_API *GetUniformi64vARBFn)( GL::UInt, GL::Int, GL::Int64* );
	typedef void (FLUXGL_API *GetUniformui64vARBFn)( GL::UInt, GL::Int, GL::UInt64* );
	typedef void (FLUXGL_API *GetnUniformi64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64* );
	typedef void (FLUXGL_API *GetnUniformui64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64* );
	typedef void (FLUXGL_API *ProgramUniform1i64ARBFn)( GL::UInt, GL::Int, GL::Int64 );
	typedef void (FLUXGL_API *ProgramUniform1i64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *ProgramUniform1ui64ARBFn)( GL::UInt, GL::Int, GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniform1ui64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *ProgramUniform2i64ARBFn)( GL::UInt, GL::Int, GL::Int64, GL::Int64 );
	typedef void (FLUXGL_API *ProgramUniform2i64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *ProgramUniform2ui64ARBFn)( GL::UInt, GL::Int, GL::UInt64, GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniform2ui64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *ProgramUniform3i64ARBFn)( GL::UInt, GL::Int, GL::Int64, GL::Int64, GL::Int64 );
	typedef void (FLUXGL_API *ProgramUniform3i64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *ProgramUniform3ui64ARBFn)( GL::UInt, GL::Int, GL::UInt64, GL::UInt64, GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniform3ui64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *ProgramUniform4i64ARBFn)( GL::UInt, GL::Int, GL::Int64, GL::Int64, GL::Int64, GL::Int64 );
	typedef void (FLUXGL_API *ProgramUniform4i64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *ProgramUniform4ui64ARBFn)( GL::UInt, GL::Int, GL::UInt64, GL::UInt64, GL::UInt64, GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniform4ui64vARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *Uniform1i64ARBFn)( GL::Int, GL::Int64 );
	typedef void (FLUXGL_API *Uniform1i64vARBFn)( GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *Uniform1ui64ARBFn)( GL::Int, GL::UInt64 );
	typedef void (FLUXGL_API *Uniform1ui64vARBFn)( GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *Uniform2i64ARBFn)( GL::Int, GL::Int64, GL::Int64 );
	typedef void (FLUXGL_API *Uniform2i64vARBFn)( GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *Uniform2ui64ARBFn)( GL::Int, GL::UInt64, GL::UInt64 );
	typedef void (FLUXGL_API *Uniform2ui64vARBFn)( GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *Uniform3i64ARBFn)( GL::Int, GL::Int64, GL::Int64, GL::Int64 );
	typedef void (FLUXGL_API *Uniform3i64vARBFn)( GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *Uniform3ui64ARBFn)( GL::Int, GL::UInt64, GL::UInt64, GL::UInt64 );
	typedef void (FLUXGL_API *Uniform3ui64vARBFn)( GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *Uniform4i64ARBFn)( GL::Int, GL::Int64, GL::Int64, GL::Int64, GL::Int64 );
	typedef void (FLUXGL_API *Uniform4i64vARBFn)( GL::Int, GL::Sizei, GL::Int64 const* );
	typedef void (FLUXGL_API *Uniform4ui64ARBFn)( GL::Int, GL::UInt64, GL::UInt64, GL::UInt64, GL::UInt64 );
	typedef void (FLUXGL_API *Uniform4ui64vARBFn)( GL::Int, GL::Sizei, GL::UInt64 const* );
	//- end: ARB_gpu_shader_int64

	//-//-- 
	//- Ext: ARB_imaging
	// BlendColorFn already defined in 1.4_core
	// BlendEquationFn already defined in 1.4_core
	typedef void (FLUXGL_API *ColorSubTableFn)( GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ColorTableFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ColorTableParameterfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *ColorTableParameterivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *ConvolutionFilter1DFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ConvolutionFilter2DFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ConvolutionParameterfFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *ConvolutionParameterfvFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *ConvolutionParameteriFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *ConvolutionParameterivFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *CopyColorSubTableFn)( GL::Enum, GL::Sizei, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyColorTableFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyConvolutionFilter1DFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyConvolutionFilter2DFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *GetColorTableFn)( GL::Enum, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetColorTableParameterfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetColorTableParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetConvolutionFilterFn)( GL::Enum, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetConvolutionParameterfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetConvolutionParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetHistogramFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetHistogramParameterfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetHistogramParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMinmaxFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetMinmaxParameterfvFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMinmaxParameterivFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetSeparableFilterFn)( GL::Enum, GL::Enum, GL::Enum, void*, void*, void* );
	typedef void (FLUXGL_API *HistogramFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Boolean );
	typedef void (FLUXGL_API *MinmaxFn)( GL::Enum, GL::Enum, GL::Boolean );
	typedef void (FLUXGL_API *ResetHistogramFn)( GL::Enum );
	typedef void (FLUXGL_API *ResetMinmaxFn)( GL::Enum );
	typedef void (FLUXGL_API *SeparableFilter2DFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const*, void const* );
	//- end: ARB_imaging

	//-//-- 
	//- Ext: ARB_indirect_parameters
	typedef void (FLUXGL_API *MultiDrawArraysIndirectCountARBFn)( GL::Enum, GL::Intptr, GL::Intptr, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawElementsIndirectCountARBFn)( GL::Enum, GL::Enum, GL::Intptr, GL::Intptr, GL::Sizei, GL::Sizei );
	//- end: ARB_indirect_parameters

	//-//-- 
	//- Ext: ARB_instanced_arrays
	typedef void (FLUXGL_API *VertexAttribDivisorARBFn)( GL::UInt, GL::UInt );
	//- end: ARB_instanced_arrays

	//-//-- 
	//- Ext: ARB_internalformat_query
	// GetInternalformativFn already defined in 4.2_core
	//- end: ARB_internalformat_query

	//-//-- 
	//- Ext: ARB_internalformat_query2
	// GetInternalformati64vFn already defined in 4.3_core
	//- end: ARB_internalformat_query2

	//-//-- 
	//- Ext: ARB_invalidate_subdata
	// InvalidateBufferDataFn already defined in 4.3_core
	// InvalidateBufferSubDataFn already defined in 4.3_core
	// InvalidateFramebufferFn already defined in 4.3_core
	// InvalidateSubFramebufferFn already defined in 4.3_core
	// InvalidateTexImageFn already defined in 4.3_core
	// InvalidateTexSubImageFn already defined in 4.3_core
	//- end: ARB_invalidate_subdata

	//-//-- 
	//- Ext: ARB_map_buffer_range
	// FlushMappedBufferRangeFn already defined in 3.0_core
	// MapBufferRangeFn already defined in 3.0_core
	//- end: ARB_map_buffer_range

	//-//-- 
	//- Ext: ARB_matrix_palette
	typedef void (FLUXGL_API *CurrentPaletteMatrixARBFn)( GL::Int );
	typedef void (FLUXGL_API *MatrixIndexPointerARBFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *MatrixIndexubvARBFn)( GL::Int, GL::UByte const* );
	typedef void (FLUXGL_API *MatrixIndexuivARBFn)( GL::Int, GL::UInt const* );
	typedef void (FLUXGL_API *MatrixIndexusvARBFn)( GL::Int, GL::UShort const* );
	//- end: ARB_matrix_palette

	//-//-- 
	//- Ext: ARB_multi_bind
	// BindBuffersBaseFn already defined in 4.4_core
	// BindBuffersRangeFn already defined in 4.4_core
	// BindImageTexturesFn already defined in 4.4_core
	// BindSamplersFn already defined in 4.4_core
	// BindTexturesFn already defined in 4.4_core
	// BindVertexBuffersFn already defined in 4.4_core
	//- end: ARB_multi_bind

	//-//-- 
	//- Ext: ARB_multi_draw_indirect
	// MultiDrawArraysIndirectFn already defined in 4.3_core
	// MultiDrawElementsIndirectFn already defined in 4.3_core
	//- end: ARB_multi_draw_indirect

	//-//-- 
	//- Ext: ARB_multisample
	typedef void (FLUXGL_API *SampleCoverageARBFn)( GL::Float, GL::Boolean );
	//- end: ARB_multisample

	//-//-- 
	//- Ext: ARB_multitexture
	typedef void (FLUXGL_API *ActiveTextureARBFn)( GL::Enum );
	typedef void (FLUXGL_API *ClientActiveTextureARBFn)( GL::Enum );
	typedef void (FLUXGL_API *MultiTexCoord1dARBFn)( GL::Enum, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord1dvARBFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord1fARBFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord1fvARBFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord1iARBFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord1ivARBFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord1sARBFn)( GL::Enum, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord1svARBFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *MultiTexCoord2dARBFn)( GL::Enum, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord2dvARBFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord2fARBFn)( GL::Enum, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord2fvARBFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord2iARBFn)( GL::Enum, GL::Int, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord2ivARBFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord2sARBFn)( GL::Enum, GL::Short, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord2svARBFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *MultiTexCoord3dARBFn)( GL::Enum, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord3dvARBFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord3fARBFn)( GL::Enum, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord3fvARBFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord3iARBFn)( GL::Enum, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord3ivARBFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord3sARBFn)( GL::Enum, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord3svARBFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *MultiTexCoord4dARBFn)( GL::Enum, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MultiTexCoord4dvARBFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexCoord4fARBFn)( GL::Enum, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexCoord4fvARBFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexCoord4iARBFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *MultiTexCoord4ivARBFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexCoord4sARBFn)( GL::Enum, GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *MultiTexCoord4svARBFn)( GL::Enum, GL::Short const* );
	//- end: ARB_multitexture

	//-//-- 
	//- Ext: ARB_occlusion_query
	typedef void (FLUXGL_API *BeginQueryARBFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DeleteQueriesARBFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *EndQueryARBFn)( GL::Enum );
	typedef void (FLUXGL_API *GenQueriesARBFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetQueryObjectivARBFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetQueryObjectuivARBFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetQueryivARBFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsQueryARBFn)( GL::UInt );
	//- end: ARB_occlusion_query

	//-//-- 
	//- Ext: ARB_parallel_shader_compile
	typedef void (FLUXGL_API *MaxShaderCompilerThreadsARBFn)( GL::UInt );
	//- end: ARB_parallel_shader_compile

	//-//-- 
	//- Ext: ARB_point_parameters
	typedef void (FLUXGL_API *PointParameterfARBFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PointParameterfvARBFn)( GL::Enum, GL::Float const* );
	//- end: ARB_point_parameters

	//-//-- 
	//- Ext: ARB_program_interface_query
	// GetProgramInterfaceivFn already defined in 4.3_core
	// GetProgramResourceIndexFn already defined in 4.3_core
	// GetProgramResourceLocationFn already defined in 4.3_core
	// GetProgramResourceLocationIndexFn already defined in 4.3_core
	// GetProgramResourceNameFn already defined in 4.3_core
	// GetProgramResourceivFn already defined in 4.3_core
	//- end: ARB_program_interface_query

	//-//-- 
	//- Ext: ARB_provoking_vertex
	// ProvokingVertexFn already defined in 3.2_core
	//- end: ARB_provoking_vertex

	//-//-- 
	//- Ext: ARB_robustness
	typedef GL::Enum (FLUXGL_API *GetGraphicsResetStatusARBFn)( );
	typedef void (FLUXGL_API *GetnColorTableARBFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnCompressedTexImageARBFn)( GL::Enum, GL::Int, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnConvolutionFilterARBFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnHistogramARBFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnMapdvARBFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Double* );
	typedef void (FLUXGL_API *GetnMapfvARBFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetnMapivARBFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Int* );
	typedef void (FLUXGL_API *GetnMinmaxARBFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnPixelMapfvARBFn)( GL::Enum, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetnPixelMapuivARBFn)( GL::Enum, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetnPixelMapusvARBFn)( GL::Enum, GL::Sizei, GL::UShort* );
	typedef void (FLUXGL_API *GetnPolygonStippleARBFn)( GL::Sizei, GL::UByte* );
	typedef void (FLUXGL_API *GetnSeparableFilterARBFn)( GL::Enum, GL::Enum, GL::Enum, GL::Sizei, void*, GL::Sizei, void*, void* );
	typedef void (FLUXGL_API *GetnTexImageARBFn)( GL::Enum, GL::Int, GL::Enum, GL::Enum, GL::Sizei, void* );
	typedef void (FLUXGL_API *GetnUniformdvARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double* );
	typedef void (FLUXGL_API *GetnUniformfvARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetnUniformivARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int* );
	typedef void (FLUXGL_API *GetnUniformuivARBFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *ReadnPixelsARBFn)( GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, GL::Sizei, void* );
	//- end: ARB_robustness

	//-//-- 
	//- Ext: ARB_sample_locations
	typedef void (FLUXGL_API *EvaluateDepthValuesARBFn)( );
	typedef void (FLUXGL_API *FramebufferSampleLocationsfvARBFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *NamedFramebufferSampleLocationsfvARBFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Float const* );
	//- end: ARB_sample_locations

	//-//-- 
	//- Ext: ARB_sample_shading
	typedef void (FLUXGL_API *MinSampleShadingARBFn)( GL::Float );
	//- end: ARB_sample_shading

	//-//-- 
	//- Ext: ARB_sampler_objects
	// BindSamplerFn already defined in 3.3_core
	// DeleteSamplersFn already defined in 3.3_core
	// GenSamplersFn already defined in 3.3_core
	// GetSamplerParameterIivFn already defined in 3.3_core
	// GetSamplerParameterIuivFn already defined in 3.3_core
	// GetSamplerParameterfvFn already defined in 3.3_core
	// GetSamplerParameterivFn already defined in 3.3_core
	// IsSamplerFn already defined in 3.3_core
	// SamplerParameterIivFn already defined in 3.3_core
	// SamplerParameterIuivFn already defined in 3.3_core
	// SamplerParameterfFn already defined in 3.3_core
	// SamplerParameterfvFn already defined in 3.3_core
	// SamplerParameteriFn already defined in 3.3_core
	// SamplerParameterivFn already defined in 3.3_core
	//- end: ARB_sampler_objects

	//-//-- 
	//- Ext: ARB_separate_shader_objects
	// ActiveShaderProgramFn already defined in 4.1_core
	// BindProgramPipelineFn already defined in 4.1_core
	// CreateShaderProgramvFn already defined in 4.1_core
	// DeleteProgramPipelinesFn already defined in 4.1_core
	// GenProgramPipelinesFn already defined in 4.1_core
	// GetProgramPipelineInfoLogFn already defined in 4.1_core
	// GetProgramPipelineivFn already defined in 4.1_core
	// IsProgramPipelineFn already defined in 4.1_core
	// ProgramUniform1dFn already defined in 4.1_core
	// ProgramUniform1dvFn already defined in 4.1_core
	// ProgramUniform1fFn already defined in 4.1_core
	// ProgramUniform1fvFn already defined in 4.1_core
	// ProgramUniform1iFn already defined in 4.1_core
	// ProgramUniform1ivFn already defined in 4.1_core
	// ProgramUniform1uiFn already defined in 4.1_core
	// ProgramUniform1uivFn already defined in 4.1_core
	// ProgramUniform2dFn already defined in 4.1_core
	// ProgramUniform2dvFn already defined in 4.1_core
	// ProgramUniform2fFn already defined in 4.1_core
	// ProgramUniform2fvFn already defined in 4.1_core
	// ProgramUniform2iFn already defined in 4.1_core
	// ProgramUniform2ivFn already defined in 4.1_core
	// ProgramUniform2uiFn already defined in 4.1_core
	// ProgramUniform2uivFn already defined in 4.1_core
	// ProgramUniform3dFn already defined in 4.1_core
	// ProgramUniform3dvFn already defined in 4.1_core
	// ProgramUniform3fFn already defined in 4.1_core
	// ProgramUniform3fvFn already defined in 4.1_core
	// ProgramUniform3iFn already defined in 4.1_core
	// ProgramUniform3ivFn already defined in 4.1_core
	// ProgramUniform3uiFn already defined in 4.1_core
	// ProgramUniform3uivFn already defined in 4.1_core
	// ProgramUniform4dFn already defined in 4.1_core
	// ProgramUniform4dvFn already defined in 4.1_core
	// ProgramUniform4fFn already defined in 4.1_core
	// ProgramUniform4fvFn already defined in 4.1_core
	// ProgramUniform4iFn already defined in 4.1_core
	// ProgramUniform4ivFn already defined in 4.1_core
	// ProgramUniform4uiFn already defined in 4.1_core
	// ProgramUniform4uivFn already defined in 4.1_core
	// ProgramUniformMatrix2dvFn already defined in 4.1_core
	// ProgramUniformMatrix2fvFn already defined in 4.1_core
	// ProgramUniformMatrix2x3dvFn already defined in 4.1_core
	// ProgramUniformMatrix2x3fvFn already defined in 4.1_core
	// ProgramUniformMatrix2x4dvFn already defined in 4.1_core
	// ProgramUniformMatrix2x4fvFn already defined in 4.1_core
	// ProgramUniformMatrix3dvFn already defined in 4.1_core
	// ProgramUniformMatrix3fvFn already defined in 4.1_core
	// ProgramUniformMatrix3x2dvFn already defined in 4.1_core
	// ProgramUniformMatrix3x2fvFn already defined in 4.1_core
	// ProgramUniformMatrix3x4dvFn already defined in 4.1_core
	// ProgramUniformMatrix3x4fvFn already defined in 4.1_core
	// ProgramUniformMatrix4dvFn already defined in 4.1_core
	// ProgramUniformMatrix4fvFn already defined in 4.1_core
	// ProgramUniformMatrix4x2dvFn already defined in 4.1_core
	// ProgramUniformMatrix4x2fvFn already defined in 4.1_core
	// ProgramUniformMatrix4x3dvFn already defined in 4.1_core
	// ProgramUniformMatrix4x3fvFn already defined in 4.1_core
	// UseProgramStagesFn already defined in 4.1_core
	// ValidateProgramPipelineFn already defined in 4.1_core
	//- end: ARB_separate_shader_objects

	//-//-- 
	//- Ext: ARB_shader_atomic_counters
	// GetActiveAtomicCounterBufferivFn already defined in 4.2_core
	//- end: ARB_shader_atomic_counters

	//-//-- 
	//- Ext: ARB_shader_image_load_store
	// BindImageTextureFn already defined in 4.2_core
	// MemoryBarrierFn already defined in 4.2_core
	//- end: ARB_shader_image_load_store

	//-//-- 
	//- Ext: ARB_shader_objects
	typedef void (FLUXGL_API *AttachObjectARBFn)( GL::HandleARB, GL::HandleARB );
	typedef void (FLUXGL_API *CompileShaderARBFn)( GL::HandleARB );
	typedef GL::HandleARB (FLUXGL_API *CreateProgramObjectARBFn)( );
	typedef GL::HandleARB (FLUXGL_API *CreateShaderObjectARBFn)( GL::Enum );
	typedef void (FLUXGL_API *DeleteObjectARBFn)( GL::HandleARB );
	typedef void (FLUXGL_API *DetachObjectARBFn)( GL::HandleARB, GL::HandleARB );
	typedef void (FLUXGL_API *GetActiveUniformARBFn)( GL::HandleARB, GL::UInt, GL::Sizei, GL::Sizei*, GL::Int*, GL::Enum*, GL::CharARB* );
	typedef void (FLUXGL_API *GetAttachedObjectsARBFn)( GL::HandleARB, GL::Sizei, GL::Sizei*, GL::HandleARB* );
	typedef GL::HandleARB (FLUXGL_API *GetHandleARBFn)( GL::Enum );
	typedef void (FLUXGL_API *GetInfoLogARBFn)( GL::HandleARB, GL::Sizei, GL::Sizei*, GL::CharARB* );
	typedef void (FLUXGL_API *GetObjectParameterfvARBFn)( GL::HandleARB, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetObjectParameterivARBFn)( GL::HandleARB, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetShaderSourceARBFn)( GL::HandleARB, GL::Sizei, GL::Sizei*, GL::CharARB* );
	typedef GL::Int (FLUXGL_API *GetUniformLocationARBFn)( GL::HandleARB, GL::CharARB const* );
	typedef void (FLUXGL_API *GetUniformfvARBFn)( GL::HandleARB, GL::Int, GL::Float* );
	typedef void (FLUXGL_API *GetUniformivARBFn)( GL::HandleARB, GL::Int, GL::Int* );
	typedef void (FLUXGL_API *LinkProgramARBFn)( GL::HandleARB );
	typedef void (FLUXGL_API *ShaderSourceARBFn)( GL::HandleARB, GL::Sizei, GL::CharARB const* *, GL::Int const* );
	typedef void (FLUXGL_API *Uniform1fARBFn)( GL::Int, GL::Float );
	typedef void (FLUXGL_API *Uniform1fvARBFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform1iARBFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform1ivARBFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *Uniform2fARBFn)( GL::Int, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Uniform2fvARBFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform2iARBFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform2ivARBFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *Uniform3fARBFn)( GL::Int, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Uniform3fvARBFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform3iARBFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform3ivARBFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *Uniform4fARBFn)( GL::Int, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Uniform4fvARBFn)( GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *Uniform4iARBFn)( GL::Int, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Uniform4ivARBFn)( GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *UniformMatrix2fvARBFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix3fvARBFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UniformMatrix4fvARBFn)( GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *UseProgramObjectARBFn)( GL::HandleARB );
	typedef void (FLUXGL_API *ValidateProgramARBFn)( GL::HandleARB );
	//- end: ARB_shader_objects

	//-//-- 
	//- Ext: ARB_shader_storage_buffer_object
	// ShaderStorageBlockBindingFn already defined in 4.3_core
	//- end: ARB_shader_storage_buffer_object

	//-//-- 
	//- Ext: ARB_shader_subroutine
	// GetActiveSubroutineNameFn already defined in 4.0_core
	// GetActiveSubroutineUniformNameFn already defined in 4.0_core
	// GetActiveSubroutineUniformivFn already defined in 4.0_core
	// GetProgramStageivFn already defined in 4.0_core
	// GetSubroutineIndexFn already defined in 4.0_core
	// GetSubroutineUniformLocationFn already defined in 4.0_core
	// GetUniformSubroutineuivFn already defined in 4.0_core
	// UniformSubroutinesuivFn already defined in 4.0_core
	//- end: ARB_shader_subroutine

	//-//-- 
	//- Ext: ARB_shading_language_include
	typedef void (FLUXGL_API *CompileShaderIncludeARBFn)( GL::UInt, GL::Sizei, GL::Char const* const*, GL::Int const* );
	typedef void (FLUXGL_API *DeleteNamedStringARBFn)( GL::Int, GL::Char const* );
	typedef void (FLUXGL_API *GetNamedStringARBFn)( GL::Int, GL::Char const*, GL::Sizei, GL::Int*, GL::Char* );
	typedef void (FLUXGL_API *GetNamedStringivARBFn)( GL::Int, GL::Char const*, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsNamedStringARBFn)( GL::Int, GL::Char const* );
	typedef void (FLUXGL_API *NamedStringARBFn)( GL::Enum, GL::Int, GL::Char const*, GL::Int, GL::Char const* );
	//- end: ARB_shading_language_include

	//-//-- 
	//- Ext: ARB_sparse_buffer
	typedef void (FLUXGL_API *BufferPageCommitmentARBFn)( GL::Enum, GL::Intptr, GL::Sizeiptr, GL::Boolean );
	typedef void (FLUXGL_API *NamedBufferPageCommitmentARBFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, GL::Boolean );
	typedef void (FLUXGL_API *NamedBufferPageCommitmentEXTFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, GL::Boolean );
	//- end: ARB_sparse_buffer

	//-//-- 
	//- Ext: ARB_sparse_texture
	typedef void (FLUXGL_API *TexPageCommitmentARBFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	//- end: ARB_sparse_texture

	//-//-- 
	//- Ext: ARB_sync
	// ClientWaitSyncFn already defined in 3.2_core
	// DeleteSyncFn already defined in 3.2_core
	// FenceSyncFn already defined in 3.2_core
	// GetInteger64vFn already defined in 3.2_core
	// GetSyncivFn already defined in 3.2_core
	// IsSyncFn already defined in 3.2_core
	// WaitSyncFn already defined in 3.2_core
	//- end: ARB_sync

	//-//-- 
	//- Ext: ARB_tessellation_shader
	// PatchParameterfvFn already defined in 4.0_core
	// PatchParameteriFn already defined in 4.0_core
	//- end: ARB_tessellation_shader

	//-//-- 
	//- Ext: ARB_texture_barrier
	// TextureBarrierFn already defined in 4.5_core
	//- end: ARB_texture_barrier

	//-//-- 
	//- Ext: ARB_texture_buffer_object
	typedef void (FLUXGL_API *TexBufferARBFn)( GL::Enum, GL::Enum, GL::UInt );
	//- end: ARB_texture_buffer_object

	//-//-- 
	//- Ext: ARB_texture_buffer_range
	// TexBufferRangeFn already defined in 4.3_core
	//- end: ARB_texture_buffer_range

	//-//-- 
	//- Ext: ARB_texture_compression
	typedef void (FLUXGL_API *CompressedTexImage1DARBFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexImage2DARBFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexImage3DARBFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexSubImage1DARBFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexSubImage2DARBFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTexSubImage3DARBFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *GetCompressedTexImageARBFn)( GL::Enum, GL::Int, void* );
	//- end: ARB_texture_compression

	//-//-- 
	//- Ext: ARB_texture_multisample
	// GetMultisamplefvFn already defined in 3.2_core
	// SampleMaskiFn already defined in 3.2_core
	// TexImage2DMultisampleFn already defined in 3.2_core
	// TexImage3DMultisampleFn already defined in 3.2_core
	//- end: ARB_texture_multisample

	//-//-- 
	//- Ext: ARB_texture_storage
	// TexStorage1DFn already defined in 4.2_core
	// TexStorage2DFn already defined in 4.2_core
	// TexStorage3DFn already defined in 4.2_core
	//- end: ARB_texture_storage

	//-//-- 
	//- Ext: ARB_texture_storage_multisample
	// TexStorage2DMultisampleFn already defined in 4.3_core
	// TexStorage3DMultisampleFn already defined in 4.3_core
	//- end: ARB_texture_storage_multisample

	//-//-- 
	//- Ext: ARB_texture_view
	// TextureViewFn already defined in 4.3_core
	//- end: ARB_texture_view

	//-//-- 
	//- Ext: ARB_timer_query
	// GetQueryObjecti64vFn already defined in 3.3_core
	// GetQueryObjectui64vFn already defined in 3.3_core
	// QueryCounterFn already defined in 3.3_core
	//- end: ARB_timer_query

	//-//-- 
	//- Ext: ARB_transform_feedback2
	// BindTransformFeedbackFn already defined in 4.0_core
	// DeleteTransformFeedbacksFn already defined in 4.0_core
	// DrawTransformFeedbackFn already defined in 4.0_core
	// GenTransformFeedbacksFn already defined in 4.0_core
	// IsTransformFeedbackFn already defined in 4.0_core
	// PauseTransformFeedbackFn already defined in 4.0_core
	// ResumeTransformFeedbackFn already defined in 4.0_core
	//- end: ARB_transform_feedback2

	//-//-- 
	//- Ext: ARB_transform_feedback3
	// BeginQueryIndexedFn already defined in 4.0_core
	// DrawTransformFeedbackStreamFn already defined in 4.0_core
	// EndQueryIndexedFn already defined in 4.0_core
	// GetQueryIndexedivFn already defined in 4.0_core
	//- end: ARB_transform_feedback3

	//-//-- 
	//- Ext: ARB_transform_feedback_instanced
	// DrawTransformFeedbackInstancedFn already defined in 4.2_core
	// DrawTransformFeedbackStreamInstancedFn already defined in 4.2_core
	//- end: ARB_transform_feedback_instanced

	//-//-- 
	//- Ext: ARB_transpose_matrix
	typedef void (FLUXGL_API *LoadTransposeMatrixdARBFn)( GL::Double const* );
	typedef void (FLUXGL_API *LoadTransposeMatrixfARBFn)( GL::Float const* );
	typedef void (FLUXGL_API *MultTransposeMatrixdARBFn)( GL::Double const* );
	typedef void (FLUXGL_API *MultTransposeMatrixfARBFn)( GL::Float const* );
	//- end: ARB_transpose_matrix

	//-//-- 
	//- Ext: ARB_uniform_buffer_object
	// BindBufferBaseFn already defined in 3.0_core
	// BindBufferRangeFn already defined in 3.0_core
	// GetActiveUniformBlockNameFn already defined in 3.1_core
	// GetActiveUniformBlockivFn already defined in 3.1_core
	// GetActiveUniformNameFn already defined in 3.1_core
	// GetActiveUniformsivFn already defined in 3.1_core
	// GetIntegeri_vFn already defined in 3.0_core
	// GetUniformBlockIndexFn already defined in 3.1_core
	// GetUniformIndicesFn already defined in 3.1_core
	// UniformBlockBindingFn already defined in 3.1_core
	//- end: ARB_uniform_buffer_object

	//-//-- 
	//- Ext: ARB_vertex_array_object
	// BindVertexArrayFn already defined in 3.0_core
	// DeleteVertexArraysFn already defined in 3.0_core
	// GenVertexArraysFn already defined in 3.0_core
	// IsVertexArrayFn already defined in 3.0_core
	//- end: ARB_vertex_array_object

	//-//-- 
	//- Ext: ARB_vertex_attrib_64bit
	// GetVertexAttribLdvFn already defined in 4.1_core
	// VertexAttribL1dFn already defined in 4.1_core
	// VertexAttribL1dvFn already defined in 4.1_core
	// VertexAttribL2dFn already defined in 4.1_core
	// VertexAttribL2dvFn already defined in 4.1_core
	// VertexAttribL3dFn already defined in 4.1_core
	// VertexAttribL3dvFn already defined in 4.1_core
	// VertexAttribL4dFn already defined in 4.1_core
	// VertexAttribL4dvFn already defined in 4.1_core
	// VertexAttribLPointerFn already defined in 4.1_core
	//- end: ARB_vertex_attrib_64bit

	//-//-- 
	//- Ext: ARB_vertex_attrib_binding
	// BindVertexBufferFn already defined in 4.3_core
	// VertexAttribBindingFn already defined in 4.3_core
	// VertexAttribFormatFn already defined in 4.3_core
	// VertexAttribIFormatFn already defined in 4.3_core
	// VertexAttribLFormatFn already defined in 4.3_core
	// VertexBindingDivisorFn already defined in 4.3_core
	//- end: ARB_vertex_attrib_binding

	//-//-- 
	//- Ext: ARB_vertex_blend
	typedef void (FLUXGL_API *VertexBlendARBFn)( GL::Int );
	typedef void (FLUXGL_API *WeightPointerARBFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *WeightbvARBFn)( GL::Int, GL::Byte const* );
	typedef void (FLUXGL_API *WeightdvARBFn)( GL::Int, GL::Double const* );
	typedef void (FLUXGL_API *WeightfvARBFn)( GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *WeightivARBFn)( GL::Int, GL::Int const* );
	typedef void (FLUXGL_API *WeightsvARBFn)( GL::Int, GL::Short const* );
	typedef void (FLUXGL_API *WeightubvARBFn)( GL::Int, GL::UByte const* );
	typedef void (FLUXGL_API *WeightuivARBFn)( GL::Int, GL::UInt const* );
	typedef void (FLUXGL_API *WeightusvARBFn)( GL::Int, GL::UShort const* );
	//- end: ARB_vertex_blend

	//-//-- 
	//- Ext: ARB_vertex_buffer_object
	typedef void (FLUXGL_API *BindBufferARBFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BufferDataARBFn)( GL::Enum, GL::SizeiptrARB, void const*, GL::Enum );
	typedef void (FLUXGL_API *BufferSubDataARBFn)( GL::Enum, GL::IntptrARB, GL::SizeiptrARB, void const* );
	typedef void (FLUXGL_API *DeleteBuffersARBFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *GenBuffersARBFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetBufferParameterivARBFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetBufferPointervARBFn)( GL::Enum, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetBufferSubDataARBFn)( GL::Enum, GL::IntptrARB, GL::SizeiptrARB, void* );
	typedef GL::Boolean (FLUXGL_API *IsBufferARBFn)( GL::UInt );
	typedef void* (FLUXGL_API *MapBufferARBFn)( GL::Enum, GL::Enum );
	typedef GL::Boolean (FLUXGL_API *UnmapBufferARBFn)( GL::Enum );
	//- end: ARB_vertex_buffer_object

	//-//-- 
	//- Ext: ARB_vertex_program
	// BindProgramARBFn already defined in ARB_fragment_program
	// DeleteProgramsARBFn already defined in ARB_fragment_program
	typedef void (FLUXGL_API *DisableVertexAttribArrayARBFn)( GL::UInt );
	typedef void (FLUXGL_API *EnableVertexAttribArrayARBFn)( GL::UInt );
	// GenProgramsARBFn already defined in ARB_fragment_program
	// GetProgramEnvParameterdvARBFn already defined in ARB_fragment_program
	// GetProgramEnvParameterfvARBFn already defined in ARB_fragment_program
	// GetProgramLocalParameterdvARBFn already defined in ARB_fragment_program
	// GetProgramLocalParameterfvARBFn already defined in ARB_fragment_program
	// GetProgramStringARBFn already defined in ARB_fragment_program
	// GetProgramivARBFn already defined in ARB_fragment_program
	typedef void (FLUXGL_API *GetVertexAttribPointervARBFn)( GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetVertexAttribdvARBFn)( GL::UInt, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetVertexAttribfvARBFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVertexAttribivARBFn)( GL::UInt, GL::Enum, GL::Int* );
	// IsProgramARBFn already defined in ARB_fragment_program
	// ProgramEnvParameter4dARBFn already defined in ARB_fragment_program
	// ProgramEnvParameter4dvARBFn already defined in ARB_fragment_program
	// ProgramEnvParameter4fARBFn already defined in ARB_fragment_program
	// ProgramEnvParameter4fvARBFn already defined in ARB_fragment_program
	// ProgramLocalParameter4dARBFn already defined in ARB_fragment_program
	// ProgramLocalParameter4dvARBFn already defined in ARB_fragment_program
	// ProgramLocalParameter4fARBFn already defined in ARB_fragment_program
	// ProgramLocalParameter4fvARBFn already defined in ARB_fragment_program
	// ProgramStringARBFn already defined in ARB_fragment_program
	typedef void (FLUXGL_API *VertexAttrib1dARBFn)( GL::UInt, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib1dvARBFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib1fARBFn)( GL::UInt, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib1fvARBFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib1sARBFn)( GL::UInt, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib1svARBFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib2dARBFn)( GL::UInt, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib2dvARBFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib2fARBFn)( GL::UInt, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib2fvARBFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib2sARBFn)( GL::UInt, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib2svARBFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib3dARBFn)( GL::UInt, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib3dvARBFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib3fARBFn)( GL::UInt, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib3fvARBFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib3sARBFn)( GL::UInt, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib3svARBFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4NbvARBFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VertexAttrib4NivARBFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttrib4NsvARBFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4NubARBFn)( GL::UInt, GL::UByte, GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *VertexAttrib4NubvARBFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttrib4NuivARBFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttrib4NusvARBFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *VertexAttrib4bvARBFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VertexAttrib4dARBFn)( GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib4dvARBFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib4fARBFn)( GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib4fvARBFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib4ivARBFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttrib4sARBFn)( GL::UInt, GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib4svARBFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4ubvARBFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttrib4uivARBFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttrib4usvARBFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *VertexAttribPointerARBFn)( GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::Sizei, void const* );
	//- end: ARB_vertex_program

	//-//-- 
	//- Ext: ARB_vertex_shader
	typedef void (FLUXGL_API *BindAttribLocationARBFn)( GL::HandleARB, GL::UInt, GL::CharARB const* );
	// DisableVertexAttribArrayARBFn already defined in ARB_vertex_program
	// EnableVertexAttribArrayARBFn already defined in ARB_vertex_program
	typedef void (FLUXGL_API *GetActiveAttribARBFn)( GL::HandleARB, GL::UInt, GL::Sizei, GL::Sizei*, GL::Int*, GL::Enum*, GL::CharARB* );
	typedef GL::Int (FLUXGL_API *GetAttribLocationARBFn)( GL::HandleARB, GL::CharARB const* );
	// GetVertexAttribPointervARBFn already defined in ARB_vertex_program
	// GetVertexAttribdvARBFn already defined in ARB_vertex_program
	// GetVertexAttribfvARBFn already defined in ARB_vertex_program
	// GetVertexAttribivARBFn already defined in ARB_vertex_program
	// VertexAttrib1dARBFn already defined in ARB_vertex_program
	// VertexAttrib1dvARBFn already defined in ARB_vertex_program
	// VertexAttrib1fARBFn already defined in ARB_vertex_program
	// VertexAttrib1fvARBFn already defined in ARB_vertex_program
	// VertexAttrib1sARBFn already defined in ARB_vertex_program
	// VertexAttrib1svARBFn already defined in ARB_vertex_program
	// VertexAttrib2dARBFn already defined in ARB_vertex_program
	// VertexAttrib2dvARBFn already defined in ARB_vertex_program
	// VertexAttrib2fARBFn already defined in ARB_vertex_program
	// VertexAttrib2fvARBFn already defined in ARB_vertex_program
	// VertexAttrib2sARBFn already defined in ARB_vertex_program
	// VertexAttrib2svARBFn already defined in ARB_vertex_program
	// VertexAttrib3dARBFn already defined in ARB_vertex_program
	// VertexAttrib3dvARBFn already defined in ARB_vertex_program
	// VertexAttrib3fARBFn already defined in ARB_vertex_program
	// VertexAttrib3fvARBFn already defined in ARB_vertex_program
	// VertexAttrib3sARBFn already defined in ARB_vertex_program
	// VertexAttrib3svARBFn already defined in ARB_vertex_program
	// VertexAttrib4NbvARBFn already defined in ARB_vertex_program
	// VertexAttrib4NivARBFn already defined in ARB_vertex_program
	// VertexAttrib4NsvARBFn already defined in ARB_vertex_program
	// VertexAttrib4NubARBFn already defined in ARB_vertex_program
	// VertexAttrib4NubvARBFn already defined in ARB_vertex_program
	// VertexAttrib4NuivARBFn already defined in ARB_vertex_program
	// VertexAttrib4NusvARBFn already defined in ARB_vertex_program
	// VertexAttrib4bvARBFn already defined in ARB_vertex_program
	// VertexAttrib4dARBFn already defined in ARB_vertex_program
	// VertexAttrib4dvARBFn already defined in ARB_vertex_program
	// VertexAttrib4fARBFn already defined in ARB_vertex_program
	// VertexAttrib4fvARBFn already defined in ARB_vertex_program
	// VertexAttrib4ivARBFn already defined in ARB_vertex_program
	// VertexAttrib4sARBFn already defined in ARB_vertex_program
	// VertexAttrib4svARBFn already defined in ARB_vertex_program
	// VertexAttrib4ubvARBFn already defined in ARB_vertex_program
	// VertexAttrib4uivARBFn already defined in ARB_vertex_program
	// VertexAttrib4usvARBFn already defined in ARB_vertex_program
	// VertexAttribPointerARBFn already defined in ARB_vertex_program
	//- end: ARB_vertex_shader

	//-//-- 
	//- Ext: ARB_vertex_type_2_10_10_10_rev
	// ColorP3uiFn already defined in 3.3_compatibility
	// ColorP3uivFn already defined in 3.3_compatibility
	// ColorP4uiFn already defined in 3.3_compatibility
	// ColorP4uivFn already defined in 3.3_compatibility
	// MultiTexCoordP1uiFn already defined in 3.3_compatibility
	// MultiTexCoordP1uivFn already defined in 3.3_compatibility
	// MultiTexCoordP2uiFn already defined in 3.3_compatibility
	// MultiTexCoordP2uivFn already defined in 3.3_compatibility
	// MultiTexCoordP3uiFn already defined in 3.3_compatibility
	// MultiTexCoordP3uivFn already defined in 3.3_compatibility
	// MultiTexCoordP4uiFn already defined in 3.3_compatibility
	// MultiTexCoordP4uivFn already defined in 3.3_compatibility
	// NormalP3uiFn already defined in 3.3_compatibility
	// NormalP3uivFn already defined in 3.3_compatibility
	// SecondaryColorP3uiFn already defined in 3.3_compatibility
	// SecondaryColorP3uivFn already defined in 3.3_compatibility
	// TexCoordP1uiFn already defined in 3.3_compatibility
	// TexCoordP1uivFn already defined in 3.3_compatibility
	// TexCoordP2uiFn already defined in 3.3_compatibility
	// TexCoordP2uivFn already defined in 3.3_compatibility
	// TexCoordP3uiFn already defined in 3.3_compatibility
	// TexCoordP3uivFn already defined in 3.3_compatibility
	// TexCoordP4uiFn already defined in 3.3_compatibility
	// TexCoordP4uivFn already defined in 3.3_compatibility
	// VertexAttribP1uiFn already defined in 3.3_core
	// VertexAttribP1uivFn already defined in 3.3_core
	// VertexAttribP2uiFn already defined in 3.3_core
	// VertexAttribP2uivFn already defined in 3.3_core
	// VertexAttribP3uiFn already defined in 3.3_core
	// VertexAttribP3uivFn already defined in 3.3_core
	// VertexAttribP4uiFn already defined in 3.3_core
	// VertexAttribP4uivFn already defined in 3.3_core
	// VertexP2uiFn already defined in 3.3_compatibility
	// VertexP2uivFn already defined in 3.3_compatibility
	// VertexP3uiFn already defined in 3.3_compatibility
	// VertexP3uivFn already defined in 3.3_compatibility
	// VertexP4uiFn already defined in 3.3_compatibility
	// VertexP4uivFn already defined in 3.3_compatibility
	//- end: ARB_vertex_type_2_10_10_10_rev

	//-//-- 
	//- Ext: ARB_viewport_array
	// DepthRangeArrayvFn already defined in 4.1_core
	// DepthRangeIndexedFn already defined in 4.1_core
	// GetDoublei_vFn already defined in 4.1_core
	// GetFloati_vFn already defined in 4.1_core
	// ScissorArrayvFn already defined in 4.1_core
	// ScissorIndexedFn already defined in 4.1_core
	// ScissorIndexedvFn already defined in 4.1_core
	// ViewportArrayvFn already defined in 4.1_core
	// ViewportIndexedfFn already defined in 4.1_core
	// ViewportIndexedfvFn already defined in 4.1_core
	//- end: ARB_viewport_array

	//-//-- 
	//- Ext: ARB_window_pos
	typedef void (FLUXGL_API *WindowPos2dARBFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos2dvARBFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos2fARBFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos2fvARBFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos2iARBFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos2ivARBFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos2sARBFn)( GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos2svARBFn)( GL::Short const* );
	typedef void (FLUXGL_API *WindowPos3dARBFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos3dvARBFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos3fARBFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos3fvARBFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos3iARBFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos3ivARBFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos3sARBFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos3svARBFn)( GL::Short const* );
	//- end: ARB_window_pos

	//-//-- 
	//- Ext: ATI_draw_buffers
	typedef void (FLUXGL_API *DrawBuffersATIFn)( GL::Sizei, GL::Enum const* );
	//- end: ATI_draw_buffers

	//-//-- 
	//- Ext: ATI_element_array
	typedef void (FLUXGL_API *DrawElementArrayATIFn)( GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *DrawRangeElementArrayATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei );
	typedef void (FLUXGL_API *ElementPointerATIFn)( GL::Enum, void const* );
	//- end: ATI_element_array

	//-//-- 
	//- Ext: ATI_envmap_bumpmap
	typedef void (FLUXGL_API *GetTexBumpParameterfvATIFn)( GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTexBumpParameterivATIFn)( GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *TexBumpParameterfvATIFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *TexBumpParameterivATIFn)( GL::Enum, GL::Int const* );
	//- end: ATI_envmap_bumpmap

	//-//-- 
	//- Ext: ATI_fragment_shader
	typedef void (FLUXGL_API *AlphaFragmentOp1ATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *AlphaFragmentOp2ATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *AlphaFragmentOp3ATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BeginFragmentShaderATIFn)( );
	typedef void (FLUXGL_API *BindFragmentShaderATIFn)( GL::UInt );
	typedef void (FLUXGL_API *ColorFragmentOp1ATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ColorFragmentOp2ATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ColorFragmentOp3ATIFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *DeleteFragmentShaderATIFn)( GL::UInt );
	typedef void (FLUXGL_API *EndFragmentShaderATIFn)( );
	typedef GL::UInt (FLUXGL_API *GenFragmentShadersATIFn)( GL::UInt );
	typedef void (FLUXGL_API *PassTexCoordATIFn)( GL::UInt, GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *SampleMapATIFn)( GL::UInt, GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *SetFragmentShaderConstantATIFn)( GL::UInt, GL::Float const* );
	//- end: ATI_fragment_shader

	//-//-- 
	//- Ext: ATI_map_object_buffer
	typedef void* (FLUXGL_API *MapObjectBufferATIFn)( GL::UInt );
	typedef void (FLUXGL_API *UnmapObjectBufferATIFn)( GL::UInt );
	//- end: ATI_map_object_buffer

	//-//-- 
	//- Ext: ATI_pn_triangles
	typedef void (FLUXGL_API *PNTrianglesfATIFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PNTrianglesiATIFn)( GL::Enum, GL::Int );
	//- end: ATI_pn_triangles

	//-//-- 
	//- Ext: ATI_separate_stencil
	typedef void (FLUXGL_API *StencilFuncSeparateATIFn)( GL::Enum, GL::Enum, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *StencilOpSeparateATIFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	//- end: ATI_separate_stencil

	//-//-- 
	//- Ext: ATI_vertex_array_object
	typedef void (FLUXGL_API *ArrayObjectATIFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *FreeObjectBufferATIFn)( GL::UInt );
	typedef void (FLUXGL_API *GetArrayObjectfvATIFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetArrayObjectivATIFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetObjectBufferfvATIFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetObjectBufferivATIFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVariantArrayObjectfvATIFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVariantArrayObjectivATIFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsObjectBufferATIFn)( GL::UInt );
	typedef GL::UInt (FLUXGL_API *NewObjectBufferATIFn)( GL::Sizei, void const*, GL::Enum );
	typedef void (FLUXGL_API *UpdateObjectBufferATIFn)( GL::UInt, GL::UInt, GL::Sizei, void const*, GL::Enum );
	typedef void (FLUXGL_API *VariantArrayObjectATIFn)( GL::UInt, GL::Enum, GL::Sizei, GL::UInt, GL::UInt );
	//- end: ATI_vertex_array_object

	//-//-- 
	//- Ext: ATI_vertex_attrib_array_object
	typedef void (FLUXGL_API *GetVertexAttribArrayObjectfvATIFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVertexAttribArrayObjectivATIFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *VertexAttribArrayObjectATIFn)( GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::Sizei, GL::UInt, GL::UInt );
	//- end: ATI_vertex_attrib_array_object

	//-//-- 
	//- Ext: ATI_vertex_streams
	typedef void (FLUXGL_API *ClientActiveVertexStreamATIFn)( GL::Enum );
	typedef void (FLUXGL_API *NormalStream3bATIFn)( GL::Enum, GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *NormalStream3bvATIFn)( GL::Enum, GL::Byte const* );
	typedef void (FLUXGL_API *NormalStream3dATIFn)( GL::Enum, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *NormalStream3dvATIFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *NormalStream3fATIFn)( GL::Enum, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *NormalStream3fvATIFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *NormalStream3iATIFn)( GL::Enum, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *NormalStream3ivATIFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *NormalStream3sATIFn)( GL::Enum, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *NormalStream3svATIFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *VertexBlendEnvfATIFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *VertexBlendEnviATIFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *VertexStream1dATIFn)( GL::Enum, GL::Double );
	typedef void (FLUXGL_API *VertexStream1dvATIFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *VertexStream1fATIFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *VertexStream1fvATIFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *VertexStream1iATIFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *VertexStream1ivATIFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *VertexStream1sATIFn)( GL::Enum, GL::Short );
	typedef void (FLUXGL_API *VertexStream1svATIFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *VertexStream2dATIFn)( GL::Enum, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexStream2dvATIFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *VertexStream2fATIFn)( GL::Enum, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexStream2fvATIFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *VertexStream2iATIFn)( GL::Enum, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexStream2ivATIFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *VertexStream2sATIFn)( GL::Enum, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexStream2svATIFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *VertexStream3dATIFn)( GL::Enum, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexStream3dvATIFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *VertexStream3fATIFn)( GL::Enum, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexStream3fvATIFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *VertexStream3iATIFn)( GL::Enum, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexStream3ivATIFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *VertexStream3sATIFn)( GL::Enum, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexStream3svATIFn)( GL::Enum, GL::Short const* );
	typedef void (FLUXGL_API *VertexStream4dATIFn)( GL::Enum, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexStream4dvATIFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *VertexStream4fATIFn)( GL::Enum, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexStream4fvATIFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *VertexStream4iATIFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexStream4ivATIFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *VertexStream4sATIFn)( GL::Enum, GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexStream4svATIFn)( GL::Enum, GL::Short const* );
	//- end: ATI_vertex_streams

	//-//-- 
	//- Ext: EXT_bindable_uniform
	typedef GL::Int (FLUXGL_API *GetUniformBufferSizeEXTFn)( GL::UInt, GL::Int );
	typedef GL::Intptr (FLUXGL_API *GetUniformOffsetEXTFn)( GL::UInt, GL::Int );
	typedef void (FLUXGL_API *UniformBufferEXTFn)( GL::UInt, GL::Int, GL::UInt );
	//- end: EXT_bindable_uniform

	//-//-- 
	//- Ext: EXT_blend_color
	typedef void (FLUXGL_API *BlendColorEXTFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	//- end: EXT_blend_color

	//-//-- 
	//- Ext: EXT_blend_equation_separate
	typedef void (FLUXGL_API *BlendEquationSeparateEXTFn)( GL::Enum, GL::Enum );
	//- end: EXT_blend_equation_separate

	//-//-- 
	//- Ext: EXT_blend_func_separate
	typedef void (FLUXGL_API *BlendFuncSeparateEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	//- end: EXT_blend_func_separate

	//-//-- 
	//- Ext: EXT_blend_minmax
	typedef void (FLUXGL_API *BlendEquationEXTFn)( GL::Enum );
	//- end: EXT_blend_minmax

	//-//-- 
	//- Ext: EXT_color_subtable
	typedef void (FLUXGL_API *ColorSubTableEXTFn)( GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *CopyColorSubTableEXTFn)( GL::Enum, GL::Sizei, GL::Int, GL::Int, GL::Sizei );
	//- end: EXT_color_subtable

	//-//-- 
	//- Ext: EXT_compiled_vertex_array
	typedef void (FLUXGL_API *LockArraysEXTFn)( GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *UnlockArraysEXTFn)( );
	//- end: EXT_compiled_vertex_array

	//-//-- 
	//- Ext: EXT_convolution
	typedef void (FLUXGL_API *ConvolutionFilter1DEXTFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ConvolutionFilter2DEXTFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ConvolutionParameterfEXTFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *ConvolutionParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *ConvolutionParameteriEXTFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *ConvolutionParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *CopyConvolutionFilter1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyConvolutionFilter2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *GetConvolutionFilterEXTFn)( GL::Enum, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetConvolutionParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetConvolutionParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetSeparableFilterEXTFn)( GL::Enum, GL::Enum, GL::Enum, void*, void*, void* );
	typedef void (FLUXGL_API *SeparableFilter2DEXTFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const*, void const* );
	//- end: EXT_convolution

	//-//-- 
	//- Ext: EXT_coordinate_frame
	typedef void (FLUXGL_API *Binormal3bEXTFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Binormal3bvEXTFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Binormal3dEXTFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Binormal3dvEXTFn)( GL::Double const* );
	typedef void (FLUXGL_API *Binormal3fEXTFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Binormal3fvEXTFn)( GL::Float const* );
	typedef void (FLUXGL_API *Binormal3iEXTFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Binormal3ivEXTFn)( GL::Int const* );
	typedef void (FLUXGL_API *Binormal3sEXTFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Binormal3svEXTFn)( GL::Short const* );
	typedef void (FLUXGL_API *BinormalPointerEXTFn)( GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *Tangent3bEXTFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Tangent3bvEXTFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Tangent3dEXTFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *Tangent3dvEXTFn)( GL::Double const* );
	typedef void (FLUXGL_API *Tangent3fEXTFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *Tangent3fvEXTFn)( GL::Float const* );
	typedef void (FLUXGL_API *Tangent3iEXTFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *Tangent3ivEXTFn)( GL::Int const* );
	typedef void (FLUXGL_API *Tangent3sEXTFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *Tangent3svEXTFn)( GL::Short const* );
	typedef void (FLUXGL_API *TangentPointerEXTFn)( GL::Enum, GL::Sizei, void const* );
	//- end: EXT_coordinate_frame

	//-//-- 
	//- Ext: EXT_copy_texture
	typedef void (FLUXGL_API *CopyTexImage1DEXTFn)( GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyTexImage2DEXTFn)( GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyTexSubImage1DEXTFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyTexSubImage2DEXTFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *CopyTexSubImage3DEXTFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	//- end: EXT_copy_texture

	//-//-- 
	//- Ext: EXT_cull_vertex
	typedef void (FLUXGL_API *CullParameterdvEXTFn)( GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *CullParameterfvEXTFn)( GL::Enum, GL::Float* );
	//- end: EXT_cull_vertex

	//-//-- 
	//- Ext: EXT_debug_label
	typedef void (FLUXGL_API *GetObjectLabelEXTFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Sizei*, GL::Char* );
	typedef void (FLUXGL_API *LabelObjectEXTFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Char const* );
	//- end: EXT_debug_label

	//-//-- 
	//- Ext: EXT_debug_marker
	typedef void (FLUXGL_API *InsertEventMarkerEXTFn)( GL::Sizei, GL::Char const* );
	typedef void (FLUXGL_API *PopGroupMarkerEXTFn)( );
	typedef void (FLUXGL_API *PushGroupMarkerEXTFn)( GL::Sizei, GL::Char const* );
	//- end: EXT_debug_marker

	//-//-- 
	//- Ext: EXT_depth_bounds_test
	typedef void (FLUXGL_API *DepthBoundsEXTFn)( GL::Clampd, GL::Clampd );
	//- end: EXT_depth_bounds_test

	//-//-- 
	//- Ext: EXT_direct_state_access
	typedef void (FLUXGL_API *BindMultiTextureEXTFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef GL::Enum (FLUXGL_API *CheckNamedFramebufferStatusEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *ClearNamedBufferDataEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClearNamedBufferSubDataEXTFn)( GL::UInt, GL::Enum, GL::Sizeiptr, GL::Sizeiptr, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *ClientAttribDefaultEXTFn)( GL::Bitfield );
	typedef void (FLUXGL_API *CompressedMultiTexImage1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedMultiTexImage2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedMultiTexImage3DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedMultiTexSubImage1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedMultiTexSubImage2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedMultiTexSubImage3DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureImage1DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureImage2DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureImage3DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureSubImage1DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureSubImage2DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CompressedTextureSubImage3DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *CopyMultiTexImage1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyMultiTexImage2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyMultiTexSubImage1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyMultiTexSubImage2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *CopyMultiTexSubImage3DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *CopyTextureImage1DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyTextureImage2DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *CopyTextureSubImage1DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *CopyTextureSubImage2DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *CopyTextureSubImage3DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DisableClientStateIndexedEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DisableClientStateiEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DisableIndexedEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DisableVertexArrayAttribEXTFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *DisableVertexArrayEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *EnableClientStateIndexedEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *EnableClientStateiEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *EnableIndexedEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *EnableVertexArrayAttribEXTFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *EnableVertexArrayEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *FlushMappedNamedBufferRangeEXTFn)( GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *FramebufferDrawBufferEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *FramebufferDrawBuffersEXTFn)( GL::UInt, GL::Sizei, GL::Enum const* );
	typedef void (FLUXGL_API *FramebufferReadBufferEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *GenerateMultiTexMipmapEXTFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *GenerateTextureMipmapEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *GetBooleanIndexedvEXTFn)( GL::Enum, GL::UInt, GL::Boolean* );
	typedef void (FLUXGL_API *GetCompressedMultiTexImageEXTFn)( GL::Enum, GL::Enum, GL::Int, void* );
	typedef void (FLUXGL_API *GetCompressedTextureImageEXTFn)( GL::UInt, GL::Enum, GL::Int, void* );
	typedef void (FLUXGL_API *GetDoubleIndexedvEXTFn)( GL::Enum, GL::UInt, GL::Double* );
	typedef void (FLUXGL_API *GetDoublei_vEXTFn)( GL::Enum, GL::UInt, GL::Double* );
	typedef void (FLUXGL_API *GetFloatIndexedvEXTFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetFloati_vEXTFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetFramebufferParameterivEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetIntegerIndexedvEXTFn)( GL::Enum, GL::UInt, GL::Int* );
	typedef void (FLUXGL_API *GetMultiTexEnvfvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMultiTexEnvivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMultiTexGendvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetMultiTexGenfvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMultiTexGenivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMultiTexImageEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetMultiTexLevelParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMultiTexLevelParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMultiTexParameterIivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMultiTexParameterIuivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetMultiTexParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMultiTexParameterivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedBufferParameterivEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedBufferPointervEXTFn)( GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetNamedBufferSubDataEXTFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, void* );
	typedef void (FLUXGL_API *GetNamedFramebufferAttachmentParameterivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedFramebufferParameterivEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedProgramLocalParameterIivEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int* );
	typedef void (FLUXGL_API *GetNamedProgramLocalParameterIuivEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::UInt* );
	typedef void (FLUXGL_API *GetNamedProgramLocalParameterdvEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Double* );
	typedef void (FLUXGL_API *GetNamedProgramLocalParameterfvEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetNamedProgramStringEXTFn)( GL::UInt, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetNamedProgramivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetNamedRenderbufferParameterivEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetPointerIndexedvEXTFn)( GL::Enum, GL::UInt, void* * );
	typedef void (FLUXGL_API *GetPointeri_vEXTFn)( GL::Enum, GL::UInt, void* * );
	typedef void (FLUXGL_API *GetTextureImageEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetTextureLevelParameterfvEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTextureLevelParameterivEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTextureParameterIivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTextureParameterIuivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *GetTextureParameterfvEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetTextureParameterivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexArrayIntegeri_vEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexArrayIntegervEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexArrayPointeri_vEXTFn)( GL::UInt, GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetVertexArrayPointervEXTFn)( GL::UInt, GL::Enum, void* * );
	typedef GL::Boolean (FLUXGL_API *IsEnabledIndexedEXTFn)( GL::Enum, GL::UInt );
	typedef void* (FLUXGL_API *MapNamedBufferEXTFn)( GL::UInt, GL::Enum );
	typedef void* (FLUXGL_API *MapNamedBufferRangeEXTFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, GL::Bitfield );
	typedef void (FLUXGL_API *MatrixFrustumEXTFn)( GL::Enum, GL::Double, GL::Double, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MatrixLoadIdentityEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *MatrixLoadTransposedEXTFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MatrixLoadTransposefEXTFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixLoaddEXTFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MatrixLoadfEXTFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixMultTransposedEXTFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MatrixMultTransposefEXTFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixMultdEXTFn)( GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MatrixMultfEXTFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixOrthoEXTFn)( GL::Enum, GL::Double, GL::Double, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MatrixPopEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *MatrixPushEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *MatrixRotatedEXTFn)( GL::Enum, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MatrixRotatefEXTFn)( GL::Enum, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MatrixScaledEXTFn)( GL::Enum, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MatrixScalefEXTFn)( GL::Enum, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MatrixTranslatedEXTFn)( GL::Enum, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *MatrixTranslatefEXTFn)( GL::Enum, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MultiTexBufferEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *MultiTexCoordPointerEXTFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *MultiTexEnvfEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *MultiTexEnvfvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexEnviEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MultiTexEnvivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexGendEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Double );
	typedef void (FLUXGL_API *MultiTexGendvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *MultiTexGenfEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *MultiTexGenfvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexGeniEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MultiTexGenivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexImage1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *MultiTexImage2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *MultiTexImage3DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *MultiTexParameterIivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexParameterIuivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *MultiTexParameterfEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *MultiTexParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MultiTexParameteriEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MultiTexParameterivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *MultiTexRenderbufferEXTFn)( GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *MultiTexSubImage1DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *MultiTexSubImage2DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *MultiTexSubImage3DEXTFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *NamedBufferDataEXTFn)( GL::UInt, GL::Sizeiptr, void const*, GL::Enum );
	typedef void (FLUXGL_API *NamedBufferStorageEXTFn)( GL::UInt, GL::Sizeiptr, void const*, GL::Bitfield );
	typedef void (FLUXGL_API *NamedBufferSubDataEXTFn)( GL::UInt, GL::Intptr, GL::Sizeiptr, void const* );
	typedef void (FLUXGL_API *NamedCopyBufferSubDataEXTFn)( GL::UInt, GL::UInt, GL::Intptr, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *NamedFramebufferParameteriEXTFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferRenderbufferEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *NamedFramebufferTexture1DEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferTexture2DEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferTexture3DEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferTextureEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *NamedFramebufferTextureFaceEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int, GL::Enum );
	typedef void (FLUXGL_API *NamedFramebufferTextureLayerEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *NamedProgramLocalParameter4dEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *NamedProgramLocalParameter4dvEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *NamedProgramLocalParameter4fEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *NamedProgramLocalParameter4fvEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *NamedProgramLocalParameterI4iEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *NamedProgramLocalParameterI4ivEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *NamedProgramLocalParameterI4uiEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *NamedProgramLocalParameterI4uivEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *NamedProgramLocalParameters4fvEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *NamedProgramLocalParametersI4ivEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *NamedProgramLocalParametersI4uivEXTFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *NamedProgramStringEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *NamedRenderbufferStorageEXTFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *NamedRenderbufferStorageMultisampleCoverageEXTFn)( GL::UInt, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *NamedRenderbufferStorageMultisampleEXTFn)( GL::UInt, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *ProgramUniform1dEXTFn)( GL::UInt, GL::Int, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform1dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform1fEXTFn)( GL::UInt, GL::Int, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform1fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform1iEXTFn)( GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform1ivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform1uiEXTFn)( GL::UInt, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform1uivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniform2dEXTFn)( GL::UInt, GL::Int, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform2dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform2fEXTFn)( GL::UInt, GL::Int, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform2fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform2iEXTFn)( GL::UInt, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform2ivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform2uiEXTFn)( GL::UInt, GL::Int, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform2uivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniform3dEXTFn)( GL::UInt, GL::Int, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform3dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform3fEXTFn)( GL::UInt, GL::Int, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform3fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform3iEXTFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform3ivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform3uiEXTFn)( GL::UInt, GL::Int, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform3uivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniform4dEXTFn)( GL::UInt, GL::Int, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramUniform4dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniform4fEXTFn)( GL::UInt, GL::Int, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramUniform4fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniform4iEXTFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramUniform4ivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramUniform4uiEXTFn)( GL::UInt, GL::Int, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramUniform4uivEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x3dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x3fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x4dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix2x4fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x2dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x2fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x4dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix3x4fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x2dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x2fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x3dvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Double const* );
	typedef void (FLUXGL_API *ProgramUniformMatrix4x3fvEXTFn)( GL::UInt, GL::Int, GL::Sizei, GL::Boolean, GL::Float const* );
	typedef void (FLUXGL_API *PushClientAttribDefaultEXTFn)( GL::Bitfield );
	typedef void (FLUXGL_API *TextureBufferEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TextureBufferRangeEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *TextureImage1DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TextureImage2DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TextureImage3DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexturePageCommitmentEXTFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureParameterIivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TextureParameterIuivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::UInt const* );
	typedef void (FLUXGL_API *TextureParameterfEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *TextureParameterfvEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *TextureParameteriEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *TextureParameterivEXTFn)( GL::UInt, GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TextureRenderbufferEXTFn)( GL::UInt, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *TextureStorage1DEXTFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *TextureStorage2DEXTFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *TextureStorage2DMultisampleEXTFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureStorage3DEXTFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *TextureStorage3DMultisampleEXTFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureSubImage1DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TextureSubImage2DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TextureSubImage3DEXTFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef GL::Boolean (FLUXGL_API *UnmapNamedBufferEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *VertexArrayBindVertexBufferEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::Intptr, GL::Sizei );
	typedef void (FLUXGL_API *VertexArrayColorOffsetEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayEdgeFlagOffsetEXTFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayFogCoordOffsetEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayIndexOffsetEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayMultiTexCoordOffsetEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayNormalOffsetEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArraySecondaryColorOffsetEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayTexCoordOffsetEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayVertexAttribBindingEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexAttribDivisorEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexAttribFormatEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexAttribIFormatEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexAttribIOffsetEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayVertexAttribLFormatEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexAttribLOffsetEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayVertexAttribOffsetEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::Sizei, GL::Intptr );
	typedef void (FLUXGL_API *VertexArrayVertexBindingDivisorEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexArrayVertexOffsetEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Enum, GL::Sizei, GL::Intptr );
	//- end: EXT_direct_state_access

	//-//-- 
	//- Ext: EXT_draw_buffers2
	typedef void (FLUXGL_API *ColorMaskIndexedEXTFn)( GL::UInt, GL::Boolean, GL::Boolean, GL::Boolean, GL::Boolean );
	// DisableIndexedEXTFn already defined in EXT_direct_state_access
	// EnableIndexedEXTFn already defined in EXT_direct_state_access
	// GetBooleanIndexedvEXTFn already defined in EXT_direct_state_access
	// GetIntegerIndexedvEXTFn already defined in EXT_direct_state_access
	// IsEnabledIndexedEXTFn already defined in EXT_direct_state_access
	//- end: EXT_draw_buffers2

	//-//-- 
	//- Ext: EXT_draw_instanced
	typedef void (FLUXGL_API *DrawArraysInstancedEXTFn)( GL::Enum, GL::Int, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *DrawElementsInstancedEXTFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::Sizei );
	//- end: EXT_draw_instanced

	//-//-- 
	//- Ext: EXT_draw_range_elements
	typedef void (FLUXGL_API *DrawRangeElementsEXTFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei, GL::Enum, void const* );
	//- end: EXT_draw_range_elements

	//-//-- 
	//- Ext: EXT_fog_coord
	typedef void (FLUXGL_API *FogCoordPointerEXTFn)( GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *FogCoorddEXTFn)( GL::Double );
	typedef void (FLUXGL_API *FogCoorddvEXTFn)( GL::Double const* );
	typedef void (FLUXGL_API *FogCoordfEXTFn)( GL::Float );
	typedef void (FLUXGL_API *FogCoordfvEXTFn)( GL::Float const* );
	//- end: EXT_fog_coord

	//-//-- 
	//- Ext: EXT_framebuffer_blit
	typedef void (FLUXGL_API *BlitFramebufferEXTFn)( GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Bitfield, GL::Enum );
	//- end: EXT_framebuffer_blit

	//-//-- 
	//- Ext: EXT_framebuffer_multisample
	typedef void (FLUXGL_API *RenderbufferStorageMultisampleEXTFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	//- end: EXT_framebuffer_multisample

	//-//-- 
	//- Ext: EXT_framebuffer_object
	typedef void (FLUXGL_API *BindFramebufferEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *BindRenderbufferEXTFn)( GL::Enum, GL::UInt );
	typedef GL::Enum (FLUXGL_API *CheckFramebufferStatusEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *DeleteFramebuffersEXTFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DeleteRenderbuffersEXTFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *FramebufferRenderbufferEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *FramebufferTexture1DEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *FramebufferTexture2DEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *FramebufferTexture3DEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *GenFramebuffersEXTFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GenRenderbuffersEXTFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GenerateMipmapEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *GetFramebufferAttachmentParameterivEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetRenderbufferParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsFramebufferEXTFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsRenderbufferEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *RenderbufferStorageEXTFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Sizei );
	//- end: EXT_framebuffer_object

	//-//-- 
	//- Ext: EXT_geometry_shader4
	typedef void (FLUXGL_API *ProgramParameteriEXTFn)( GL::UInt, GL::Enum, GL::Int );
	//- end: EXT_geometry_shader4

	//-//-- 
	//- Ext: EXT_gpu_program_parameters
	typedef void (FLUXGL_API *ProgramEnvParameters4fvEXTFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ProgramLocalParameters4fvEXTFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Float const* );
	//- end: EXT_gpu_program_parameters

	//-//-- 
	//- Ext: EXT_gpu_shader4
	typedef void (FLUXGL_API *BindFragDataLocationEXTFn)( GL::UInt, GL::UInt, GL::Char const* );
	typedef GL::Int (FLUXGL_API *GetFragDataLocationEXTFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *GetUniformuivEXTFn)( GL::UInt, GL::Int, GL::UInt* );
	typedef void (FLUXGL_API *Uniform1uiEXTFn)( GL::Int, GL::UInt );
	typedef void (FLUXGL_API *Uniform1uivEXTFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *Uniform2uiEXTFn)( GL::Int, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Uniform2uivEXTFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *Uniform3uiEXTFn)( GL::Int, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Uniform3uivEXTFn)( GL::Int, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *Uniform4uiEXTFn)( GL::Int, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *Uniform4uivEXTFn)( GL::Int, GL::Sizei, GL::UInt const* );
	//- end: EXT_gpu_shader4

	//-//-- 
	//- Ext: EXT_histogram
	typedef void (FLUXGL_API *GetHistogramEXTFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetHistogramParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetHistogramParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMinmaxEXTFn)( GL::Enum, GL::Boolean, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetMinmaxParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMinmaxParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *HistogramEXTFn)( GL::Enum, GL::Sizei, GL::Enum, GL::Boolean );
	typedef void (FLUXGL_API *MinmaxEXTFn)( GL::Enum, GL::Enum, GL::Boolean );
	typedef void (FLUXGL_API *ResetHistogramEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *ResetMinmaxEXTFn)( GL::Enum );
	//- end: EXT_histogram

	//-//-- 
	//- Ext: EXT_index_func
	typedef void (FLUXGL_API *IndexFuncEXTFn)( GL::Enum, GL::Clampf );
	//- end: EXT_index_func

	//-//-- 
	//- Ext: EXT_index_material
	typedef void (FLUXGL_API *IndexMaterialEXTFn)( GL::Enum, GL::Enum );
	//- end: EXT_index_material

	//-//-- 
	//- Ext: EXT_light_texture
	typedef void (FLUXGL_API *ApplyTextureEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *TextureLightEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *TextureMaterialEXTFn)( GL::Enum, GL::Enum );
	//- end: EXT_light_texture

	//-//-- 
	//- Ext: EXT_multi_draw_arrays
	typedef void (FLUXGL_API *MultiDrawArraysEXTFn)( GL::Enum, GL::Int const*, GL::Sizei const*, GL::Sizei );
	typedef void (FLUXGL_API *MultiDrawElementsEXTFn)( GL::Enum, GL::Sizei const*, GL::Enum, void const* const*, GL::Sizei );
	//- end: EXT_multi_draw_arrays

	//-//-- 
	//- Ext: EXT_multisample
	typedef void (FLUXGL_API *SampleMaskEXTFn)( GL::Clampf, GL::Boolean );
	typedef void (FLUXGL_API *SamplePatternEXTFn)( GL::Enum );
	//- end: EXT_multisample

	//-//-- 
	//- Ext: EXT_paletted_texture
	typedef void (FLUXGL_API *ColorTableEXTFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *GetColorTableEXTFn)( GL::Enum, GL::Enum, GL::Enum, void* );
	typedef void (FLUXGL_API *GetColorTableParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetColorTableParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	//- end: EXT_paletted_texture

	//-//-- 
	//- Ext: EXT_pixel_transform
	typedef void (FLUXGL_API *GetPixelTransformParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPixelTransformParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *PixelTransformParameterfEXTFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PixelTransformParameterfvEXTFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PixelTransformParameteriEXTFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PixelTransformParameterivEXTFn)( GL::Enum, GL::Enum, GL::Int const* );
	//- end: EXT_pixel_transform

	//-//-- 
	//- Ext: EXT_point_parameters
	typedef void (FLUXGL_API *PointParameterfEXTFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PointParameterfvEXTFn)( GL::Enum, GL::Float const* );
	//- end: EXT_point_parameters

	//-//-- 
	//- Ext: EXT_polygon_offset
	typedef void (FLUXGL_API *PolygonOffsetEXTFn)( GL::Float, GL::Float );
	//- end: EXT_polygon_offset

	//-//-- 
	//- Ext: EXT_polygon_offset_clamp
	typedef void (FLUXGL_API *PolygonOffsetClampEXTFn)( GL::Float, GL::Float, GL::Float );
	//- end: EXT_polygon_offset_clamp

	//-//-- 
	//- Ext: EXT_provoking_vertex
	typedef void (FLUXGL_API *ProvokingVertexEXTFn)( GL::Enum );
	//- end: EXT_provoking_vertex

	//-//-- 
	//- Ext: EXT_raster_multisample
	typedef void (FLUXGL_API *RasterSamplesEXTFn)( GL::UInt, GL::Boolean );
	//- end: EXT_raster_multisample

	//-//-- 
	//- Ext: EXT_secondary_color
	typedef void (FLUXGL_API *SecondaryColor3bEXTFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *SecondaryColor3bvEXTFn)( GL::Byte const* );
	typedef void (FLUXGL_API *SecondaryColor3dEXTFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *SecondaryColor3dvEXTFn)( GL::Double const* );
	typedef void (FLUXGL_API *SecondaryColor3fEXTFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *SecondaryColor3fvEXTFn)( GL::Float const* );
	typedef void (FLUXGL_API *SecondaryColor3iEXTFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *SecondaryColor3ivEXTFn)( GL::Int const* );
	typedef void (FLUXGL_API *SecondaryColor3sEXTFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *SecondaryColor3svEXTFn)( GL::Short const* );
	typedef void (FLUXGL_API *SecondaryColor3ubEXTFn)( GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *SecondaryColor3ubvEXTFn)( GL::UByte const* );
	typedef void (FLUXGL_API *SecondaryColor3uiEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *SecondaryColor3uivEXTFn)( GL::UInt const* );
	typedef void (FLUXGL_API *SecondaryColor3usEXTFn)( GL::UShort, GL::UShort, GL::UShort );
	typedef void (FLUXGL_API *SecondaryColor3usvEXTFn)( GL::UShort const* );
	typedef void (FLUXGL_API *SecondaryColorPointerEXTFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	//- end: EXT_secondary_color

	//-//-- 
	//- Ext: EXT_separate_shader_objects
	typedef void (FLUXGL_API *ActiveProgramEXTFn)( GL::UInt );
	typedef GL::UInt (FLUXGL_API *CreateShaderProgramEXTFn)( GL::Enum, GL::Char const* );
	typedef void (FLUXGL_API *UseShaderProgramEXTFn)( GL::Enum, GL::UInt );
	//- end: EXT_separate_shader_objects

	//-//-- 
	//- Ext: EXT_shader_image_load_store
	typedef void (FLUXGL_API *BindImageTextureEXTFn)( GL::UInt, GL::UInt, GL::Int, GL::Boolean, GL::Int, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *MemoryBarrierEXTFn)( GL::Bitfield );
	//- end: EXT_shader_image_load_store

	//-//-- 
	//- Ext: EXT_stencil_clear_tag
	typedef void (FLUXGL_API *StencilClearTagEXTFn)( GL::Sizei, GL::UInt );
	//- end: EXT_stencil_clear_tag

	//-//-- 
	//- Ext: EXT_stencil_two_side
	typedef void (FLUXGL_API *ActiveStencilFaceEXTFn)( GL::Enum );
	//- end: EXT_stencil_two_side

	//-//-- 
	//- Ext: EXT_subtexture
	typedef void (FLUXGL_API *TexSubImage1DEXTFn)( GL::Enum, GL::Int, GL::Int, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexSubImage2DEXTFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	//- end: EXT_subtexture

	//-//-- 
	//- Ext: EXT_texture3D
	typedef void (FLUXGL_API *TexImage3DEXTFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexSubImage3DEXTFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	//- end: EXT_texture3D

	//-//-- 
	//- Ext: EXT_texture_array
	typedef void (FLUXGL_API *FramebufferTextureLayerEXTFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int );
	//- end: EXT_texture_array

	//-//-- 
	//- Ext: EXT_texture_buffer_object
	typedef void (FLUXGL_API *TexBufferEXTFn)( GL::Enum, GL::Enum, GL::UInt );
	//- end: EXT_texture_buffer_object

	//-//-- 
	//- Ext: EXT_texture_filter_minmax
	// RasterSamplesEXTFn already defined in EXT_raster_multisample
	//- end: EXT_texture_filter_minmax

	//-//-- 
	//- Ext: EXT_texture_integer
	typedef void (FLUXGL_API *ClearColorIiEXTFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ClearColorIuiEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *GetTexParameterIivEXTFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTexParameterIuivEXTFn)( GL::Enum, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *TexParameterIivEXTFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *TexParameterIuivEXTFn)( GL::Enum, GL::Enum, GL::UInt const* );
	//- end: EXT_texture_integer

	//-//-- 
	//- Ext: EXT_texture_object
	typedef GL::Boolean (FLUXGL_API *AreTexturesResidentEXTFn)( GL::Sizei, GL::UInt const*, GL::Boolean* );
	typedef void (FLUXGL_API *BindTextureEXTFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DeleteTexturesEXTFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *GenTexturesEXTFn)( GL::Sizei, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsTextureEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *PrioritizeTexturesEXTFn)( GL::Sizei, GL::UInt const*, GL::Clampf const* );
	//- end: EXT_texture_object

	//-//-- 
	//- Ext: EXT_texture_perturb_normal
	typedef void (FLUXGL_API *TextureNormalEXTFn)( GL::Enum );
	//- end: EXT_texture_perturb_normal

	//-//-- 
	//- Ext: EXT_timer_query
	typedef void (FLUXGL_API *GetQueryObjecti64vEXTFn)( GL::UInt, GL::Enum, GL::Int64* );
	typedef void (FLUXGL_API *GetQueryObjectui64vEXTFn)( GL::UInt, GL::Enum, GL::UInt64* );
	//- end: EXT_timer_query

	//-//-- 
	//- Ext: EXT_transform_feedback
	typedef void (FLUXGL_API *BeginTransformFeedbackEXTFn)( GL::Enum );
	typedef void (FLUXGL_API *BindBufferBaseEXTFn)( GL::Enum, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BindBufferOffsetEXTFn)( GL::Enum, GL::UInt, GL::UInt, GL::Intptr );
	typedef void (FLUXGL_API *BindBufferRangeEXTFn)( GL::Enum, GL::UInt, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *EndTransformFeedbackEXTFn)( );
	typedef void (FLUXGL_API *GetTransformFeedbackVaryingEXTFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Sizei*, GL::Enum*, GL::Char* );
	typedef void (FLUXGL_API *TransformFeedbackVaryingsEXTFn)( GL::UInt, GL::Sizei, GL::Char const* const*, GL::Enum );
	//- end: EXT_transform_feedback

	//-//-- 
	//- Ext: EXT_vertex_array
	typedef void (FLUXGL_API *ArrayElementEXTFn)( GL::Int );
	typedef void (FLUXGL_API *ColorPointerEXTFn)( GL::Int, GL::Enum, GL::Sizei, GL::Sizei, void const* );
	typedef void (FLUXGL_API *DrawArraysEXTFn)( GL::Enum, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *EdgeFlagPointerEXTFn)( GL::Sizei, GL::Sizei, GL::Boolean const* );
	typedef void (FLUXGL_API *GetPointervEXTFn)( GL::Enum, void* * );
	typedef void (FLUXGL_API *IndexPointerEXTFn)( GL::Enum, GL::Sizei, GL::Sizei, void const* );
	typedef void (FLUXGL_API *NormalPointerEXTFn)( GL::Enum, GL::Sizei, GL::Sizei, void const* );
	typedef void (FLUXGL_API *TexCoordPointerEXTFn)( GL::Int, GL::Enum, GL::Sizei, GL::Sizei, void const* );
	typedef void (FLUXGL_API *VertexPointerEXTFn)( GL::Int, GL::Enum, GL::Sizei, GL::Sizei, void const* );
	//- end: EXT_vertex_array

	//-//-- 
	//- Ext: EXT_vertex_attrib_64bit
	typedef void (FLUXGL_API *GetVertexAttribLdvEXTFn)( GL::UInt, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *VertexAttribL1dEXTFn)( GL::UInt, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL1dvEXTFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribL2dEXTFn)( GL::UInt, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL2dvEXTFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribL3dEXTFn)( GL::UInt, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL3dvEXTFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribL4dEXTFn)( GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttribL4dvEXTFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribLPointerEXTFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei, void const* );
	//- end: EXT_vertex_attrib_64bit

	//-//-- 
	//- Ext: EXT_vertex_shader
	typedef void (FLUXGL_API *BeginVertexShaderEXTFn)( );
	typedef GL::UInt (FLUXGL_API *BindLightParameterEXTFn)( GL::Enum, GL::Enum );
	typedef GL::UInt (FLUXGL_API *BindMaterialParameterEXTFn)( GL::Enum, GL::Enum );
	typedef GL::UInt (FLUXGL_API *BindParameterEXTFn)( GL::Enum );
	typedef GL::UInt (FLUXGL_API *BindTexGenParameterEXTFn)( GL::Enum, GL::Enum, GL::Enum );
	typedef GL::UInt (FLUXGL_API *BindTextureUnitParameterEXTFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *BindVertexShaderEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *DeleteVertexShaderEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *DisableVariantClientStateEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *EnableVariantClientStateEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *EndVertexShaderEXTFn)( );
	typedef void (FLUXGL_API *ExtractComponentEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef GL::UInt (FLUXGL_API *GenSymbolsEXTFn)( GL::Enum, GL::Enum, GL::Enum, GL::UInt );
	typedef GL::UInt (FLUXGL_API *GenVertexShadersEXTFn)( GL::UInt );
	typedef void (FLUXGL_API *GetInvariantBooleanvEXTFn)( GL::UInt, GL::Enum, GL::Boolean* );
	typedef void (FLUXGL_API *GetInvariantFloatvEXTFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetInvariantIntegervEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetLocalConstantBooleanvEXTFn)( GL::UInt, GL::Enum, GL::Boolean* );
	typedef void (FLUXGL_API *GetLocalConstantFloatvEXTFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetLocalConstantIntegervEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVariantBooleanvEXTFn)( GL::UInt, GL::Enum, GL::Boolean* );
	typedef void (FLUXGL_API *GetVariantFloatvEXTFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVariantIntegervEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVariantPointervEXTFn)( GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *InsertComponentEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsVariantEnabledEXTFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *SetInvariantEXTFn)( GL::UInt, GL::Enum, void const* );
	typedef void (FLUXGL_API *SetLocalConstantEXTFn)( GL::UInt, GL::Enum, void const* );
	typedef void (FLUXGL_API *ShaderOp1EXTFn)( GL::Enum, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ShaderOp2EXTFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ShaderOp3EXTFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *SwizzleEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *VariantPointerEXTFn)( GL::UInt, GL::Enum, GL::UInt, void const* );
	typedef void (FLUXGL_API *VariantbvEXTFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VariantdvEXTFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VariantfvEXTFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VariantivEXTFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VariantsvEXTFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VariantubvEXTFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VariantuivEXTFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VariantusvEXTFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *WriteMaskEXTFn)( GL::UInt, GL::UInt, GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	//- end: EXT_vertex_shader

	//-//-- 
	//- Ext: EXT_vertex_weighting
	typedef void (FLUXGL_API *VertexWeightPointerEXTFn)( GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *VertexWeightfEXTFn)( GL::Float );
	typedef void (FLUXGL_API *VertexWeightfvEXTFn)( GL::Float const* );
	//- end: EXT_vertex_weighting

	//-//-- 
	//- Ext: EXT_x11_sync_object
	typedef GL::Sync (FLUXGL_API *ImportSyncEXTFn)( GL::Enum, GL::Intptr, GL::Bitfield );
	//- end: EXT_x11_sync_object

	//-//-- 
	//- Ext: GREMEDY_frame_terminator
	typedef void (FLUXGL_API *FrameTerminatorGREMEDYFn)( );
	//- end: GREMEDY_frame_terminator

	//-//-- 
	//- Ext: GREMEDY_string_marker
	typedef void (FLUXGL_API *StringMarkerGREMEDYFn)( GL::Sizei, void const* );
	//- end: GREMEDY_string_marker

	//-//-- 
	//- Ext: HP_image_transform
	typedef void (FLUXGL_API *GetImageTransformParameterfvHPFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetImageTransformParameterivHPFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *ImageTransformParameterfHPFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *ImageTransformParameterfvHPFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *ImageTransformParameteriHPFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *ImageTransformParameterivHPFn)( GL::Enum, GL::Enum, GL::Int const* );
	//- end: HP_image_transform

	//-//-- 
	//- Ext: IBM_multimode_draw_arrays
	typedef void (FLUXGL_API *MultiModeDrawArraysIBMFn)( GL::Enum const*, GL::Int const*, GL::Sizei const*, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *MultiModeDrawElementsIBMFn)( GL::Enum const*, GL::Sizei const*, GL::Enum, void const* const*, GL::Sizei, GL::Int );
	//- end: IBM_multimode_draw_arrays

	//-//-- 
	//- Ext: IBM_static_data
	typedef void (FLUXGL_API *FlushStaticDataIBMFn)( GL::Enum );
	//- end: IBM_static_data

	//-//-- 
	//- Ext: IBM_vertex_array_lists
	typedef void (FLUXGL_API *ColorPointerListIBMFn)( GL::Int, GL::Enum, GL::Int, void const* *, GL::Int );
	typedef void (FLUXGL_API *EdgeFlagPointerListIBMFn)( GL::Int, GL::Boolean const* *, GL::Int );
	typedef void (FLUXGL_API *FogCoordPointerListIBMFn)( GL::Enum, GL::Int, void const* *, GL::Int );
	typedef void (FLUXGL_API *IndexPointerListIBMFn)( GL::Enum, GL::Int, void const* *, GL::Int );
	typedef void (FLUXGL_API *NormalPointerListIBMFn)( GL::Enum, GL::Int, void const* *, GL::Int );
	typedef void (FLUXGL_API *SecondaryColorPointerListIBMFn)( GL::Int, GL::Enum, GL::Int, void const* *, GL::Int );
	typedef void (FLUXGL_API *TexCoordPointerListIBMFn)( GL::Int, GL::Enum, GL::Int, void const* *, GL::Int );
	typedef void (FLUXGL_API *VertexPointerListIBMFn)( GL::Int, GL::Enum, GL::Int, void const* *, GL::Int );
	//- end: IBM_vertex_array_lists

	//-//-- 
	//- Ext: INTEL_framebuffer_CMAA
	typedef void (FLUXGL_API *ApplyFramebufferAttachmentCMAAINTELFn)( );
	//- end: INTEL_framebuffer_CMAA

	//-//-- 
	//- Ext: INTEL_map_texture
	typedef void* (FLUXGL_API *MapTexture2DINTELFn)( GL::UInt, GL::Int, GL::Bitfield, GL::Int*, GL::Enum* );
	typedef void (FLUXGL_API *SyncTextureINTELFn)( GL::UInt );
	typedef void (FLUXGL_API *UnmapTexture2DINTELFn)( GL::UInt, GL::Int );
	//- end: INTEL_map_texture

	//-//-- 
	//- Ext: INTEL_parallel_arrays
	typedef void (FLUXGL_API *ColorPointervINTELFn)( GL::Int, GL::Enum, void const* * );
	typedef void (FLUXGL_API *NormalPointervINTELFn)( GL::Enum, void const* * );
	typedef void (FLUXGL_API *TexCoordPointervINTELFn)( GL::Int, GL::Enum, void const* * );
	typedef void (FLUXGL_API *VertexPointervINTELFn)( GL::Int, GL::Enum, void const* * );
	//- end: INTEL_parallel_arrays

	//-//-- 
	//- Ext: INTEL_performance_query
	typedef void (FLUXGL_API *BeginPerfQueryINTELFn)( GL::UInt );
	typedef void (FLUXGL_API *CreatePerfQueryINTELFn)( GL::UInt, GL::UInt* );
	typedef void (FLUXGL_API *DeletePerfQueryINTELFn)( GL::UInt );
	typedef void (FLUXGL_API *EndPerfQueryINTELFn)( GL::UInt );
	typedef void (FLUXGL_API *GetFirstPerfQueryIdINTELFn)( GL::UInt* );
	typedef void (FLUXGL_API *GetNextPerfQueryIdINTELFn)( GL::UInt, GL::UInt* );
	typedef void (FLUXGL_API *GetPerfCounterInfoINTELFn)( GL::UInt, GL::UInt, GL::UInt, GL::Char*, GL::UInt, GL::Char*, GL::UInt*, GL::UInt*, GL::UInt*, GL::UInt*, GL::UInt64* );
	typedef void (FLUXGL_API *GetPerfQueryDataINTELFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Void*, GL::UInt* );
	typedef void (FLUXGL_API *GetPerfQueryIdByNameINTELFn)( GL::Char*, GL::UInt* );
	typedef void (FLUXGL_API *GetPerfQueryInfoINTELFn)( GL::UInt, GL::UInt, GL::Char*, GL::UInt*, GL::UInt*, GL::UInt*, GL::UInt* );
	//- end: INTEL_performance_query

	//-//-- 
	//- Ext: KHR_blend_equation_advanced
	typedef void (FLUXGL_API *BlendBarrierKHRFn)( );
	//- end: KHR_blend_equation_advanced

	//-//-- 
	//- Ext: KHR_debug
	// DebugMessageCallbackFn already defined in 4.3_core
	// DebugMessageControlFn already defined in 4.3_core
	// DebugMessageInsertFn already defined in 4.3_core
	// GetDebugMessageLogFn already defined in 4.3_core
	// GetObjectLabelFn already defined in 4.3_core
	// GetObjectPtrLabelFn already defined in 4.3_core
	// GetPointervFn already defined in 1.1_core
	// ObjectLabelFn already defined in 4.3_core
	// ObjectPtrLabelFn already defined in 4.3_core
	// PopDebugGroupFn already defined in 4.3_core
	// PushDebugGroupFn already defined in 4.3_core
	//- end: KHR_debug

	//-//-- 
	//- Ext: KHR_robustness
	// GetGraphicsResetStatusFn already defined in 4.5_core
	// GetnUniformfvFn already defined in 4.5_core
	// GetnUniformivFn already defined in 4.5_core
	// GetnUniformuivFn already defined in 4.5_core
	// ReadnPixelsFn already defined in 4.5_core
	//- end: KHR_robustness

	//-//-- 
	//- Ext: MESA_resize_buffers
	typedef void (FLUXGL_API *ResizeBuffersMESAFn)( );
	//- end: MESA_resize_buffers

	//-//-- 
	//- Ext: MESA_window_pos
	typedef void (FLUXGL_API *WindowPos2dMESAFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos2dvMESAFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos2fMESAFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos2fvMESAFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos2iMESAFn)( GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos2ivMESAFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos2sMESAFn)( GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos2svMESAFn)( GL::Short const* );
	typedef void (FLUXGL_API *WindowPos3dMESAFn)( GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos3dvMESAFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos3fMESAFn)( GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos3fvMESAFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos3iMESAFn)( GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos3ivMESAFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos3sMESAFn)( GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos3svMESAFn)( GL::Short const* );
	typedef void (FLUXGL_API *WindowPos4dMESAFn)( GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *WindowPos4dvMESAFn)( GL::Double const* );
	typedef void (FLUXGL_API *WindowPos4fMESAFn)( GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *WindowPos4fvMESAFn)( GL::Float const* );
	typedef void (FLUXGL_API *WindowPos4iMESAFn)( GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *WindowPos4ivMESAFn)( GL::Int const* );
	typedef void (FLUXGL_API *WindowPos4sMESAFn)( GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *WindowPos4svMESAFn)( GL::Short const* );
	//- end: MESA_window_pos

	//-//-- 
	//- Ext: NVX_conditional_render
	typedef void (FLUXGL_API *BeginConditionalRenderNVXFn)( GL::UInt );
	typedef void (FLUXGL_API *EndConditionalRenderNVXFn)( );
	//- end: NVX_conditional_render

	//-//-- 
	//- Ext: NV_bindless_multi_draw_indirect
	typedef void (FLUXGL_API *MultiDrawArraysIndirectBindlessNVFn)( GL::Enum, void const*, GL::Sizei, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *MultiDrawElementsIndirectBindlessNVFn)( GL::Enum, GL::Enum, void const*, GL::Sizei, GL::Sizei, GL::Int );
	//- end: NV_bindless_multi_draw_indirect

	//-//-- 
	//- Ext: NV_bindless_multi_draw_indirect_count
	typedef void (FLUXGL_API *MultiDrawArraysIndirectBindlessCountNVFn)( GL::Enum, void const*, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int );
	typedef void (FLUXGL_API *MultiDrawElementsIndirectBindlessCountNVFn)( GL::Enum, GL::Enum, void const*, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int );
	//- end: NV_bindless_multi_draw_indirect_count

	//-//-- 
	//- Ext: NV_bindless_texture
	typedef GL::UInt64 (FLUXGL_API *GetImageHandleNVFn)( GL::UInt, GL::Int, GL::Boolean, GL::Int, GL::Enum );
	typedef GL::UInt64 (FLUXGL_API *GetTextureHandleNVFn)( GL::UInt );
	typedef GL::UInt64 (FLUXGL_API *GetTextureSamplerHandleNVFn)( GL::UInt, GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsImageHandleResidentNVFn)( GL::UInt64 );
	typedef GL::Boolean (FLUXGL_API *IsTextureHandleResidentNVFn)( GL::UInt64 );
	typedef void (FLUXGL_API *MakeImageHandleNonResidentNVFn)( GL::UInt64 );
	typedef void (FLUXGL_API *MakeImageHandleResidentNVFn)( GL::UInt64, GL::Enum );
	typedef void (FLUXGL_API *MakeTextureHandleNonResidentNVFn)( GL::UInt64 );
	typedef void (FLUXGL_API *MakeTextureHandleResidentNVFn)( GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniformHandleui64NVFn)( GL::UInt, GL::Int, GL::UInt64 );
	typedef void (FLUXGL_API *ProgramUniformHandleui64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64 const* );
	typedef void (FLUXGL_API *UniformHandleui64NVFn)( GL::Int, GL::UInt64 );
	typedef void (FLUXGL_API *UniformHandleui64vNVFn)( GL::Int, GL::Sizei, GL::UInt64 const* );
	//- end: NV_bindless_texture

	//-//-- 
	//- Ext: NV_blend_equation_advanced
	typedef void (FLUXGL_API *BlendBarrierNVFn)( );
	typedef void (FLUXGL_API *BlendParameteriNVFn)( GL::Enum, GL::Int );
	//- end: NV_blend_equation_advanced

	//-//-- 
	//- Ext: NV_command_list
	typedef void (FLUXGL_API *CallCommandListNVFn)( GL::UInt );
	typedef void (FLUXGL_API *CommandListSegmentsNVFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *CompileCommandListNVFn)( GL::UInt );
	typedef void (FLUXGL_API *CreateCommandListsNVFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *CreateStatesNVFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *DeleteCommandListsNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DeleteStatesNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DrawCommandsAddressNVFn)( GL::Enum, GL::UInt64 const*, GL::Sizei const*, GL::UInt );
	typedef void (FLUXGL_API *DrawCommandsNVFn)( GL::Enum, GL::UInt, GL::Intptr const*, GL::Sizei const*, GL::UInt );
	typedef void (FLUXGL_API *DrawCommandsStatesAddressNVFn)( GL::UInt64 const*, GL::Sizei const*, GL::UInt const*, GL::UInt const*, GL::UInt );
	typedef void (FLUXGL_API *DrawCommandsStatesNVFn)( GL::UInt, GL::Intptr const*, GL::Sizei const*, GL::UInt const*, GL::UInt const*, GL::UInt );
	typedef GL::UInt (FLUXGL_API *GetCommandHeaderNVFn)( GL::Enum, GL::UInt );
	typedef GL::UShort (FLUXGL_API *GetStageIndexNVFn)( GL::Enum );
	typedef GL::Boolean (FLUXGL_API *IsCommandListNVFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsStateNVFn)( GL::UInt );
	typedef void (FLUXGL_API *ListDrawCommandsStatesClientNVFn)( GL::UInt, GL::UInt, void const* *, GL::Sizei const*, GL::UInt const*, GL::UInt const*, GL::UInt );
	typedef void (FLUXGL_API *StateCaptureNVFn)( GL::UInt, GL::Enum );
	//- end: NV_command_list

	//-//-- 
	//- Ext: NV_conditional_render
	typedef void (FLUXGL_API *BeginConditionalRenderNVFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *EndConditionalRenderNVFn)( );
	//- end: NV_conditional_render

	//-//-- 
	//- Ext: NV_conservative_raster
	typedef void (FLUXGL_API *SubpixelPrecisionBiasNVFn)( GL::UInt, GL::UInt );
	//- end: NV_conservative_raster

	//-//-- 
	//- Ext: NV_conservative_raster_dilate
	typedef void (FLUXGL_API *ConservativeRasterParameterfNVFn)( GL::Enum, GL::Float );
	//- end: NV_conservative_raster_dilate

	//-//-- 
	//- Ext: NV_copy_image
	typedef void (FLUXGL_API *CopyImageSubDataNVFn)( GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::UInt, GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei );
	//- end: NV_copy_image

	//-//-- 
	//- Ext: NV_depth_buffer_float
	typedef void (FLUXGL_API *ClearDepthdNVFn)( GL::Double );
	typedef void (FLUXGL_API *DepthBoundsdNVFn)( GL::Double, GL::Double );
	typedef void (FLUXGL_API *DepthRangedNVFn)( GL::Double, GL::Double );
	//- end: NV_depth_buffer_float

	//-//-- 
	//- Ext: NV_draw_texture
	typedef void (FLUXGL_API *DrawTextureNVFn)( GL::UInt, GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float );
	//- end: NV_draw_texture

	//-//-- 
	//- Ext: NV_evaluators
	typedef void (FLUXGL_API *EvalMapsNVFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *GetMapAttribParameterfvNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMapAttribParameterivNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetMapControlPointsNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Sizei, GL::Sizei, GL::Boolean, void* );
	typedef void (FLUXGL_API *GetMapParameterfvNVFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetMapParameterivNVFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *MapControlPointsNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Int, GL::Boolean, void const* );
	typedef void (FLUXGL_API *MapParameterfvNVFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MapParameterivNVFn)( GL::Enum, GL::Enum, GL::Int const* );
	//- end: NV_evaluators

	//-//-- 
	//- Ext: NV_explicit_multisample
	typedef void (FLUXGL_API *GetMultisamplefvNVFn)( GL::Enum, GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *SampleMaskIndexedNVFn)( GL::UInt, GL::Bitfield );
	typedef void (FLUXGL_API *TexRenderbufferNVFn)( GL::Enum, GL::UInt );
	//- end: NV_explicit_multisample

	//-//-- 
	//- Ext: NV_fence
	typedef void (FLUXGL_API *DeleteFencesNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *FinishFenceNVFn)( GL::UInt );
	typedef void (FLUXGL_API *GenFencesNVFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetFenceivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsFenceNVFn)( GL::UInt );
	typedef void (FLUXGL_API *SetFenceNVFn)( GL::UInt, GL::Enum );
	typedef GL::Boolean (FLUXGL_API *TestFenceNVFn)( GL::UInt );
	//- end: NV_fence

	//-//-- 
	//- Ext: NV_fragment_coverage_to_color
	typedef void (FLUXGL_API *FragmentCoverageColorNVFn)( GL::UInt );
	//- end: NV_fragment_coverage_to_color

	//-//-- 
	//- Ext: NV_fragment_program
	typedef void (FLUXGL_API *GetProgramNamedParameterdvNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Double* );
	typedef void (FLUXGL_API *GetProgramNamedParameterfvNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Float* );
	typedef void (FLUXGL_API *ProgramNamedParameter4dNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramNamedParameter4dvNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Double const* );
	typedef void (FLUXGL_API *ProgramNamedParameter4fNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramNamedParameter4fvNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Float const* );
	//- end: NV_fragment_program

	//-//-- 
	//- Ext: NV_framebuffer_mixed_samples
	typedef void (FLUXGL_API *CoverageModulationNVFn)( GL::Enum );
	typedef void (FLUXGL_API *CoverageModulationTableNVFn)( GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *GetCoverageModulationTableNVFn)( GL::Sizei, GL::Float* );
	// RasterSamplesEXTFn already defined in EXT_raster_multisample
	//- end: NV_framebuffer_mixed_samples

	//-//-- 
	//- Ext: NV_framebuffer_multisample_coverage
	typedef void (FLUXGL_API *RenderbufferStorageMultisampleCoverageNVFn)( GL::Enum, GL::Sizei, GL::Sizei, GL::Enum, GL::Sizei, GL::Sizei );
	//- end: NV_framebuffer_multisample_coverage

	//-//-- 
	//- Ext: NV_geometry_program4
	typedef void (FLUXGL_API *FramebufferTextureEXTFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int );
	typedef void (FLUXGL_API *FramebufferTextureFaceEXTFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Enum );
	// FramebufferTextureLayerEXTFn already defined in EXT_texture_array
	typedef void (FLUXGL_API *ProgramVertexLimitNVFn)( GL::Enum, GL::Int );
	//- end: NV_geometry_program4

	//-//-- 
	//- Ext: NV_gpu_program4
	typedef void (FLUXGL_API *GetProgramEnvParameterIivNVFn)( GL::Enum, GL::UInt, GL::Int* );
	typedef void (FLUXGL_API *GetProgramEnvParameterIuivNVFn)( GL::Enum, GL::UInt, GL::UInt* );
	typedef void (FLUXGL_API *GetProgramLocalParameterIivNVFn)( GL::Enum, GL::UInt, GL::Int* );
	typedef void (FLUXGL_API *GetProgramLocalParameterIuivNVFn)( GL::Enum, GL::UInt, GL::UInt* );
	typedef void (FLUXGL_API *ProgramEnvParameterI4iNVFn)( GL::Enum, GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramEnvParameterI4ivNVFn)( GL::Enum, GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *ProgramEnvParameterI4uiNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramEnvParameterI4uivNVFn)( GL::Enum, GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramEnvParametersI4ivNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramEnvParametersI4uivNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramLocalParameterI4iNVFn)( GL::Enum, GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *ProgramLocalParameterI4ivNVFn)( GL::Enum, GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *ProgramLocalParameterI4uiNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *ProgramLocalParameterI4uivNVFn)( GL::Enum, GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramLocalParametersI4ivNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramLocalParametersI4uivNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::UInt const* );
	//- end: NV_gpu_program4

	//-//-- 
	//- Ext: NV_gpu_program5
	typedef void (FLUXGL_API *GetProgramSubroutineParameteruivNVFn)( GL::Enum, GL::UInt, GL::UInt* );
	typedef void (FLUXGL_API *ProgramSubroutineParametersuivNVFn)( GL::Enum, GL::Sizei, GL::UInt const* );
	//- end: NV_gpu_program5

	//-//-- 
	//- Ext: NV_gpu_shader5
	// GetUniformi64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform1i64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform1i64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform1ui64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform1ui64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform2i64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform2i64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform2ui64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform2ui64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform3i64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform3i64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform3ui64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform3ui64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform4i64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform4i64vNVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform4ui64NVFn already defined in AMD_gpu_shader_int64
	// ProgramUniform4ui64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform1i64NVFn already defined in AMD_gpu_shader_int64
	// Uniform1i64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform1ui64NVFn already defined in AMD_gpu_shader_int64
	// Uniform1ui64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform2i64NVFn already defined in AMD_gpu_shader_int64
	// Uniform2i64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform2ui64NVFn already defined in AMD_gpu_shader_int64
	// Uniform2ui64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform3i64NVFn already defined in AMD_gpu_shader_int64
	// Uniform3i64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform3ui64NVFn already defined in AMD_gpu_shader_int64
	// Uniform3ui64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform4i64NVFn already defined in AMD_gpu_shader_int64
	// Uniform4i64vNVFn already defined in AMD_gpu_shader_int64
	// Uniform4ui64NVFn already defined in AMD_gpu_shader_int64
	// Uniform4ui64vNVFn already defined in AMD_gpu_shader_int64
	//- end: NV_gpu_shader5

	//-//-- 
	//- Ext: NV_half_float
	typedef void (FLUXGL_API *Color3hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *Color3hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *Color4hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *Color4hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *FogCoordhNVFn)( GL::HalfNV );
	typedef void (FLUXGL_API *FogCoordhvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *MultiTexCoord1hNVFn)( GL::Enum, GL::HalfNV );
	typedef void (FLUXGL_API *MultiTexCoord1hvNVFn)( GL::Enum, GL::HalfNV const* );
	typedef void (FLUXGL_API *MultiTexCoord2hNVFn)( GL::Enum, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *MultiTexCoord2hvNVFn)( GL::Enum, GL::HalfNV const* );
	typedef void (FLUXGL_API *MultiTexCoord3hNVFn)( GL::Enum, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *MultiTexCoord3hvNVFn)( GL::Enum, GL::HalfNV const* );
	typedef void (FLUXGL_API *MultiTexCoord4hNVFn)( GL::Enum, GL::HalfNV, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *MultiTexCoord4hvNVFn)( GL::Enum, GL::HalfNV const* );
	typedef void (FLUXGL_API *Normal3hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *Normal3hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *SecondaryColor3hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *SecondaryColor3hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *TexCoord1hNVFn)( GL::HalfNV );
	typedef void (FLUXGL_API *TexCoord1hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *TexCoord2hNVFn)( GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *TexCoord2hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *TexCoord3hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *TexCoord3hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *TexCoord4hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *TexCoord4hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *Vertex2hNVFn)( GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *Vertex2hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *Vertex3hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *Vertex3hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *Vertex4hNVFn)( GL::HalfNV, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *Vertex4hvNVFn)( GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttrib1hNVFn)( GL::UInt, GL::HalfNV );
	typedef void (FLUXGL_API *VertexAttrib1hvNVFn)( GL::UInt, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttrib2hNVFn)( GL::UInt, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *VertexAttrib2hvNVFn)( GL::UInt, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttrib3hNVFn)( GL::UInt, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *VertexAttrib3hvNVFn)( GL::UInt, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttrib4hNVFn)( GL::UInt, GL::HalfNV, GL::HalfNV, GL::HalfNV, GL::HalfNV );
	typedef void (FLUXGL_API *VertexAttrib4hvNVFn)( GL::UInt, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttribs1hvNVFn)( GL::UInt, GL::Sizei, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttribs2hvNVFn)( GL::UInt, GL::Sizei, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttribs3hvNVFn)( GL::UInt, GL::Sizei, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexAttribs4hvNVFn)( GL::UInt, GL::Sizei, GL::HalfNV const* );
	typedef void (FLUXGL_API *VertexWeighthNVFn)( GL::HalfNV );
	typedef void (FLUXGL_API *VertexWeighthvNVFn)( GL::HalfNV const* );
	//- end: NV_half_float

	//-//-- 
	//- Ext: NV_internalformat_sample_query
	typedef void (FLUXGL_API *GetInternalformatSampleivNVFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Enum, GL::Sizei, GL::Int* );
	//- end: NV_internalformat_sample_query

	//-//-- 
	//- Ext: NV_occlusion_query
	typedef void (FLUXGL_API *BeginOcclusionQueryNVFn)( GL::UInt );
	typedef void (FLUXGL_API *DeleteOcclusionQueriesNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *EndOcclusionQueryNVFn)( );
	typedef void (FLUXGL_API *GenOcclusionQueriesNVFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetOcclusionQueryivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetOcclusionQueryuivNVFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsOcclusionQueryNVFn)( GL::UInt );
	//- end: NV_occlusion_query

	//-//-- 
	//- Ext: NV_parameter_buffer_object
	typedef void (FLUXGL_API *ProgramBufferParametersIivNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei, GL::Int const* );
	typedef void (FLUXGL_API *ProgramBufferParametersIuivNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ProgramBufferParametersfvNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::Sizei, GL::Float const* );
	//- end: NV_parameter_buffer_object

	//-//-- 
	//- Ext: NV_path_rendering
	typedef void (FLUXGL_API *CopyPathNVFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *CoverFillPathInstancedNVFn)( GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *CoverFillPathNVFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *CoverStrokePathInstancedNVFn)( GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *CoverStrokePathNVFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *DeletePathsNVFn)( GL::UInt, GL::Sizei );
	typedef GL::UInt (FLUXGL_API *GenPathsNVFn)( GL::Sizei );
	typedef void (FLUXGL_API *GetPathColorGenfvNVFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPathColorGenivNVFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetPathCommandsNVFn)( GL::UInt, GL::UByte* );
	typedef void (FLUXGL_API *GetPathCoordsNVFn)( GL::UInt, GL::Float* );
	typedef void (FLUXGL_API *GetPathDashArrayNVFn)( GL::UInt, GL::Float* );
	typedef GL::Float (FLUXGL_API *GetPathLengthNVFn)( GL::UInt, GL::Sizei, GL::Sizei );
	typedef void (FLUXGL_API *GetPathMetricRangeNVFn)( GL::Bitfield, GL::UInt, GL::Sizei, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetPathMetricsNVFn)( GL::Bitfield, GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Sizei, GL::Float* );
	typedef void (FLUXGL_API *GetPathParameterfvNVFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPathParameterivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetPathSpacingNVFn)( GL::Enum, GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Float, GL::Float, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPathTexGenfvNVFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPathTexGenivNVFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetProgramResourcefvNVFn)( GL::UInt, GL::Enum, GL::UInt, GL::Sizei, GL::Enum const*, GL::Sizei, GL::Sizei*, GL::Float* );
	typedef void (FLUXGL_API *InterpolatePathsNVFn)( GL::UInt, GL::UInt, GL::UInt, GL::Float );
	typedef GL::Boolean (FLUXGL_API *IsPathNVFn)( GL::UInt );
	typedef GL::Boolean (FLUXGL_API *IsPointInFillPathNVFn)( GL::UInt, GL::UInt, GL::Float, GL::Float );
	typedef GL::Boolean (FLUXGL_API *IsPointInStrokePathNVFn)( GL::UInt, GL::Float, GL::Float );
	typedef void (FLUXGL_API *MatrixLoad3x2fNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixLoad3x3fNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixLoadTranspose3x3fNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixMult3x2fNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixMult3x3fNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *MatrixMultTranspose3x3fNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PathColorGenNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PathCommandsNVFn)( GL::UInt, GL::Sizei, GL::UByte const*, GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *PathCoordsNVFn)( GL::UInt, GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *PathCoverDepthFuncNVFn)( GL::Enum );
	typedef void (FLUXGL_API *PathDashArrayNVFn)( GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *PathFogGenNVFn)( GL::Enum );
	typedef GL::Enum (FLUXGL_API *PathGlyphIndexArrayNVFn)( GL::UInt, GL::Enum, void const*, GL::Bitfield, GL::UInt, GL::Sizei, GL::UInt, GL::Float );
	typedef GL::Enum (FLUXGL_API *PathGlyphIndexRangeNVFn)( GL::Enum, void const*, GL::Bitfield, GL::UInt, GL::Float, GL::UInt );
	typedef void (FLUXGL_API *PathGlyphRangeNVFn)( GL::UInt, GL::Enum, void const*, GL::Bitfield, GL::UInt, GL::Sizei, GL::Enum, GL::UInt, GL::Float );
	typedef void (FLUXGL_API *PathGlyphsNVFn)( GL::UInt, GL::Enum, void const*, GL::Bitfield, GL::Sizei, GL::Enum, void const*, GL::Enum, GL::UInt, GL::Float );
	typedef GL::Enum (FLUXGL_API *PathMemoryGlyphIndexArrayNVFn)( GL::UInt, GL::Enum, GL::Sizeiptr, void const*, GL::Sizei, GL::UInt, GL::Sizei, GL::UInt, GL::Float );
	typedef void (FLUXGL_API *PathParameterfNVFn)( GL::UInt, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PathParameterfvNVFn)( GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PathParameteriNVFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PathParameterivNVFn)( GL::UInt, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *PathStencilDepthOffsetNVFn)( GL::Float, GL::Float );
	typedef void (FLUXGL_API *PathStencilFuncNVFn)( GL::Enum, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *PathStringNVFn)( GL::UInt, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *PathSubCommandsNVFn)( GL::UInt, GL::Sizei, GL::Sizei, GL::Sizei, GL::UByte const*, GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *PathSubCoordsNVFn)( GL::UInt, GL::Sizei, GL::Sizei, GL::Enum, void const* );
	typedef void (FLUXGL_API *PathTexGenNVFn)( GL::Enum, GL::Enum, GL::Int, GL::Float const* );
	typedef GL::Boolean (FLUXGL_API *PointAlongPathNVFn)( GL::UInt, GL::Sizei, GL::Sizei, GL::Float, GL::Float*, GL::Float*, GL::Float*, GL::Float* );
	typedef void (FLUXGL_API *ProgramPathFragmentInputGenNVFn)( GL::UInt, GL::Int, GL::Enum, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *StencilFillPathInstancedNVFn)( GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Enum, GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *StencilFillPathNVFn)( GL::UInt, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *StencilStrokePathInstancedNVFn)( GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Int, GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *StencilStrokePathNVFn)( GL::UInt, GL::Int, GL::UInt );
	typedef void (FLUXGL_API *StencilThenCoverFillPathInstancedNVFn)( GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Enum, GL::UInt, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *StencilThenCoverFillPathNVFn)( GL::UInt, GL::Enum, GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *StencilThenCoverStrokePathInstancedNVFn)( GL::Sizei, GL::Enum, void const*, GL::UInt, GL::Int, GL::UInt, GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *StencilThenCoverStrokePathNVFn)( GL::UInt, GL::Int, GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *TransformPathNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *WeightPathsNVFn)( GL::UInt, GL::Sizei, GL::UInt const*, GL::Float const* );
	//- end: NV_path_rendering

	//-//-- 
	//- Ext: NV_pixel_data_range
	typedef void (FLUXGL_API *FlushPixelDataRangeNVFn)( GL::Enum );
	typedef void (FLUXGL_API *PixelDataRangeNVFn)( GL::Enum, GL::Sizei, void const* );
	//- end: NV_pixel_data_range

	//-//-- 
	//- Ext: NV_point_sprite
	typedef void (FLUXGL_API *PointParameteriNVFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PointParameterivNVFn)( GL::Enum, GL::Int const* );
	//- end: NV_point_sprite

	//-//-- 
	//- Ext: NV_present_video
	typedef void (FLUXGL_API *GetVideoi64vNVFn)( GL::UInt, GL::Enum, GL::Int64EXT* );
	typedef void (FLUXGL_API *GetVideoivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVideoui64vNVFn)( GL::UInt, GL::Enum, GL::UInt64EXT* );
	typedef void (FLUXGL_API *GetVideouivNVFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *PresentFrameDualFillNVFn)( GL::UInt, GL::UInt64EXT, GL::UInt, GL::UInt, GL::Enum, GL::Enum, GL::UInt, GL::Enum, GL::UInt, GL::Enum, GL::UInt, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *PresentFrameKeyedNVFn)( GL::UInt, GL::UInt64EXT, GL::UInt, GL::UInt, GL::Enum, GL::Enum, GL::UInt, GL::UInt, GL::Enum, GL::UInt, GL::UInt );
	//- end: NV_present_video

	//-//-- 
	//- Ext: NV_primitive_restart
	typedef void (FLUXGL_API *PrimitiveRestartIndexNVFn)( GL::UInt );
	typedef void (FLUXGL_API *PrimitiveRestartNVFn)( );
	//- end: NV_primitive_restart

	//-//-- 
	//- Ext: NV_register_combiners
	typedef void (FLUXGL_API *CombinerInputNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *CombinerOutputNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Boolean, GL::Boolean, GL::Boolean );
	typedef void (FLUXGL_API *CombinerParameterfNVFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *CombinerParameterfvNVFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *CombinerParameteriNVFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *CombinerParameterivNVFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *FinalCombinerInputNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *GetCombinerInputParameterfvNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetCombinerInputParameterivNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetCombinerOutputParameterfvNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetCombinerOutputParameterivNVFn)( GL::Enum, GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetFinalCombinerInputParameterfvNVFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetFinalCombinerInputParameterivNVFn)( GL::Enum, GL::Enum, GL::Int* );
	//- end: NV_register_combiners

	//-//-- 
	//- Ext: NV_register_combiners2
	typedef void (FLUXGL_API *CombinerStageParameterfvNVFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *GetCombinerStageParameterfvNVFn)( GL::Enum, GL::Enum, GL::Float* );
	//- end: NV_register_combiners2

	//-//-- 
	//- Ext: NV_sample_locations
	typedef void (FLUXGL_API *FramebufferSampleLocationsfvNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *NamedFramebufferSampleLocationsfvNVFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *ResolveDepthValuesNVFn)( );
	//- end: NV_sample_locations

	//-//-- 
	//- Ext: NV_shader_buffer_load
	typedef void (FLUXGL_API *GetBufferParameterui64vNVFn)( GL::Enum, GL::Enum, GL::UInt64EXT* );
	typedef void (FLUXGL_API *GetIntegerui64vNVFn)( GL::Enum, GL::UInt64EXT* );
	typedef void (FLUXGL_API *GetNamedBufferParameterui64vNVFn)( GL::UInt, GL::Enum, GL::UInt64EXT* );
	// GetUniformui64vNVFn already defined in AMD_gpu_shader_int64
	typedef GL::Boolean (FLUXGL_API *IsBufferResidentNVFn)( GL::Enum );
	typedef GL::Boolean (FLUXGL_API *IsNamedBufferResidentNVFn)( GL::UInt );
	typedef void (FLUXGL_API *MakeBufferNonResidentNVFn)( GL::Enum );
	typedef void (FLUXGL_API *MakeBufferResidentNVFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *MakeNamedBufferNonResidentNVFn)( GL::UInt );
	typedef void (FLUXGL_API *MakeNamedBufferResidentNVFn)( GL::UInt, GL::Enum );
	typedef void (FLUXGL_API *ProgramUniformui64NVFn)( GL::UInt, GL::Int, GL::UInt64EXT );
	typedef void (FLUXGL_API *ProgramUniformui64vNVFn)( GL::UInt, GL::Int, GL::Sizei, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *Uniformui64NVFn)( GL::Int, GL::UInt64EXT );
	typedef void (FLUXGL_API *Uniformui64vNVFn)( GL::Int, GL::Sizei, GL::UInt64EXT const* );
	//- end: NV_shader_buffer_load

	//-//-- 
	//- Ext: NV_texture_barrier
	typedef void (FLUXGL_API *TextureBarrierNVFn)( );
	//- end: NV_texture_barrier

	//-//-- 
	//- Ext: NV_texture_multisample
	typedef void (FLUXGL_API *TexImage2DMultisampleCoverageNVFn)( GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TexImage3DMultisampleCoverageNVFn)( GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureImage2DMultisampleCoverageNVFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureImage2DMultisampleNVFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Int, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureImage3DMultisampleCoverageNVFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Sizei, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	typedef void (FLUXGL_API *TextureImage3DMultisampleNVFn)( GL::UInt, GL::Enum, GL::Sizei, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Boolean );
	//- end: NV_texture_multisample

	//-//-- 
	//- Ext: NV_transform_feedback
	typedef void (FLUXGL_API *ActiveVaryingNVFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *BeginTransformFeedbackNVFn)( GL::Enum );
	typedef void (FLUXGL_API *BindBufferBaseNVFn)( GL::Enum, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *BindBufferOffsetNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::Intptr );
	typedef void (FLUXGL_API *BindBufferRangeNVFn)( GL::Enum, GL::UInt, GL::UInt, GL::Intptr, GL::Sizeiptr );
	typedef void (FLUXGL_API *EndTransformFeedbackNVFn)( );
	typedef void (FLUXGL_API *GetActiveVaryingNVFn)( GL::UInt, GL::UInt, GL::Sizei, GL::Sizei*, GL::Sizei*, GL::Enum*, GL::Char* );
	typedef void (FLUXGL_API *GetTransformFeedbackVaryingNVFn)( GL::UInt, GL::UInt, GL::Int* );
	typedef GL::Int (FLUXGL_API *GetVaryingLocationNVFn)( GL::UInt, GL::Char const* );
	typedef void (FLUXGL_API *TransformFeedbackAttribsNVFn)( GL::Sizei, GL::Int const*, GL::Enum );
	typedef void (FLUXGL_API *TransformFeedbackStreamAttribsNVFn)( GL::Sizei, GL::Int const*, GL::Sizei, GL::Int const*, GL::Enum );
	typedef void (FLUXGL_API *TransformFeedbackVaryingsNVFn)( GL::UInt, GL::Sizei, GL::Int const*, GL::Enum );
	//- end: NV_transform_feedback

	//-//-- 
	//- Ext: NV_transform_feedback2
	typedef void (FLUXGL_API *BindTransformFeedbackNVFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DeleteTransformFeedbacksNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *DrawTransformFeedbackNVFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *GenTransformFeedbacksNVFn)( GL::Sizei, GL::UInt* );
	typedef GL::Boolean (FLUXGL_API *IsTransformFeedbackNVFn)( GL::UInt );
	typedef void (FLUXGL_API *PauseTransformFeedbackNVFn)( );
	typedef void (FLUXGL_API *ResumeTransformFeedbackNVFn)( );
	//- end: NV_transform_feedback2

	//-//-- 
	//- Ext: NV_vdpau_interop
	typedef void (FLUXGL_API *VDPAUFiniNVFn)( );
	typedef void (FLUXGL_API *VDPAUGetSurfaceivNVFn)( GL::VdpauSurfaceNV, GL::Enum, GL::Sizei, GL::Sizei*, GL::Int* );
	typedef void (FLUXGL_API *VDPAUInitNVFn)( void const*, void const* );
	typedef GL::Boolean (FLUXGL_API *VDPAUIsSurfaceNVFn)( GL::VdpauSurfaceNV );
	typedef void (FLUXGL_API *VDPAUMapSurfacesNVFn)( GL::Sizei, GL::VdpauSurfaceNV const* );
	typedef GL::VdpauSurfaceNV (FLUXGL_API *VDPAURegisterOutputSurfaceNVFn)( void const*, GL::Enum, GL::Sizei, GL::UInt const* );
	typedef GL::VdpauSurfaceNV (FLUXGL_API *VDPAURegisterVideoSurfaceNVFn)( void const*, GL::Enum, GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *VDPAUSurfaceAccessNVFn)( GL::VdpauSurfaceNV, GL::Enum );
	typedef void (FLUXGL_API *VDPAUUnmapSurfacesNVFn)( GL::Sizei, GL::VdpauSurfaceNV const* );
	typedef void (FLUXGL_API *VDPAUUnregisterSurfaceNVFn)( GL::VdpauSurfaceNV );
	//- end: NV_vdpau_interop

	//-//-- 
	//- Ext: NV_vertex_array_range
	typedef void (FLUXGL_API *FlushVertexArrayRangeNVFn)( );
	typedef void (FLUXGL_API *VertexArrayRangeNVFn)( GL::Sizei, void const* );
	//- end: NV_vertex_array_range

	//-//-- 
	//- Ext: NV_vertex_attrib_integer_64bit
	typedef void (FLUXGL_API *GetVertexAttribLi64vNVFn)( GL::UInt, GL::Enum, GL::Int64EXT* );
	typedef void (FLUXGL_API *GetVertexAttribLui64vNVFn)( GL::UInt, GL::Enum, GL::UInt64EXT* );
	typedef void (FLUXGL_API *VertexAttribL1i64NVFn)( GL::UInt, GL::Int64EXT );
	typedef void (FLUXGL_API *VertexAttribL1i64vNVFn)( GL::UInt, GL::Int64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL1ui64NVFn)( GL::UInt, GL::UInt64EXT );
	typedef void (FLUXGL_API *VertexAttribL1ui64vNVFn)( GL::UInt, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL2i64NVFn)( GL::UInt, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *VertexAttribL2i64vNVFn)( GL::UInt, GL::Int64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL2ui64NVFn)( GL::UInt, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *VertexAttribL2ui64vNVFn)( GL::UInt, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL3i64NVFn)( GL::UInt, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *VertexAttribL3i64vNVFn)( GL::UInt, GL::Int64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL3ui64NVFn)( GL::UInt, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *VertexAttribL3ui64vNVFn)( GL::UInt, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL4i64NVFn)( GL::UInt, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT, GL::Int64EXT );
	typedef void (FLUXGL_API *VertexAttribL4i64vNVFn)( GL::UInt, GL::Int64EXT const* );
	typedef void (FLUXGL_API *VertexAttribL4ui64NVFn)( GL::UInt, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT, GL::UInt64EXT );
	typedef void (FLUXGL_API *VertexAttribL4ui64vNVFn)( GL::UInt, GL::UInt64EXT const* );
	typedef void (FLUXGL_API *VertexAttribLFormatNVFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei );
	//- end: NV_vertex_attrib_integer_64bit

	//-//-- 
	//- Ext: NV_vertex_buffer_unified_memory
	typedef void (FLUXGL_API *BufferAddressRangeNVFn)( GL::Enum, GL::UInt, GL::UInt64EXT, GL::Sizeiptr );
	typedef void (FLUXGL_API *ColorFormatNVFn)( GL::Int, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *EdgeFlagFormatNVFn)( GL::Sizei );
	typedef void (FLUXGL_API *FogCoordFormatNVFn)( GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *GetIntegerui64i_vNVFn)( GL::Enum, GL::UInt, GL::UInt64EXT* );
	typedef void (FLUXGL_API *IndexFormatNVFn)( GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *NormalFormatNVFn)( GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *SecondaryColorFormatNVFn)( GL::Int, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *TexCoordFormatNVFn)( GL::Int, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *VertexAttribFormatNVFn)( GL::UInt, GL::Int, GL::Enum, GL::Boolean, GL::Sizei );
	typedef void (FLUXGL_API *VertexAttribIFormatNVFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei );
	typedef void (FLUXGL_API *VertexFormatNVFn)( GL::Int, GL::Enum, GL::Sizei );
	//- end: NV_vertex_buffer_unified_memory

	//-//-- 
	//- Ext: NV_vertex_program
	typedef GL::Boolean (FLUXGL_API *AreProgramsResidentNVFn)( GL::Sizei, GL::UInt const*, GL::Boolean* );
	typedef void (FLUXGL_API *BindProgramNVFn)( GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *DeleteProgramsNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *ExecuteProgramNVFn)( GL::Enum, GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *GenProgramsNVFn)( GL::Sizei, GL::UInt* );
	typedef void (FLUXGL_API *GetProgramParameterdvNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetProgramParameterfvNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetProgramStringNVFn)( GL::UInt, GL::Enum, GL::UByte* );
	typedef void (FLUXGL_API *GetProgramivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetTrackMatrixivNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexAttribPointervNVFn)( GL::UInt, GL::Enum, void* * );
	typedef void (FLUXGL_API *GetVertexAttribdvNVFn)( GL::UInt, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetVertexAttribfvNVFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVertexAttribivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Boolean (FLUXGL_API *IsProgramNVFn)( GL::UInt );
	typedef void (FLUXGL_API *LoadProgramNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::UByte const* );
	typedef void (FLUXGL_API *ProgramParameter4dNVFn)( GL::Enum, GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *ProgramParameter4dvNVFn)( GL::Enum, GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *ProgramParameter4fNVFn)( GL::Enum, GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *ProgramParameter4fvNVFn)( GL::Enum, GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *ProgramParameters4dvNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *ProgramParameters4fvNVFn)( GL::Enum, GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *RequestResidentProgramsNVFn)( GL::Sizei, GL::UInt const* );
	typedef void (FLUXGL_API *TrackMatrixNVFn)( GL::Enum, GL::UInt, GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *VertexAttrib1dNVFn)( GL::UInt, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib1dvNVFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib1fNVFn)( GL::UInt, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib1fvNVFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib1sNVFn)( GL::UInt, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib1svNVFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib2dNVFn)( GL::UInt, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib2dvNVFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib2fNVFn)( GL::UInt, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib2fvNVFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib2sNVFn)( GL::UInt, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib2svNVFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib3dNVFn)( GL::UInt, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib3dvNVFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib3fNVFn)( GL::UInt, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib3fvNVFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib3sNVFn)( GL::UInt, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib3svNVFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4dNVFn)( GL::UInt, GL::Double, GL::Double, GL::Double, GL::Double );
	typedef void (FLUXGL_API *VertexAttrib4dvNVFn)( GL::UInt, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttrib4fNVFn)( GL::UInt, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *VertexAttrib4fvNVFn)( GL::UInt, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttrib4sNVFn)( GL::UInt, GL::Short, GL::Short, GL::Short, GL::Short );
	typedef void (FLUXGL_API *VertexAttrib4svNVFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttrib4ubNVFn)( GL::UInt, GL::UByte, GL::UByte, GL::UByte, GL::UByte );
	typedef void (FLUXGL_API *VertexAttrib4ubvNVFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttribPointerNVFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei, void const* );
	typedef void (FLUXGL_API *VertexAttribs1dvNVFn)( GL::UInt, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribs1fvNVFn)( GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttribs1svNVFn)( GL::UInt, GL::Sizei, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttribs2dvNVFn)( GL::UInt, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribs2fvNVFn)( GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttribs2svNVFn)( GL::UInt, GL::Sizei, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttribs3dvNVFn)( GL::UInt, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribs3fvNVFn)( GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttribs3svNVFn)( GL::UInt, GL::Sizei, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttribs4dvNVFn)( GL::UInt, GL::Sizei, GL::Double const* );
	typedef void (FLUXGL_API *VertexAttribs4fvNVFn)( GL::UInt, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *VertexAttribs4svNVFn)( GL::UInt, GL::Sizei, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttribs4ubvNVFn)( GL::UInt, GL::Sizei, GL::UByte const* );
	//- end: NV_vertex_program

	//-//-- 
	//- Ext: NV_vertex_program4
	typedef void (FLUXGL_API *GetVertexAttribIivEXTFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVertexAttribIuivEXTFn)( GL::UInt, GL::Enum, GL::UInt* );
	typedef void (FLUXGL_API *VertexAttribI1iEXTFn)( GL::UInt, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI1ivEXTFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI1uiEXTFn)( GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI1uivEXTFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI2iEXTFn)( GL::UInt, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI2ivEXTFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI2uiEXTFn)( GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI2uivEXTFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI3iEXTFn)( GL::UInt, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI3ivEXTFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI3uiEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI3uivEXTFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI4bvEXTFn)( GL::UInt, GL::Byte const* );
	typedef void (FLUXGL_API *VertexAttribI4iEXTFn)( GL::UInt, GL::Int, GL::Int, GL::Int, GL::Int );
	typedef void (FLUXGL_API *VertexAttribI4ivEXTFn)( GL::UInt, GL::Int const* );
	typedef void (FLUXGL_API *VertexAttribI4svEXTFn)( GL::UInt, GL::Short const* );
	typedef void (FLUXGL_API *VertexAttribI4ubvEXTFn)( GL::UInt, GL::UByte const* );
	typedef void (FLUXGL_API *VertexAttribI4uiEXTFn)( GL::UInt, GL::UInt, GL::UInt, GL::UInt, GL::UInt );
	typedef void (FLUXGL_API *VertexAttribI4uivEXTFn)( GL::UInt, GL::UInt const* );
	typedef void (FLUXGL_API *VertexAttribI4usvEXTFn)( GL::UInt, GL::UShort const* );
	typedef void (FLUXGL_API *VertexAttribIPointerEXTFn)( GL::UInt, GL::Int, GL::Enum, GL::Sizei, void const* );
	//- end: NV_vertex_program4

	//-//-- 
	//- Ext: NV_video_capture
	typedef void (FLUXGL_API *BeginVideoCaptureNVFn)( GL::UInt );
	typedef void (FLUXGL_API *BindVideoCaptureStreamBufferNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::IntptrARB );
	typedef void (FLUXGL_API *BindVideoCaptureStreamTextureNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Enum, GL::UInt );
	typedef void (FLUXGL_API *EndVideoCaptureNVFn)( GL::UInt );
	typedef void (FLUXGL_API *GetVideoCaptureStreamdvNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Double* );
	typedef void (FLUXGL_API *GetVideoCaptureStreamfvNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetVideoCaptureStreamivNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetVideoCaptureivNVFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef GL::Enum (FLUXGL_API *VideoCaptureNVFn)( GL::UInt, GL::UInt*, GL::UInt64EXT* );
	typedef void (FLUXGL_API *VideoCaptureStreamParameterdvNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Double const* );
	typedef void (FLUXGL_API *VideoCaptureStreamParameterfvNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *VideoCaptureStreamParameterivNVFn)( GL::UInt, GL::UInt, GL::Enum, GL::Int const* );
	//- end: NV_video_capture

	//-//-- 
	//- Ext: OES_byte_coordinates
	typedef void (FLUXGL_API *MultiTexCoord1bOESFn)( GL::Enum, GL::Byte );
	typedef void (FLUXGL_API *MultiTexCoord1bvOESFn)( GL::Enum, GL::Byte const* );
	typedef void (FLUXGL_API *MultiTexCoord2bOESFn)( GL::Enum, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *MultiTexCoord2bvOESFn)( GL::Enum, GL::Byte const* );
	typedef void (FLUXGL_API *MultiTexCoord3bOESFn)( GL::Enum, GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *MultiTexCoord3bvOESFn)( GL::Enum, GL::Byte const* );
	typedef void (FLUXGL_API *MultiTexCoord4bOESFn)( GL::Enum, GL::Byte, GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *MultiTexCoord4bvOESFn)( GL::Enum, GL::Byte const* );
	typedef void (FLUXGL_API *TexCoord1bOESFn)( GL::Byte );
	typedef void (FLUXGL_API *TexCoord1bvOESFn)( GL::Byte const* );
	typedef void (FLUXGL_API *TexCoord2bOESFn)( GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *TexCoord2bvOESFn)( GL::Byte const* );
	typedef void (FLUXGL_API *TexCoord3bOESFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *TexCoord3bvOESFn)( GL::Byte const* );
	typedef void (FLUXGL_API *TexCoord4bOESFn)( GL::Byte, GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *TexCoord4bvOESFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Vertex2bOESFn)( GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Vertex2bvOESFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Vertex3bOESFn)( GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Vertex3bvOESFn)( GL::Byte const* );
	typedef void (FLUXGL_API *Vertex4bOESFn)( GL::Byte, GL::Byte, GL::Byte, GL::Byte );
	typedef void (FLUXGL_API *Vertex4bvOESFn)( GL::Byte const* );
	//- end: OES_byte_coordinates

	//-//-- 
	//- Ext: OES_fixed_point
	typedef void (FLUXGL_API *AccumxOESFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *AlphaFuncxOESFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *BitmapxOESFn)( GL::Sizei, GL::Sizei, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed, GL::UByte const* );
	typedef void (FLUXGL_API *BlendColorxOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *ClearAccumxOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *ClearColorxOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *ClearDepthxOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *ClipPlanexOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *Color3xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *Color3xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *Color4xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *Color4xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *ConvolutionParameterxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *ConvolutionParameterxvOESFn)( GL::Enum, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *DepthRangexOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *EvalCoord1xOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *EvalCoord1xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *EvalCoord2xOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *EvalCoord2xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *FeedbackBufferxOESFn)( GL::Sizei, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *FogxOESFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *FogxvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *FrustumxOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *GetClipPlanexOESFn)( GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetConvolutionParameterxvOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetFixedvOESFn)( GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetHistogramParameterxvOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetLightxOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetMapxvOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetMaterialxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *GetPixelMapxvFn)( GL::Enum, GL::Int, GL::Fixed* );
	typedef void (FLUXGL_API *GetTexEnvxvOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetTexGenxvOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetTexLevelParameterxvOESFn)( GL::Enum, GL::Int, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *GetTexParameterxvOESFn)( GL::Enum, GL::Enum, GL::Fixed* );
	typedef void (FLUXGL_API *IndexxOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *IndexxvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *LightModelxOESFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *LightModelxvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *LightxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *LightxvOESFn)( GL::Enum, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *LineWidthxOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *LoadMatrixxOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *LoadTransposeMatrixxOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *Map1xOESFn)( GL::Enum, GL::Fixed, GL::Fixed, GL::Int, GL::Int, GL::Fixed );
	typedef void (FLUXGL_API *Map2xOESFn)( GL::Enum, GL::Fixed, GL::Fixed, GL::Int, GL::Int, GL::Fixed, GL::Fixed, GL::Int, GL::Int, GL::Fixed );
	typedef void (FLUXGL_API *MapGrid1xOESFn)( GL::Int, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *MapGrid2xOESFn)( GL::Int, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *MaterialxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *MaterialxvOESFn)( GL::Enum, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *MultMatrixxOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *MultTransposeMatrixxOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *MultiTexCoord1xOESFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *MultiTexCoord1xvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *MultiTexCoord2xOESFn)( GL::Enum, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *MultiTexCoord2xvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *MultiTexCoord3xOESFn)( GL::Enum, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *MultiTexCoord3xvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *MultiTexCoord4xOESFn)( GL::Enum, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *MultiTexCoord4xvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *Normal3xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *Normal3xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *OrthoxOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *PassThroughxOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *PixelMapxFn)( GL::Enum, GL::Int, GL::Fixed const* );
	typedef void (FLUXGL_API *PixelStorexFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *PixelTransferxOESFn)( GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *PixelZoomxOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *PointParameterxvOESFn)( GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *PointSizexOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *PolygonOffsetxOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *PrioritizeTexturesxOESFn)( GL::Sizei, GL::UInt const*, GL::Fixed const* );
	typedef void (FLUXGL_API *RasterPos2xOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *RasterPos2xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *RasterPos3xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *RasterPos3xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *RasterPos4xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *RasterPos4xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *RectxOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *RectxvOESFn)( GL::Fixed const*, GL::Fixed const* );
	typedef void (FLUXGL_API *RotatexOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *ScalexOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *TexCoord1xOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *TexCoord1xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *TexCoord2xOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *TexCoord2xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *TexCoord3xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *TexCoord3xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *TexCoord4xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *TexCoord4xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *TexEnvxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *TexEnvxvOESFn)( GL::Enum, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *TexGenxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *TexGenxvOESFn)( GL::Enum, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *TexParameterxOESFn)( GL::Enum, GL::Enum, GL::Fixed );
	typedef void (FLUXGL_API *TexParameterxvOESFn)( GL::Enum, GL::Enum, GL::Fixed const* );
	typedef void (FLUXGL_API *TranslatexOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *Vertex2xOESFn)( GL::Fixed );
	typedef void (FLUXGL_API *Vertex2xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *Vertex3xOESFn)( GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *Vertex3xvOESFn)( GL::Fixed const* );
	typedef void (FLUXGL_API *Vertex4xOESFn)( GL::Fixed, GL::Fixed, GL::Fixed );
	typedef void (FLUXGL_API *Vertex4xvOESFn)( GL::Fixed const* );
	//- end: OES_fixed_point

	//-//-- 
	//- Ext: OES_query_matrix
	typedef GL::Bitfield (FLUXGL_API *QueryMatrixxOESFn)( GL::Fixed*, GL::Int* );
	//- end: OES_query_matrix

	//-//-- 
	//- Ext: OES_single_precision
	typedef void (FLUXGL_API *ClearDepthfOESFn)( GL::Clampf );
	typedef void (FLUXGL_API *ClipPlanefOESFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *DepthRangefOESFn)( GL::Clampf, GL::Clampf );
	typedef void (FLUXGL_API *FrustumfOESFn)( GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float );
	typedef void (FLUXGL_API *GetClipPlanefOESFn)( GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *OrthofOESFn)( GL::Float, GL::Float, GL::Float, GL::Float, GL::Float, GL::Float );
	//- end: OES_single_precision

	//-//-- 
	//- Ext: OVR_multiview
	typedef void (FLUXGL_API *FramebufferTextureMultiviewOVRFn)( GL::Enum, GL::Enum, GL::UInt, GL::Int, GL::Int, GL::Sizei );
	//- end: OVR_multiview

	//-//-- 
	//- Ext: PGI_misc_hints
	typedef void (FLUXGL_API *HintPGIFn)( GL::Enum, GL::Int );
	//- end: PGI_misc_hints

	//-//-- 
	//- Ext: SGIS_detail_texture
	typedef void (FLUXGL_API *DetailTexFuncSGISFn)( GL::Enum, GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *GetDetailTexFuncSGISFn)( GL::Enum, GL::Float* );
	//- end: SGIS_detail_texture

	//-//-- 
	//- Ext: SGIS_fog_function
	typedef void (FLUXGL_API *FogFuncSGISFn)( GL::Sizei, GL::Float const* );
	typedef void (FLUXGL_API *GetFogFuncSGISFn)( GL::Float* );
	//- end: SGIS_fog_function

	//-//-- 
	//- Ext: SGIS_multisample
	typedef void (FLUXGL_API *SampleMaskSGISFn)( GL::Clampf, GL::Boolean );
	typedef void (FLUXGL_API *SamplePatternSGISFn)( GL::Enum );
	//- end: SGIS_multisample

	//-//-- 
	//- Ext: SGIS_pixel_texture
	typedef void (FLUXGL_API *GetPixelTexGenParameterfvSGISFn)( GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetPixelTexGenParameterivSGISFn)( GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *PixelTexGenParameterfSGISFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PixelTexGenParameterfvSGISFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *PixelTexGenParameteriSGISFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *PixelTexGenParameterivSGISFn)( GL::Enum, GL::Int const* );
	//- end: SGIS_pixel_texture

	//-//-- 
	//- Ext: SGIS_point_parameters
	typedef void (FLUXGL_API *PointParameterfSGISFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *PointParameterfvSGISFn)( GL::Enum, GL::Float const* );
	//- end: SGIS_point_parameters

	//-//-- 
	//- Ext: SGIS_sharpen_texture
	typedef void (FLUXGL_API *GetSharpenTexFuncSGISFn)( GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *SharpenTexFuncSGISFn)( GL::Enum, GL::Sizei, GL::Float const* );
	//- end: SGIS_sharpen_texture

	//-//-- 
	//- Ext: SGIS_texture4D
	typedef void (FLUXGL_API *TexImage4DSGISFn)( GL::Enum, GL::Int, GL::Enum, GL::Sizei, GL::Sizei, GL::Sizei, GL::Sizei, GL::Int, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *TexSubImage4DSGISFn)( GL::Enum, GL::Int, GL::Int, GL::Int, GL::Int, GL::Int, GL::Sizei, GL::Sizei, GL::Sizei, GL::Sizei, GL::Enum, GL::Enum, void const* );
	//- end: SGIS_texture4D

	//-//-- 
	//- Ext: SGIS_texture_color_mask
	typedef void (FLUXGL_API *TextureColorMaskSGISFn)( GL::Boolean, GL::Boolean, GL::Boolean, GL::Boolean );
	//- end: SGIS_texture_color_mask

	//-//-- 
	//- Ext: SGIS_texture_filter4
	typedef void (FLUXGL_API *GetTexFilterFuncSGISFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *TexFilterFuncSGISFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Float const* );
	//- end: SGIS_texture_filter4

	//-//-- 
	//- Ext: SGIX_async
	typedef void (FLUXGL_API *AsyncMarkerSGIXFn)( GL::UInt );
	typedef void (FLUXGL_API *DeleteAsyncMarkersSGIXFn)( GL::UInt, GL::Sizei );
	typedef GL::Int (FLUXGL_API *FinishAsyncSGIXFn)( GL::UInt* );
	typedef GL::UInt (FLUXGL_API *GenAsyncMarkersSGIXFn)( GL::Sizei );
	typedef GL::Boolean (FLUXGL_API *IsAsyncMarkerSGIXFn)( GL::UInt );
	typedef GL::Int (FLUXGL_API *PollAsyncSGIXFn)( GL::UInt* );
	//- end: SGIX_async

	//-//-- 
	//- Ext: SGIX_flush_raster
	typedef void (FLUXGL_API *FlushRasterSGIXFn)( );
	//- end: SGIX_flush_raster

	//-//-- 
	//- Ext: SGIX_fragment_lighting
	typedef void (FLUXGL_API *FragmentColorMaterialSGIXFn)( GL::Enum, GL::Enum );
	typedef void (FLUXGL_API *FragmentLightModelfSGIXFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *FragmentLightModelfvSGIXFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *FragmentLightModeliSGIXFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *FragmentLightModelivSGIXFn)( GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *FragmentLightfSGIXFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *FragmentLightfvSGIXFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *FragmentLightiSGIXFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *FragmentLightivSGIXFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *FragmentMaterialfSGIXFn)( GL::Enum, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *FragmentMaterialfvSGIXFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *FragmentMaterialiSGIXFn)( GL::Enum, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *FragmentMaterialivSGIXFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *GetFragmentLightfvSGIXFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetFragmentLightivSGIXFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetFragmentMaterialfvSGIXFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetFragmentMaterialivSGIXFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *LightEnviSGIXFn)( GL::Enum, GL::Int );
	//- end: SGIX_fragment_lighting

	//-//-- 
	//- Ext: SGIX_framezoom
	typedef void (FLUXGL_API *FrameZoomSGIXFn)( GL::Int );
	//- end: SGIX_framezoom

	//-//-- 
	//- Ext: SGIX_igloo_interface
	typedef void (FLUXGL_API *IglooInterfaceSGIXFn)( GL::Enum, void const* );
	//- end: SGIX_igloo_interface

	//-//-- 
	//- Ext: SGIX_instruments
	typedef GL::Int (FLUXGL_API *GetInstrumentsSGIXFn)( );
	typedef void (FLUXGL_API *InstrumentsBufferSGIXFn)( GL::Sizei, GL::Int* );
	typedef GL::Int (FLUXGL_API *PollInstrumentsSGIXFn)( GL::Int* );
	typedef void (FLUXGL_API *ReadInstrumentsSGIXFn)( GL::Int );
	typedef void (FLUXGL_API *StartInstrumentsSGIXFn)( );
	typedef void (FLUXGL_API *StopInstrumentsSGIXFn)( GL::Int );
	//- end: SGIX_instruments

	//-//-- 
	//- Ext: SGIX_list_priority
	typedef void (FLUXGL_API *GetListParameterfvSGIXFn)( GL::UInt, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetListParameterivSGIXFn)( GL::UInt, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *ListParameterfSGIXFn)( GL::UInt, GL::Enum, GL::Float );
	typedef void (FLUXGL_API *ListParameterfvSGIXFn)( GL::UInt, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *ListParameteriSGIXFn)( GL::UInt, GL::Enum, GL::Int );
	typedef void (FLUXGL_API *ListParameterivSGIXFn)( GL::UInt, GL::Enum, GL::Int const* );
	//- end: SGIX_list_priority

	//-//-- 
	//- Ext: SGIX_pixel_texture
	typedef void (FLUXGL_API *PixelTexGenSGIXFn)( GL::Enum );
	//- end: SGIX_pixel_texture

	//-//-- 
	//- Ext: SGIX_polynomial_ffd
	typedef void (FLUXGL_API *DeformSGIXFn)( GL::Bitfield );
	typedef void (FLUXGL_API *DeformationMap3dSGIXFn)( GL::Enum, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double, GL::Double, GL::Int, GL::Int, GL::Double const* );
	typedef void (FLUXGL_API *DeformationMap3fSGIXFn)( GL::Enum, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float, GL::Float, GL::Int, GL::Int, GL::Float const* );
	typedef void (FLUXGL_API *LoadIdentityDeformationMapSGIXFn)( GL::Bitfield );
	//- end: SGIX_polynomial_ffd

	//-//-- 
	//- Ext: SGIX_reference_plane
	typedef void (FLUXGL_API *ReferencePlaneSGIXFn)( GL::Double const* );
	//- end: SGIX_reference_plane

	//-//-- 
	//- Ext: SGIX_sprite
	typedef void (FLUXGL_API *SpriteParameterfSGIXFn)( GL::Enum, GL::Float );
	typedef void (FLUXGL_API *SpriteParameterfvSGIXFn)( GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *SpriteParameteriSGIXFn)( GL::Enum, GL::Int );
	typedef void (FLUXGL_API *SpriteParameterivSGIXFn)( GL::Enum, GL::Int const* );
	//- end: SGIX_sprite

	//-//-- 
	//- Ext: SGIX_tag_sample_buffer
	typedef void (FLUXGL_API *TagSampleBufferSGIXFn)( );
	//- end: SGIX_tag_sample_buffer

	//-//-- 
	//- Ext: SGI_color_table
	typedef void (FLUXGL_API *ColorTableParameterfvSGIFn)( GL::Enum, GL::Enum, GL::Float const* );
	typedef void (FLUXGL_API *ColorTableParameterivSGIFn)( GL::Enum, GL::Enum, GL::Int const* );
	typedef void (FLUXGL_API *ColorTableSGIFn)( GL::Enum, GL::Enum, GL::Sizei, GL::Enum, GL::Enum, void const* );
	typedef void (FLUXGL_API *CopyColorTableSGIFn)( GL::Enum, GL::Enum, GL::Int, GL::Int, GL::Sizei );
	typedef void (FLUXGL_API *GetColorTableParameterfvSGIFn)( GL::Enum, GL::Enum, GL::Float* );
	typedef void (FLUXGL_API *GetColorTableParameterivSGIFn)( GL::Enum, GL::Enum, GL::Int* );
	typedef void (FLUXGL_API *GetColorTableSGIFn)( GL::Enum, GL::Enum, GL::Enum, void* );
	//- end: SGI_color_table

	//-//-- 
	//- Ext: ARB_gl_spirv
	typedef void (FLUXGL_API *SpecializeShaderARBFn)( GL::UInt, GL::Char const*, GL::UInt, GL::UInt const*, GL::UInt const* );
	//- end: ARB_gl_spirv

} // ~ namespace proto

//--    GLapi                           ///{{{2///////////////////////////////
/* See forward.hpp for documentation */
struct GLapi
{
	bool valid;
	int VERSION_loaded_major, VERSION_loaded_minor;

	//-//-- 
	//- Core 1.0
	bool VERSION_1_0;

	proto::AccumFn accum;
	proto::AlphaFuncFn alphaFunc;
	proto::BeginFn begin;
	proto::BitmapFn bitmap;
	proto::BlendFuncFn blendFunc;
	proto::CallListFn callList;
	proto::CallListsFn callLists;
	proto::ClearFn clear;
	proto::ClearAccumFn clearAccum;
	proto::ClearColorFn clearColor;
	proto::ClearDepthFn clearDepth;
	proto::ClearIndexFn clearIndex;
	proto::ClearStencilFn clearStencil;
	proto::ClipPlaneFn clipPlane;
	proto::Color3bFn color3b;
	proto::Color3bvFn color3bv;
	proto::Color3dFn color3d;
	proto::Color3dvFn color3dv;
	proto::Color3fFn color3f;
	proto::Color3fvFn color3fv;
	proto::Color3iFn color3i;
	proto::Color3ivFn color3iv;
	proto::Color3sFn color3s;
	proto::Color3svFn color3sv;
	proto::Color3ubFn color3ub;
	proto::Color3ubvFn color3ubv;
	proto::Color3uiFn color3ui;
	proto::Color3uivFn color3uiv;
	proto::Color3usFn color3us;
	proto::Color3usvFn color3usv;
	proto::Color4bFn color4b;
	proto::Color4bvFn color4bv;
	proto::Color4dFn color4d;
	proto::Color4dvFn color4dv;
	proto::Color4fFn color4f;
	proto::Color4fvFn color4fv;
	proto::Color4iFn color4i;
	proto::Color4ivFn color4iv;
	proto::Color4sFn color4s;
	proto::Color4svFn color4sv;
	proto::Color4ubFn color4ub;
	proto::Color4ubvFn color4ubv;
	proto::Color4uiFn color4ui;
	proto::Color4uivFn color4uiv;
	proto::Color4usFn color4us;
	proto::Color4usvFn color4usv;
	proto::ColorMaskFn colorMask;
	proto::ColorMaterialFn colorMaterial;
	proto::CopyPixelsFn copyPixels;
	proto::CullFaceFn cullFace;
	proto::DeleteListsFn deleteLists;
	proto::DepthFuncFn depthFunc;
	proto::DepthMaskFn depthMask;
	proto::DepthRangeFn depthRange;
	proto::DisableFn disable;
	proto::DrawBufferFn drawBuffer;
	proto::DrawPixelsFn drawPixels;
	proto::EdgeFlagFn edgeFlag;
	proto::EdgeFlagvFn edgeFlagv;
	proto::EnableFn enable;
	proto::EndFn end;
	proto::EndListFn endList;
	proto::EvalCoord1dFn evalCoord1d;
	proto::EvalCoord1dvFn evalCoord1dv;
	proto::EvalCoord1fFn evalCoord1f;
	proto::EvalCoord1fvFn evalCoord1fv;
	proto::EvalCoord2dFn evalCoord2d;
	proto::EvalCoord2dvFn evalCoord2dv;
	proto::EvalCoord2fFn evalCoord2f;
	proto::EvalCoord2fvFn evalCoord2fv;
	proto::EvalMesh1Fn evalMesh1;
	proto::EvalMesh2Fn evalMesh2;
	proto::EvalPoint1Fn evalPoint1;
	proto::EvalPoint2Fn evalPoint2;
	proto::FeedbackBufferFn feedbackBuffer;
	proto::FinishFn finish;
	proto::FlushFn flush;
	proto::FogfFn fogf;
	proto::FogfvFn fogfv;
	proto::FogiFn fogi;
	proto::FogivFn fogiv;
	proto::FrontFaceFn frontFace;
	proto::FrustumFn frustum;
	proto::GenListsFn genLists;
	proto::GetBooleanvFn getBooleanv;
	proto::GetClipPlaneFn getClipPlane;
	proto::GetDoublevFn getDoublev;
	proto::GetErrorFn getError;
	proto::GetFloatvFn getFloatv;
	proto::GetIntegervFn getIntegerv;
	proto::GetLightfvFn getLightfv;
	proto::GetLightivFn getLightiv;
	proto::GetMapdvFn getMapdv;
	proto::GetMapfvFn getMapfv;
	proto::GetMapivFn getMapiv;
	proto::GetMaterialfvFn getMaterialfv;
	proto::GetMaterialivFn getMaterialiv;
	proto::GetPixelMapfvFn getPixelMapfv;
	proto::GetPixelMapuivFn getPixelMapuiv;
	proto::GetPixelMapusvFn getPixelMapusv;
	proto::GetPolygonStippleFn getPolygonStipple;
	proto::GetStringFn getString;
	proto::GetTexEnvfvFn getTexEnvfv;
	proto::GetTexEnvivFn getTexEnviv;
	proto::GetTexGendvFn getTexGendv;
	proto::GetTexGenfvFn getTexGenfv;
	proto::GetTexGenivFn getTexGeniv;
	proto::GetTexImageFn getTexImage;
	proto::GetTexLevelParameterfvFn getTexLevelParameterfv;
	proto::GetTexLevelParameterivFn getTexLevelParameteriv;
	proto::GetTexParameterfvFn getTexParameterfv;
	proto::GetTexParameterivFn getTexParameteriv;
	proto::HintFn hint;
	proto::IndexMaskFn indexMask;
	proto::IndexdFn indexd;
	proto::IndexdvFn indexdv;
	proto::IndexfFn indexf;
	proto::IndexfvFn indexfv;
	proto::IndexiFn indexi;
	proto::IndexivFn indexiv;
	proto::IndexsFn indexs;
	proto::IndexsvFn indexsv;
	proto::InitNamesFn initNames;
	proto::IsEnabledFn isEnabled;
	proto::IsListFn isList;
	proto::LightModelfFn lightModelf;
	proto::LightModelfvFn lightModelfv;
	proto::LightModeliFn lightModeli;
	proto::LightModelivFn lightModeliv;
	proto::LightfFn lightf;
	proto::LightfvFn lightfv;
	proto::LightiFn lighti;
	proto::LightivFn lightiv;
	proto::LineStippleFn lineStipple;
	proto::LineWidthFn lineWidth;
	proto::ListBaseFn listBase;
	proto::LoadIdentityFn loadIdentity;
	proto::LoadMatrixdFn loadMatrixd;
	proto::LoadMatrixfFn loadMatrixf;
	proto::LoadNameFn loadName;
	proto::LogicOpFn logicOp;
	proto::Map1dFn map1d;
	proto::Map1fFn map1f;
	proto::Map2dFn map2d;
	proto::Map2fFn map2f;
	proto::MapGrid1dFn mapGrid1d;
	proto::MapGrid1fFn mapGrid1f;
	proto::MapGrid2dFn mapGrid2d;
	proto::MapGrid2fFn mapGrid2f;
	proto::MaterialfFn materialf;
	proto::MaterialfvFn materialfv;
	proto::MaterialiFn materiali;
	proto::MaterialivFn materialiv;
	proto::MatrixModeFn matrixMode;
	proto::MultMatrixdFn multMatrixd;
	proto::MultMatrixfFn multMatrixf;
	proto::NewListFn newList;
	proto::Normal3bFn normal3b;
	proto::Normal3bvFn normal3bv;
	proto::Normal3dFn normal3d;
	proto::Normal3dvFn normal3dv;
	proto::Normal3fFn normal3f;
	proto::Normal3fvFn normal3fv;
	proto::Normal3iFn normal3i;
	proto::Normal3ivFn normal3iv;
	proto::Normal3sFn normal3s;
	proto::Normal3svFn normal3sv;
	proto::OrthoFn ortho;
	proto::PassThroughFn passThrough;
	proto::PixelMapfvFn pixelMapfv;
	proto::PixelMapuivFn pixelMapuiv;
	proto::PixelMapusvFn pixelMapusv;
	proto::PixelStorefFn pixelStoref;
	proto::PixelStoreiFn pixelStorei;
	proto::PixelTransferfFn pixelTransferf;
	proto::PixelTransferiFn pixelTransferi;
	proto::PixelZoomFn pixelZoom;
	proto::PointSizeFn pointSize;
	proto::PolygonModeFn polygonMode;
	proto::PolygonStippleFn polygonStipple;
	proto::PopAttribFn popAttrib;
	proto::PopMatrixFn popMatrix;
	proto::PopNameFn popName;
	proto::PushAttribFn pushAttrib;
	proto::PushMatrixFn pushMatrix;
	proto::PushNameFn pushName;
	proto::RasterPos2dFn rasterPos2d;
	proto::RasterPos2dvFn rasterPos2dv;
	proto::RasterPos2fFn rasterPos2f;
	proto::RasterPos2fvFn rasterPos2fv;
	proto::RasterPos2iFn rasterPos2i;
	proto::RasterPos2ivFn rasterPos2iv;
	proto::RasterPos2sFn rasterPos2s;
	proto::RasterPos2svFn rasterPos2sv;
	proto::RasterPos3dFn rasterPos3d;
	proto::RasterPos3dvFn rasterPos3dv;
	proto::RasterPos3fFn rasterPos3f;
	proto::RasterPos3fvFn rasterPos3fv;
	proto::RasterPos3iFn rasterPos3i;
	proto::RasterPos3ivFn rasterPos3iv;
	proto::RasterPos3sFn rasterPos3s;
	proto::RasterPos3svFn rasterPos3sv;
	proto::RasterPos4dFn rasterPos4d;
	proto::RasterPos4dvFn rasterPos4dv;
	proto::RasterPos4fFn rasterPos4f;
	proto::RasterPos4fvFn rasterPos4fv;
	proto::RasterPos4iFn rasterPos4i;
	proto::RasterPos4ivFn rasterPos4iv;
	proto::RasterPos4sFn rasterPos4s;
	proto::RasterPos4svFn rasterPos4sv;
	proto::ReadBufferFn readBuffer;
	proto::ReadPixelsFn readPixels;
	proto::RectdFn rectd;
	proto::RectdvFn rectdv;
	proto::RectfFn rectf;
	proto::RectfvFn rectfv;
	proto::RectiFn recti;
	proto::RectivFn rectiv;
	proto::RectsFn rects;
	proto::RectsvFn rectsv;
	proto::RenderModeFn renderMode;
	proto::RotatedFn rotated;
	proto::RotatefFn rotatef;
	proto::ScaledFn scaled;
	proto::ScalefFn scalef;
	proto::ScissorFn scissor;
	proto::SelectBufferFn selectBuffer;
	proto::ShadeModelFn shadeModel;
	proto::StencilFuncFn stencilFunc;
	proto::StencilMaskFn stencilMask;
	proto::StencilOpFn stencilOp;
	proto::TexCoord1dFn texCoord1d;
	proto::TexCoord1dvFn texCoord1dv;
	proto::TexCoord1fFn texCoord1f;
	proto::TexCoord1fvFn texCoord1fv;
	proto::TexCoord1iFn texCoord1i;
	proto::TexCoord1ivFn texCoord1iv;
	proto::TexCoord1sFn texCoord1s;
	proto::TexCoord1svFn texCoord1sv;
	proto::TexCoord2dFn texCoord2d;
	proto::TexCoord2dvFn texCoord2dv;
	proto::TexCoord2fFn texCoord2f;
	proto::TexCoord2fvFn texCoord2fv;
	proto::TexCoord2iFn texCoord2i;
	proto::TexCoord2ivFn texCoord2iv;
	proto::TexCoord2sFn texCoord2s;
	proto::TexCoord2svFn texCoord2sv;
	proto::TexCoord3dFn texCoord3d;
	proto::TexCoord3dvFn texCoord3dv;
	proto::TexCoord3fFn texCoord3f;
	proto::TexCoord3fvFn texCoord3fv;
	proto::TexCoord3iFn texCoord3i;
	proto::TexCoord3ivFn texCoord3iv;
	proto::TexCoord3sFn texCoord3s;
	proto::TexCoord3svFn texCoord3sv;
	proto::TexCoord4dFn texCoord4d;
	proto::TexCoord4dvFn texCoord4dv;
	proto::TexCoord4fFn texCoord4f;
	proto::TexCoord4fvFn texCoord4fv;
	proto::TexCoord4iFn texCoord4i;
	proto::TexCoord4ivFn texCoord4iv;
	proto::TexCoord4sFn texCoord4s;
	proto::TexCoord4svFn texCoord4sv;
	proto::TexEnvfFn texEnvf;
	proto::TexEnvfvFn texEnvfv;
	proto::TexEnviFn texEnvi;
	proto::TexEnvivFn texEnviv;
	proto::TexGendFn texGend;
	proto::TexGendvFn texGendv;
	proto::TexGenfFn texGenf;
	proto::TexGenfvFn texGenfv;
	proto::TexGeniFn texGeni;
	proto::TexGenivFn texGeniv;
	proto::TexImage1DFn texImage1D;
	proto::TexImage2DFn texImage2D;
	proto::TexParameterfFn texParameterf;
	proto::TexParameterfvFn texParameterfv;
	proto::TexParameteriFn texParameteri;
	proto::TexParameterivFn texParameteriv;
	proto::TranslatedFn translated;
	proto::TranslatefFn translatef;
	proto::Vertex2dFn vertex2d;
	proto::Vertex2dvFn vertex2dv;
	proto::Vertex2fFn vertex2f;
	proto::Vertex2fvFn vertex2fv;
	proto::Vertex2iFn vertex2i;
	proto::Vertex2ivFn vertex2iv;
	proto::Vertex2sFn vertex2s;
	proto::Vertex2svFn vertex2sv;
	proto::Vertex3dFn vertex3d;
	proto::Vertex3dvFn vertex3dv;
	proto::Vertex3fFn vertex3f;
	proto::Vertex3fvFn vertex3fv;
	proto::Vertex3iFn vertex3i;
	proto::Vertex3ivFn vertex3iv;
	proto::Vertex3sFn vertex3s;
	proto::Vertex3svFn vertex3sv;
	proto::Vertex4dFn vertex4d;
	proto::Vertex4dvFn vertex4dv;
	proto::Vertex4fFn vertex4f;
	proto::Vertex4fvFn vertex4fv;
	proto::Vertex4iFn vertex4i;
	proto::Vertex4ivFn vertex4iv;
	proto::Vertex4sFn vertex4s;
	proto::Vertex4svFn vertex4sv;
	proto::ViewportFn viewport;
	//- end: Core 1.0

	bool VERSION_1_0_compatibility;

	//-//-- 
	//- Core 1.1
	bool VERSION_1_1;

	proto::AreTexturesResidentFn areTexturesResident;
	proto::ArrayElementFn arrayElement;
	proto::BindTextureFn bindTexture;
	proto::ColorPointerFn colorPointer;
	proto::CopyTexImage1DFn copyTexImage1D;
	proto::CopyTexImage2DFn copyTexImage2D;
	proto::CopyTexSubImage1DFn copyTexSubImage1D;
	proto::CopyTexSubImage2DFn copyTexSubImage2D;
	proto::DeleteTexturesFn deleteTextures;
	proto::DisableClientStateFn disableClientState;
	proto::DrawArraysFn drawArrays;
	proto::DrawElementsFn drawElements;
	proto::EdgeFlagPointerFn edgeFlagPointer;
	proto::EnableClientStateFn enableClientState;
	proto::GenTexturesFn genTextures;
	proto::GetPointervFn getPointerv;
	proto::IndexPointerFn indexPointer;
	proto::IndexubFn indexub;
	proto::IndexubvFn indexubv;
	proto::InterleavedArraysFn interleavedArrays;
	proto::IsTextureFn isTexture;
	proto::NormalPointerFn normalPointer;
	proto::PolygonOffsetFn polygonOffset;
	proto::PopClientAttribFn popClientAttrib;
	proto::PrioritizeTexturesFn prioritizeTextures;
	proto::PushClientAttribFn pushClientAttrib;
	proto::TexCoordPointerFn texCoordPointer;
	proto::TexSubImage1DFn texSubImage1D;
	proto::TexSubImage2DFn texSubImage2D;
	proto::VertexPointerFn vertexPointer;
	//- end: Core 1.1

	bool VERSION_1_1_compatibility;

	//-//-- 
	//- Core 1.2
	bool VERSION_1_2;

	proto::CopyTexSubImage3DFn copyTexSubImage3D;
	proto::DrawRangeElementsFn drawRangeElements;
	proto::TexImage3DFn texImage3D;
	proto::TexSubImage3DFn texSubImage3D;
	//- end: Core 1.2

	bool VERSION_1_2_compatibility;

	//-//-- 
	//- Core 1.3
	bool VERSION_1_3;

	proto::ActiveTextureFn activeTexture;
	proto::ClientActiveTextureFn clientActiveTexture;
	proto::CompressedTexImage1DFn compressedTexImage1D;
	proto::CompressedTexImage2DFn compressedTexImage2D;
	proto::CompressedTexImage3DFn compressedTexImage3D;
	proto::CompressedTexSubImage1DFn compressedTexSubImage1D;
	proto::CompressedTexSubImage2DFn compressedTexSubImage2D;
	proto::CompressedTexSubImage3DFn compressedTexSubImage3D;
	proto::GetCompressedTexImageFn getCompressedTexImage;
	proto::LoadTransposeMatrixdFn loadTransposeMatrixd;
	proto::LoadTransposeMatrixfFn loadTransposeMatrixf;
	proto::MultTransposeMatrixdFn multTransposeMatrixd;
	proto::MultTransposeMatrixfFn multTransposeMatrixf;
	proto::MultiTexCoord1dFn multiTexCoord1d;
	proto::MultiTexCoord1dvFn multiTexCoord1dv;
	proto::MultiTexCoord1fFn multiTexCoord1f;
	proto::MultiTexCoord1fvFn multiTexCoord1fv;
	proto::MultiTexCoord1iFn multiTexCoord1i;
	proto::MultiTexCoord1ivFn multiTexCoord1iv;
	proto::MultiTexCoord1sFn multiTexCoord1s;
	proto::MultiTexCoord1svFn multiTexCoord1sv;
	proto::MultiTexCoord2dFn multiTexCoord2d;
	proto::MultiTexCoord2dvFn multiTexCoord2dv;
	proto::MultiTexCoord2fFn multiTexCoord2f;
	proto::MultiTexCoord2fvFn multiTexCoord2fv;
	proto::MultiTexCoord2iFn multiTexCoord2i;
	proto::MultiTexCoord2ivFn multiTexCoord2iv;
	proto::MultiTexCoord2sFn multiTexCoord2s;
	proto::MultiTexCoord2svFn multiTexCoord2sv;
	proto::MultiTexCoord3dFn multiTexCoord3d;
	proto::MultiTexCoord3dvFn multiTexCoord3dv;
	proto::MultiTexCoord3fFn multiTexCoord3f;
	proto::MultiTexCoord3fvFn multiTexCoord3fv;
	proto::MultiTexCoord3iFn multiTexCoord3i;
	proto::MultiTexCoord3ivFn multiTexCoord3iv;
	proto::MultiTexCoord3sFn multiTexCoord3s;
	proto::MultiTexCoord3svFn multiTexCoord3sv;
	proto::MultiTexCoord4dFn multiTexCoord4d;
	proto::MultiTexCoord4dvFn multiTexCoord4dv;
	proto::MultiTexCoord4fFn multiTexCoord4f;
	proto::MultiTexCoord4fvFn multiTexCoord4fv;
	proto::MultiTexCoord4iFn multiTexCoord4i;
	proto::MultiTexCoord4ivFn multiTexCoord4iv;
	proto::MultiTexCoord4sFn multiTexCoord4s;
	proto::MultiTexCoord4svFn multiTexCoord4sv;
	proto::SampleCoverageFn sampleCoverage;
	//- end: Core 1.3

	bool VERSION_1_3_compatibility;

	//-//-- 
	//- Core 1.4
	bool VERSION_1_4;

	proto::BlendColorFn blendColor;
	proto::BlendEquationFn blendEquation;
	proto::BlendFuncSeparateFn blendFuncSeparate;
	proto::FogCoordPointerFn fogCoordPointer;
	proto::FogCoorddFn fogCoordd;
	proto::FogCoorddvFn fogCoorddv;
	proto::FogCoordfFn fogCoordf;
	proto::FogCoordfvFn fogCoordfv;
	proto::MultiDrawArraysFn multiDrawArrays;
	proto::MultiDrawElementsFn multiDrawElements;
	proto::PointParameterfFn pointParameterf;
	proto::PointParameterfvFn pointParameterfv;
	proto::PointParameteriFn pointParameteri;
	proto::PointParameterivFn pointParameteriv;
	proto::SecondaryColor3bFn secondaryColor3b;
	proto::SecondaryColor3bvFn secondaryColor3bv;
	proto::SecondaryColor3dFn secondaryColor3d;
	proto::SecondaryColor3dvFn secondaryColor3dv;
	proto::SecondaryColor3fFn secondaryColor3f;
	proto::SecondaryColor3fvFn secondaryColor3fv;
	proto::SecondaryColor3iFn secondaryColor3i;
	proto::SecondaryColor3ivFn secondaryColor3iv;
	proto::SecondaryColor3sFn secondaryColor3s;
	proto::SecondaryColor3svFn secondaryColor3sv;
	proto::SecondaryColor3ubFn secondaryColor3ub;
	proto::SecondaryColor3ubvFn secondaryColor3ubv;
	proto::SecondaryColor3uiFn secondaryColor3ui;
	proto::SecondaryColor3uivFn secondaryColor3uiv;
	proto::SecondaryColor3usFn secondaryColor3us;
	proto::SecondaryColor3usvFn secondaryColor3usv;
	proto::SecondaryColorPointerFn secondaryColorPointer;
	proto::WindowPos2dFn windowPos2d;
	proto::WindowPos2dvFn windowPos2dv;
	proto::WindowPos2fFn windowPos2f;
	proto::WindowPos2fvFn windowPos2fv;
	proto::WindowPos2iFn windowPos2i;
	proto::WindowPos2ivFn windowPos2iv;
	proto::WindowPos2sFn windowPos2s;
	proto::WindowPos2svFn windowPos2sv;
	proto::WindowPos3dFn windowPos3d;
	proto::WindowPos3dvFn windowPos3dv;
	proto::WindowPos3fFn windowPos3f;
	proto::WindowPos3fvFn windowPos3fv;
	proto::WindowPos3iFn windowPos3i;
	proto::WindowPos3ivFn windowPos3iv;
	proto::WindowPos3sFn windowPos3s;
	proto::WindowPos3svFn windowPos3sv;
	//- end: Core 1.4

	bool VERSION_1_4_compatibility;

	//-//-- 
	//- Core 1.5
	bool VERSION_1_5;

	proto::BeginQueryFn beginQuery;
	proto::BindBufferFn bindBuffer;
	proto::BufferDataFn bufferData;
	proto::BufferSubDataFn bufferSubData;
	proto::DeleteBuffersFn deleteBuffers;
	proto::DeleteQueriesFn deleteQueries;
	proto::EndQueryFn endQuery;
	proto::GenBuffersFn genBuffers;
	proto::GenQueriesFn genQueries;
	proto::GetBufferParameterivFn getBufferParameteriv;
	proto::GetBufferPointervFn getBufferPointerv;
	proto::GetBufferSubDataFn getBufferSubData;
	proto::GetQueryObjectivFn getQueryObjectiv;
	proto::GetQueryObjectuivFn getQueryObjectuiv;
	proto::GetQueryivFn getQueryiv;
	proto::IsBufferFn isBuffer;
	proto::IsQueryFn isQuery;
	proto::MapBufferFn mapBuffer;
	proto::UnmapBufferFn unmapBuffer;
	//- end: Core 1.5

	bool VERSION_1_5_compatibility;

	//-//-- 
	//- Core 2.0
	bool VERSION_2_0;

	proto::AttachShaderFn attachShader;
	proto::BindAttribLocationFn bindAttribLocation;
	proto::BlendEquationSeparateFn blendEquationSeparate;
	proto::CompileShaderFn compileShader;
	proto::CreateProgramFn createProgram;
	proto::CreateShaderFn createShader;
	proto::DeleteProgramFn deleteProgram;
	proto::DeleteShaderFn deleteShader;
	proto::DetachShaderFn detachShader;
	proto::DisableVertexAttribArrayFn disableVertexAttribArray;
	proto::DrawBuffersFn drawBuffers;
	proto::EnableVertexAttribArrayFn enableVertexAttribArray;
	proto::GetActiveAttribFn getActiveAttrib;
	proto::GetActiveUniformFn getActiveUniform;
	proto::GetAttachedShadersFn getAttachedShaders;
	proto::GetAttribLocationFn getAttribLocation;
	proto::GetProgramInfoLogFn getProgramInfoLog;
	proto::GetProgramivFn getProgramiv;
	proto::GetShaderInfoLogFn getShaderInfoLog;
	proto::GetShaderSourceFn getShaderSource;
	proto::GetShaderivFn getShaderiv;
	proto::GetUniformLocationFn getUniformLocation;
	proto::GetUniformfvFn getUniformfv;
	proto::GetUniformivFn getUniformiv;
	proto::GetVertexAttribPointervFn getVertexAttribPointerv;
	proto::GetVertexAttribdvFn getVertexAttribdv;
	proto::GetVertexAttribfvFn getVertexAttribfv;
	proto::GetVertexAttribivFn getVertexAttribiv;
	proto::IsProgramFn isProgram;
	proto::IsShaderFn isShader;
	proto::LinkProgramFn linkProgram;
	proto::ShaderSourceFn shaderSource;
	proto::StencilFuncSeparateFn stencilFuncSeparate;
	proto::StencilMaskSeparateFn stencilMaskSeparate;
	proto::StencilOpSeparateFn stencilOpSeparate;
	proto::Uniform1fFn uniform1f;
	proto::Uniform1fvFn uniform1fv;
	proto::Uniform1iFn uniform1i;
	proto::Uniform1ivFn uniform1iv;
	proto::Uniform2fFn uniform2f;
	proto::Uniform2fvFn uniform2fv;
	proto::Uniform2iFn uniform2i;
	proto::Uniform2ivFn uniform2iv;
	proto::Uniform3fFn uniform3f;
	proto::Uniform3fvFn uniform3fv;
	proto::Uniform3iFn uniform3i;
	proto::Uniform3ivFn uniform3iv;
	proto::Uniform4fFn uniform4f;
	proto::Uniform4fvFn uniform4fv;
	proto::Uniform4iFn uniform4i;
	proto::Uniform4ivFn uniform4iv;
	proto::UniformMatrix2fvFn uniformMatrix2fv;
	proto::UniformMatrix3fvFn uniformMatrix3fv;
	proto::UniformMatrix4fvFn uniformMatrix4fv;
	proto::UseProgramFn useProgram;
	proto::ValidateProgramFn validateProgram;
	proto::VertexAttrib1dFn vertexAttrib1d;
	proto::VertexAttrib1dvFn vertexAttrib1dv;
	proto::VertexAttrib1fFn vertexAttrib1f;
	proto::VertexAttrib1fvFn vertexAttrib1fv;
	proto::VertexAttrib1sFn vertexAttrib1s;
	proto::VertexAttrib1svFn vertexAttrib1sv;
	proto::VertexAttrib2dFn vertexAttrib2d;
	proto::VertexAttrib2dvFn vertexAttrib2dv;
	proto::VertexAttrib2fFn vertexAttrib2f;
	proto::VertexAttrib2fvFn vertexAttrib2fv;
	proto::VertexAttrib2sFn vertexAttrib2s;
	proto::VertexAttrib2svFn vertexAttrib2sv;
	proto::VertexAttrib3dFn vertexAttrib3d;
	proto::VertexAttrib3dvFn vertexAttrib3dv;
	proto::VertexAttrib3fFn vertexAttrib3f;
	proto::VertexAttrib3fvFn vertexAttrib3fv;
	proto::VertexAttrib3sFn vertexAttrib3s;
	proto::VertexAttrib3svFn vertexAttrib3sv;
	proto::VertexAttrib4NbvFn vertexAttrib4Nbv;
	proto::VertexAttrib4NivFn vertexAttrib4Niv;
	proto::VertexAttrib4NsvFn vertexAttrib4Nsv;
	proto::VertexAttrib4NubFn vertexAttrib4Nub;
	proto::VertexAttrib4NubvFn vertexAttrib4Nubv;
	proto::VertexAttrib4NuivFn vertexAttrib4Nuiv;
	proto::VertexAttrib4NusvFn vertexAttrib4Nusv;
	proto::VertexAttrib4bvFn vertexAttrib4bv;
	proto::VertexAttrib4dFn vertexAttrib4d;
	proto::VertexAttrib4dvFn vertexAttrib4dv;
	proto::VertexAttrib4fFn vertexAttrib4f;
	proto::VertexAttrib4fvFn vertexAttrib4fv;
	proto::VertexAttrib4ivFn vertexAttrib4iv;
	proto::VertexAttrib4sFn vertexAttrib4s;
	proto::VertexAttrib4svFn vertexAttrib4sv;
	proto::VertexAttrib4ubvFn vertexAttrib4ubv;
	proto::VertexAttrib4uivFn vertexAttrib4uiv;
	proto::VertexAttrib4usvFn vertexAttrib4usv;
	proto::VertexAttribPointerFn vertexAttribPointer;
	//- end: Core 2.0

	bool VERSION_2_0_compatibility;

	//-//-- 
	//- Core 2.1
	bool VERSION_2_1;

	proto::UniformMatrix2x3fvFn uniformMatrix2x3fv;
	proto::UniformMatrix2x4fvFn uniformMatrix2x4fv;
	proto::UniformMatrix3x2fvFn uniformMatrix3x2fv;
	proto::UniformMatrix3x4fvFn uniformMatrix3x4fv;
	proto::UniformMatrix4x2fvFn uniformMatrix4x2fv;
	proto::UniformMatrix4x3fvFn uniformMatrix4x3fv;
	//- end: Core 2.1

	bool VERSION_2_1_compatibility;

	//-//-- 
	//- Core 3.0
	bool VERSION_3_0;

	proto::BeginConditionalRenderFn beginConditionalRender;
	proto::BeginTransformFeedbackFn beginTransformFeedback;
	proto::BindBufferBaseFn bindBufferBase;
	proto::BindBufferRangeFn bindBufferRange;
	proto::BindFragDataLocationFn bindFragDataLocation;
	proto::BindFramebufferFn bindFramebuffer;
	proto::BindRenderbufferFn bindRenderbuffer;
	proto::BindVertexArrayFn bindVertexArray;
	proto::BlitFramebufferFn blitFramebuffer;
	proto::CheckFramebufferStatusFn checkFramebufferStatus;
	proto::ClampColorFn clampColor;
	proto::ClearBufferfiFn clearBufferfi;
	proto::ClearBufferfvFn clearBufferfv;
	proto::ClearBufferivFn clearBufferiv;
	proto::ClearBufferuivFn clearBufferuiv;
	proto::ColorMaskiFn colorMaski;
	proto::DeleteFramebuffersFn deleteFramebuffers;
	proto::DeleteRenderbuffersFn deleteRenderbuffers;
	proto::DeleteVertexArraysFn deleteVertexArrays;
	proto::DisableiFn disablei;
	proto::EnableiFn enablei;
	proto::EndConditionalRenderFn endConditionalRender;
	proto::EndTransformFeedbackFn endTransformFeedback;
	proto::FlushMappedBufferRangeFn flushMappedBufferRange;
	proto::FramebufferRenderbufferFn framebufferRenderbuffer;
	proto::FramebufferTexture1DFn framebufferTexture1D;
	proto::FramebufferTexture2DFn framebufferTexture2D;
	proto::FramebufferTexture3DFn framebufferTexture3D;
	proto::FramebufferTextureLayerFn framebufferTextureLayer;
	proto::GenFramebuffersFn genFramebuffers;
	proto::GenRenderbuffersFn genRenderbuffers;
	proto::GenVertexArraysFn genVertexArrays;
	proto::GenerateMipmapFn generateMipmap;
	proto::GetBooleani_vFn getBooleani_v;
	proto::GetFragDataLocationFn getFragDataLocation;
	proto::GetFramebufferAttachmentParameterivFn getFramebufferAttachmentParameteriv;
	proto::GetIntegeri_vFn getIntegeri_v;
	proto::GetRenderbufferParameterivFn getRenderbufferParameteriv;
	proto::GetStringiFn getStringi;
	proto::GetTexParameterIivFn getTexParameterIiv;
	proto::GetTexParameterIuivFn getTexParameterIuiv;
	proto::GetTransformFeedbackVaryingFn getTransformFeedbackVarying;
	proto::GetUniformuivFn getUniformuiv;
	proto::GetVertexAttribIivFn getVertexAttribIiv;
	proto::GetVertexAttribIuivFn getVertexAttribIuiv;
	proto::IsEnablediFn isEnabledi;
	proto::IsFramebufferFn isFramebuffer;
	proto::IsRenderbufferFn isRenderbuffer;
	proto::IsVertexArrayFn isVertexArray;
	proto::MapBufferRangeFn mapBufferRange;
	proto::RenderbufferStorageFn renderbufferStorage;
	proto::RenderbufferStorageMultisampleFn renderbufferStorageMultisample;
	proto::TexParameterIivFn texParameterIiv;
	proto::TexParameterIuivFn texParameterIuiv;
	proto::TransformFeedbackVaryingsFn transformFeedbackVaryings;
	proto::Uniform1uiFn uniform1ui;
	proto::Uniform1uivFn uniform1uiv;
	proto::Uniform2uiFn uniform2ui;
	proto::Uniform2uivFn uniform2uiv;
	proto::Uniform3uiFn uniform3ui;
	proto::Uniform3uivFn uniform3uiv;
	proto::Uniform4uiFn uniform4ui;
	proto::Uniform4uivFn uniform4uiv;
	proto::VertexAttribI1iFn vertexAttribI1i;
	proto::VertexAttribI1ivFn vertexAttribI1iv;
	proto::VertexAttribI1uiFn vertexAttribI1ui;
	proto::VertexAttribI1uivFn vertexAttribI1uiv;
	proto::VertexAttribI2iFn vertexAttribI2i;
	proto::VertexAttribI2ivFn vertexAttribI2iv;
	proto::VertexAttribI2uiFn vertexAttribI2ui;
	proto::VertexAttribI2uivFn vertexAttribI2uiv;
	proto::VertexAttribI3iFn vertexAttribI3i;
	proto::VertexAttribI3ivFn vertexAttribI3iv;
	proto::VertexAttribI3uiFn vertexAttribI3ui;
	proto::VertexAttribI3uivFn vertexAttribI3uiv;
	proto::VertexAttribI4bvFn vertexAttribI4bv;
	proto::VertexAttribI4iFn vertexAttribI4i;
	proto::VertexAttribI4ivFn vertexAttribI4iv;
	proto::VertexAttribI4svFn vertexAttribI4sv;
	proto::VertexAttribI4ubvFn vertexAttribI4ubv;
	proto::VertexAttribI4uiFn vertexAttribI4ui;
	proto::VertexAttribI4uivFn vertexAttribI4uiv;
	proto::VertexAttribI4usvFn vertexAttribI4usv;
	proto::VertexAttribIPointerFn vertexAttribIPointer;
	//- end: Core 3.0

	bool VERSION_3_0_compatibility;

	//-//-- 
	//- Core 3.1
	bool VERSION_3_1;

	// bindBufferBase already defined in 3.0_core
	// bindBufferRange already defined in 3.0_core
	proto::CopyBufferSubDataFn copyBufferSubData;
	proto::DrawArraysInstancedFn drawArraysInstanced;
	proto::DrawElementsInstancedFn drawElementsInstanced;
	proto::GetActiveUniformBlockNameFn getActiveUniformBlockName;
	proto::GetActiveUniformBlockivFn getActiveUniformBlockiv;
	proto::GetActiveUniformNameFn getActiveUniformName;
	proto::GetActiveUniformsivFn getActiveUniformsiv;
	// getIntegeri_v already defined in 3.0_core
	proto::GetUniformBlockIndexFn getUniformBlockIndex;
	proto::GetUniformIndicesFn getUniformIndices;
	proto::PrimitiveRestartIndexFn primitiveRestartIndex;
	proto::TexBufferFn texBuffer;
	proto::UniformBlockBindingFn uniformBlockBinding;
	//- end: Core 3.1

	bool VERSION_3_1_compatibility;

	//-//-- 
	//- Core 3.2
	bool VERSION_3_2;

	proto::ClientWaitSyncFn clientWaitSync;
	proto::DeleteSyncFn deleteSync;
	proto::DrawElementsBaseVertexFn drawElementsBaseVertex;
	proto::DrawElementsInstancedBaseVertexFn drawElementsInstancedBaseVertex;
	proto::DrawRangeElementsBaseVertexFn drawRangeElementsBaseVertex;
	proto::FenceSyncFn fenceSync;
	proto::FramebufferTextureFn framebufferTexture;
	proto::GetBufferParameteri64vFn getBufferParameteri64v;
	proto::GetInteger64i_vFn getInteger64i_v;
	proto::GetInteger64vFn getInteger64v;
	proto::GetMultisamplefvFn getMultisamplefv;
	proto::GetSyncivFn getSynciv;
	proto::IsSyncFn isSync;
	proto::MultiDrawElementsBaseVertexFn multiDrawElementsBaseVertex;
	proto::ProvokingVertexFn provokingVertex;
	proto::SampleMaskiFn sampleMaski;
	proto::TexImage2DMultisampleFn texImage2DMultisample;
	proto::TexImage3DMultisampleFn texImage3DMultisample;
	proto::WaitSyncFn waitSync;
	//- end: Core 3.2

	//-//-- 
	//- Compatibility 3.2
	bool VERSION_3_2_compatibility;

	// accum already defined in 1.0_core
	// alphaFunc already defined in 1.0_core
	// areTexturesResident already defined in 1.1_core
	// arrayElement already defined in 1.1_core
	// begin already defined in 1.0_core
	// bitmap already defined in 1.0_core
	// callList already defined in 1.0_core
	// callLists already defined in 1.0_core
	// clearAccum already defined in 1.0_core
	// clearIndex already defined in 1.0_core
	// clientActiveTexture already defined in 1.3_core
	// clipPlane already defined in 1.0_core
	// color3b already defined in 1.0_core
	// color3bv already defined in 1.0_core
	// color3d already defined in 1.0_core
	// color3dv already defined in 1.0_core
	// color3f already defined in 1.0_core
	// color3fv already defined in 1.0_core
	// color3i already defined in 1.0_core
	// color3iv already defined in 1.0_core
	// color3s already defined in 1.0_core
	// color3sv already defined in 1.0_core
	// color3ub already defined in 1.0_core
	// color3ubv already defined in 1.0_core
	// color3ui already defined in 1.0_core
	// color3uiv already defined in 1.0_core
	// color3us already defined in 1.0_core
	// color3usv already defined in 1.0_core
	// color4b already defined in 1.0_core
	// color4bv already defined in 1.0_core
	// color4d already defined in 1.0_core
	// color4dv already defined in 1.0_core
	// color4f already defined in 1.0_core
	// color4fv already defined in 1.0_core
	// color4i already defined in 1.0_core
	// color4iv already defined in 1.0_core
	// color4s already defined in 1.0_core
	// color4sv already defined in 1.0_core
	// color4ub already defined in 1.0_core
	// color4ubv already defined in 1.0_core
	// color4ui already defined in 1.0_core
	// color4uiv already defined in 1.0_core
	// color4us already defined in 1.0_core
	// color4usv already defined in 1.0_core
	// colorMaterial already defined in 1.0_core
	// colorPointer already defined in 1.1_core
	// copyPixels already defined in 1.0_core
	// deleteLists already defined in 1.0_core
	// disableClientState already defined in 1.1_core
	// drawPixels already defined in 1.0_core
	// edgeFlag already defined in 1.0_core
	// edgeFlagPointer already defined in 1.1_core
	// edgeFlagv already defined in 1.0_core
	// enableClientState already defined in 1.1_core
	// end already defined in 1.0_core
	// endList already defined in 1.0_core
	// evalCoord1d already defined in 1.0_core
	// evalCoord1dv already defined in 1.0_core
	// evalCoord1f already defined in 1.0_core
	// evalCoord1fv already defined in 1.0_core
	// evalCoord2d already defined in 1.0_core
	// evalCoord2dv already defined in 1.0_core
	// evalCoord2f already defined in 1.0_core
	// evalCoord2fv already defined in 1.0_core
	// evalMesh1 already defined in 1.0_core
	// evalMesh2 already defined in 1.0_core
	// evalPoint1 already defined in 1.0_core
	// evalPoint2 already defined in 1.0_core
	// feedbackBuffer already defined in 1.0_core
	// fogCoordPointer already defined in 1.4_core
	// fogCoordd already defined in 1.4_core
	// fogCoorddv already defined in 1.4_core
	// fogCoordf already defined in 1.4_core
	// fogCoordfv already defined in 1.4_core
	// fogf already defined in 1.0_core
	// fogfv already defined in 1.0_core
	// fogi already defined in 1.0_core
	// fogiv already defined in 1.0_core
	// frustum already defined in 1.0_core
	// genLists already defined in 1.0_core
	// getClipPlane already defined in 1.0_core
	// getLightfv already defined in 1.0_core
	// getLightiv already defined in 1.0_core
	// getMapdv already defined in 1.0_core
	// getMapfv already defined in 1.0_core
	// getMapiv already defined in 1.0_core
	// getMaterialfv already defined in 1.0_core
	// getMaterialiv already defined in 1.0_core
	// getPixelMapfv already defined in 1.0_core
	// getPixelMapuiv already defined in 1.0_core
	// getPixelMapusv already defined in 1.0_core
	// getPointerv already defined in 1.1_core
	// getPolygonStipple already defined in 1.0_core
	// getTexEnvfv already defined in 1.0_core
	// getTexEnviv already defined in 1.0_core
	// getTexGendv already defined in 1.0_core
	// getTexGenfv already defined in 1.0_core
	// getTexGeniv already defined in 1.0_core
	// indexMask already defined in 1.0_core
	// indexPointer already defined in 1.1_core
	// indexd already defined in 1.0_core
	// indexdv already defined in 1.0_core
	// indexf already defined in 1.0_core
	// indexfv already defined in 1.0_core
	// indexi already defined in 1.0_core
	// indexiv already defined in 1.0_core
	// indexs already defined in 1.0_core
	// indexsv already defined in 1.0_core
	// indexub already defined in 1.1_core
	// indexubv already defined in 1.1_core
	// initNames already defined in 1.0_core
	// interleavedArrays already defined in 1.1_core
	// isList already defined in 1.0_core
	// lightModelf already defined in 1.0_core
	// lightModelfv already defined in 1.0_core
	// lightModeli already defined in 1.0_core
	// lightModeliv already defined in 1.0_core
	// lightf already defined in 1.0_core
	// lightfv already defined in 1.0_core
	// lighti already defined in 1.0_core
	// lightiv already defined in 1.0_core
	// lineStipple already defined in 1.0_core
	// listBase already defined in 1.0_core
	// loadIdentity already defined in 1.0_core
	// loadMatrixd already defined in 1.0_core
	// loadMatrixf already defined in 1.0_core
	// loadName already defined in 1.0_core
	// loadTransposeMatrixd already defined in 1.3_core
	// loadTransposeMatrixf already defined in 1.3_core
	// map1d already defined in 1.0_core
	// map1f already defined in 1.0_core
	// map2d already defined in 1.0_core
	// map2f already defined in 1.0_core
	// mapGrid1d already defined in 1.0_core
	// mapGrid1f already defined in 1.0_core
	// mapGrid2d already defined in 1.0_core
	// mapGrid2f already defined in 1.0_core
	// materialf already defined in 1.0_core
	// materialfv already defined in 1.0_core
	// materiali already defined in 1.0_core
	// materialiv already defined in 1.0_core
	// matrixMode already defined in 1.0_core
	// multMatrixd already defined in 1.0_core
	// multMatrixf already defined in 1.0_core
	// multTransposeMatrixd already defined in 1.3_core
	// multTransposeMatrixf already defined in 1.3_core
	// multiTexCoord1d already defined in 1.3_core
	// multiTexCoord1dv already defined in 1.3_core
	// multiTexCoord1f already defined in 1.3_core
	// multiTexCoord1fv already defined in 1.3_core
	// multiTexCoord1i already defined in 1.3_core
	// multiTexCoord1iv already defined in 1.3_core
	// multiTexCoord1s already defined in 1.3_core
	// multiTexCoord1sv already defined in 1.3_core
	// multiTexCoord2d already defined in 1.3_core
	// multiTexCoord2dv already defined in 1.3_core
	// multiTexCoord2f already defined in 1.3_core
	// multiTexCoord2fv already defined in 1.3_core
	// multiTexCoord2i already defined in 1.3_core
	// multiTexCoord2iv already defined in 1.3_core
	// multiTexCoord2s already defined in 1.3_core
	// multiTexCoord2sv already defined in 1.3_core
	// multiTexCoord3d already defined in 1.3_core
	// multiTexCoord3dv already defined in 1.3_core
	// multiTexCoord3f already defined in 1.3_core
	// multiTexCoord3fv already defined in 1.3_core
	// multiTexCoord3i already defined in 1.3_core
	// multiTexCoord3iv already defined in 1.3_core
	// multiTexCoord3s already defined in 1.3_core
	// multiTexCoord3sv already defined in 1.3_core
	// multiTexCoord4d already defined in 1.3_core
	// multiTexCoord4dv already defined in 1.3_core
	// multiTexCoord4f already defined in 1.3_core
	// multiTexCoord4fv already defined in 1.3_core
	// multiTexCoord4i already defined in 1.3_core
	// multiTexCoord4iv already defined in 1.3_core
	// multiTexCoord4s already defined in 1.3_core
	// multiTexCoord4sv already defined in 1.3_core
	// newList already defined in 1.0_core
	// normal3b already defined in 1.0_core
	// normal3bv already defined in 1.0_core
	// normal3d already defined in 1.0_core
	// normal3dv already defined in 1.0_core
	// normal3f already defined in 1.0_core
	// normal3fv already defined in 1.0_core
	// normal3i already defined in 1.0_core
	// normal3iv already defined in 1.0_core
	// normal3s already defined in 1.0_core
	// normal3sv already defined in 1.0_core
	// normalPointer already defined in 1.1_core
	// ortho already defined in 1.0_core
	// passThrough already defined in 1.0_core
	// pixelMapfv already defined in 1.0_core
	// pixelMapuiv already defined in 1.0_core
	// pixelMapusv already defined in 1.0_core
	// pixelTransferf already defined in 1.0_core
	// pixelTransferi already defined in 1.0_core
	// pixelZoom already defined in 1.0_core
	// polygonStipple already defined in 1.0_core
	// popAttrib already defined in 1.0_core
	// popClientAttrib already defined in 1.1_core
	// popMatrix already defined in 1.0_core
	// popName already defined in 1.0_core
	// prioritizeTextures already defined in 1.1_core
	// pushAttrib already defined in 1.0_core
	// pushClientAttrib already defined in 1.1_core
	// pushMatrix already defined in 1.0_core
	// pushName already defined in 1.0_core
	// rasterPos2d already defined in 1.0_core
	// rasterPos2dv already defined in 1.0_core
	// rasterPos2f already defined in 1.0_core
	// rasterPos2fv already defined in 1.0_core
	// rasterPos2i already defined in 1.0_core
	// rasterPos2iv already defined in 1.0_core
	// rasterPos2s already defined in 1.0_core
	// rasterPos2sv already defined in 1.0_core
	// rasterPos3d already defined in 1.0_core
	// rasterPos3dv already defined in 1.0_core
	// rasterPos3f already defined in 1.0_core
	// rasterPos3fv already defined in 1.0_core
	// rasterPos3i already defined in 1.0_core
	// rasterPos3iv already defined in 1.0_core
	// rasterPos3s already defined in 1.0_core
	// rasterPos3sv already defined in 1.0_core
	// rasterPos4d already defined in 1.0_core
	// rasterPos4dv already defined in 1.0_core
	// rasterPos4f already defined in 1.0_core
	// rasterPos4fv already defined in 1.0_core
	// rasterPos4i already defined in 1.0_core
	// rasterPos4iv already defined in 1.0_core
	// rasterPos4s already defined in 1.0_core
	// rasterPos4sv already defined in 1.0_core
	// rectd already defined in 1.0_core
	// rectdv already defined in 1.0_core
	// rectf already defined in 1.0_core
	// rectfv already defined in 1.0_core
	// recti already defined in 1.0_core
	// rectiv already defined in 1.0_core
	// rects already defined in 1.0_core
	// rectsv already defined in 1.0_core
	// renderMode already defined in 1.0_core
	// rotated already defined in 1.0_core
	// rotatef already defined in 1.0_core
	// scaled already defined in 1.0_core
	// scalef already defined in 1.0_core
	// secondaryColor3b already defined in 1.4_core
	// secondaryColor3bv already defined in 1.4_core
	// secondaryColor3d already defined in 1.4_core
	// secondaryColor3dv already defined in 1.4_core
	// secondaryColor3f already defined in 1.4_core
	// secondaryColor3fv already defined in 1.4_core
	// secondaryColor3i already defined in 1.4_core
	// secondaryColor3iv already defined in 1.4_core
	// secondaryColor3s already defined in 1.4_core
	// secondaryColor3sv already defined in 1.4_core
	// secondaryColor3ub already defined in 1.4_core
	// secondaryColor3ubv already defined in 1.4_core
	// secondaryColor3ui already defined in 1.4_core
	// secondaryColor3uiv already defined in 1.4_core
	// secondaryColor3us already defined in 1.4_core
	// secondaryColor3usv already defined in 1.4_core
	// secondaryColorPointer already defined in 1.4_core
	// selectBuffer already defined in 1.0_core
	// shadeModel already defined in 1.0_core
	// texCoord1d already defined in 1.0_core
	// texCoord1dv already defined in 1.0_core
	// texCoord1f already defined in 1.0_core
	// texCoord1fv already defined in 1.0_core
	// texCoord1i already defined in 1.0_core
	// texCoord1iv already defined in 1.0_core
	// texCoord1s already defined in 1.0_core
	// texCoord1sv already defined in 1.0_core
	// texCoord2d already defined in 1.0_core
	// texCoord2dv already defined in 1.0_core
	// texCoord2f already defined in 1.0_core
	// texCoord2fv already defined in 1.0_core
	// texCoord2i already defined in 1.0_core
	// texCoord2iv already defined in 1.0_core
	// texCoord2s already defined in 1.0_core
	// texCoord2sv already defined in 1.0_core
	// texCoord3d already defined in 1.0_core
	// texCoord3dv already defined in 1.0_core
	// texCoord3f already defined in 1.0_core
	// texCoord3fv already defined in 1.0_core
	// texCoord3i already defined in 1.0_core
	// texCoord3iv already defined in 1.0_core
	// texCoord3s already defined in 1.0_core
	// texCoord3sv already defined in 1.0_core
	// texCoord4d already defined in 1.0_core
	// texCoord4dv already defined in 1.0_core
	// texCoord4f already defined in 1.0_core
	// texCoord4fv already defined in 1.0_core
	// texCoord4i already defined in 1.0_core
	// texCoord4iv already defined in 1.0_core
	// texCoord4s already defined in 1.0_core
	// texCoord4sv already defined in 1.0_core
	// texCoordPointer already defined in 1.1_core
	// texEnvf already defined in 1.0_core
	// texEnvfv already defined in 1.0_core
	// texEnvi already defined in 1.0_core
	// texEnviv already defined in 1.0_core
	// texGend already defined in 1.0_core
	// texGendv already defined in 1.0_core
	// texGenf already defined in 1.0_core
	// texGenfv already defined in 1.0_core
	// texGeni already defined in 1.0_core
	// texGeniv already defined in 1.0_core
	// translated already defined in 1.0_core
	// translatef already defined in 1.0_core
	// vertex2d already defined in 1.0_core
	// vertex2dv already defined in 1.0_core
	// vertex2f already defined in 1.0_core
	// vertex2fv already defined in 1.0_core
	// vertex2i already defined in 1.0_core
	// vertex2iv already defined in 1.0_core
	// vertex2s already defined in 1.0_core
	// vertex2sv already defined in 1.0_core
	// vertex3d already defined in 1.0_core
	// vertex3dv already defined in 1.0_core
	// vertex3f already defined in 1.0_core
	// vertex3fv already defined in 1.0_core
	// vertex3i already defined in 1.0_core
	// vertex3iv already defined in 1.0_core
	// vertex3s already defined in 1.0_core
	// vertex3sv already defined in 1.0_core
	// vertex4d already defined in 1.0_core
	// vertex4dv already defined in 1.0_core
	// vertex4f already defined in 1.0_core
	// vertex4fv already defined in 1.0_core
	// vertex4i already defined in 1.0_core
	// vertex4iv already defined in 1.0_core
	// vertex4s already defined in 1.0_core
	// vertex4sv already defined in 1.0_core
	// vertexPointer already defined in 1.1_core
	// windowPos2d already defined in 1.4_core
	// windowPos2dv already defined in 1.4_core
	// windowPos2f already defined in 1.4_core
	// windowPos2fv already defined in 1.4_core
	// windowPos2i already defined in 1.4_core
	// windowPos2iv already defined in 1.4_core
	// windowPos2s already defined in 1.4_core
	// windowPos2sv already defined in 1.4_core
	// windowPos3d already defined in 1.4_core
	// windowPos3dv already defined in 1.4_core
	// windowPos3f already defined in 1.4_core
	// windowPos3fv already defined in 1.4_core
	// windowPos3i already defined in 1.4_core
	// windowPos3iv already defined in 1.4_core
	// windowPos3s already defined in 1.4_core
	// windowPos3sv already defined in 1.4_core
	//- end: Compat 3.2

	//-//-- 
	//- Core 3.3
	bool VERSION_3_3;

	proto::BindFragDataLocationIndexedFn bindFragDataLocationIndexed;
	proto::BindSamplerFn bindSampler;
	proto::DeleteSamplersFn deleteSamplers;
	proto::GenSamplersFn genSamplers;
	proto::GetFragDataIndexFn getFragDataIndex;
	proto::GetQueryObjecti64vFn getQueryObjecti64v;
	proto::GetQueryObjectui64vFn getQueryObjectui64v;
	proto::GetSamplerParameterIivFn getSamplerParameterIiv;
	proto::GetSamplerParameterIuivFn getSamplerParameterIuiv;
	proto::GetSamplerParameterfvFn getSamplerParameterfv;
	proto::GetSamplerParameterivFn getSamplerParameteriv;
	proto::IsSamplerFn isSampler;
	proto::QueryCounterFn queryCounter;
	proto::SamplerParameterIivFn samplerParameterIiv;
	proto::SamplerParameterIuivFn samplerParameterIuiv;
	proto::SamplerParameterfFn samplerParameterf;
	proto::SamplerParameterfvFn samplerParameterfv;
	proto::SamplerParameteriFn samplerParameteri;
	proto::SamplerParameterivFn samplerParameteriv;
	proto::VertexAttribDivisorFn vertexAttribDivisor;
	proto::VertexAttribP1uiFn vertexAttribP1ui;
	proto::VertexAttribP1uivFn vertexAttribP1uiv;
	proto::VertexAttribP2uiFn vertexAttribP2ui;
	proto::VertexAttribP2uivFn vertexAttribP2uiv;
	proto::VertexAttribP3uiFn vertexAttribP3ui;
	proto::VertexAttribP3uivFn vertexAttribP3uiv;
	proto::VertexAttribP4uiFn vertexAttribP4ui;
	proto::VertexAttribP4uivFn vertexAttribP4uiv;
	//- end: Core 3.3

	//-//-- 
	//- Compatibility 3.3
	bool VERSION_3_3_compatibility;

	proto::ColorP3uiFn colorP3ui;
	proto::ColorP3uivFn colorP3uiv;
	proto::ColorP4uiFn colorP4ui;
	proto::ColorP4uivFn colorP4uiv;
	proto::MultiTexCoordP1uiFn multiTexCoordP1ui;
	proto::MultiTexCoordP1uivFn multiTexCoordP1uiv;
	proto::MultiTexCoordP2uiFn multiTexCoordP2ui;
	proto::MultiTexCoordP2uivFn multiTexCoordP2uiv;
	proto::MultiTexCoordP3uiFn multiTexCoordP3ui;
	proto::MultiTexCoordP3uivFn multiTexCoordP3uiv;
	proto::MultiTexCoordP4uiFn multiTexCoordP4ui;
	proto::MultiTexCoordP4uivFn multiTexCoordP4uiv;
	proto::NormalP3uiFn normalP3ui;
	proto::NormalP3uivFn normalP3uiv;
	proto::SecondaryColorP3uiFn secondaryColorP3ui;
	proto::SecondaryColorP3uivFn secondaryColorP3uiv;
	proto::TexCoordP1uiFn texCoordP1ui;
	proto::TexCoordP1uivFn texCoordP1uiv;
	proto::TexCoordP2uiFn texCoordP2ui;
	proto::TexCoordP2uivFn texCoordP2uiv;
	proto::TexCoordP3uiFn texCoordP3ui;
	proto::TexCoordP3uivFn texCoordP3uiv;
	proto::TexCoordP4uiFn texCoordP4ui;
	proto::TexCoordP4uivFn texCoordP4uiv;
	proto::VertexP2uiFn vertexP2ui;
	proto::VertexP2uivFn vertexP2uiv;
	proto::VertexP3uiFn vertexP3ui;
	proto::VertexP3uivFn vertexP3uiv;
	proto::VertexP4uiFn vertexP4ui;
	proto::VertexP4uivFn vertexP4uiv;
	//- end: Compat 3.3

	//-//-- 
	//- Core 4.0
	bool VERSION_4_0;

	proto::BeginQueryIndexedFn beginQueryIndexed;
	proto::BindTransformFeedbackFn bindTransformFeedback;
	proto::BlendEquationSeparateiFn blendEquationSeparatei;
	proto::BlendEquationiFn blendEquationi;
	proto::BlendFuncSeparateiFn blendFuncSeparatei;
	proto::BlendFunciFn blendFunci;
	proto::DeleteTransformFeedbacksFn deleteTransformFeedbacks;
	proto::DrawArraysIndirectFn drawArraysIndirect;
	proto::DrawElementsIndirectFn drawElementsIndirect;
	proto::DrawTransformFeedbackFn drawTransformFeedback;
	proto::DrawTransformFeedbackStreamFn drawTransformFeedbackStream;
	proto::EndQueryIndexedFn endQueryIndexed;
	proto::GenTransformFeedbacksFn genTransformFeedbacks;
	proto::GetActiveSubroutineNameFn getActiveSubroutineName;
	proto::GetActiveSubroutineUniformNameFn getActiveSubroutineUniformName;
	proto::GetActiveSubroutineUniformivFn getActiveSubroutineUniformiv;
	proto::GetProgramStageivFn getProgramStageiv;
	proto::GetQueryIndexedivFn getQueryIndexediv;
	proto::GetSubroutineIndexFn getSubroutineIndex;
	proto::GetSubroutineUniformLocationFn getSubroutineUniformLocation;
	proto::GetUniformSubroutineuivFn getUniformSubroutineuiv;
	proto::GetUniformdvFn getUniformdv;
	proto::IsTransformFeedbackFn isTransformFeedback;
	proto::MinSampleShadingFn minSampleShading;
	proto::PatchParameterfvFn patchParameterfv;
	proto::PatchParameteriFn patchParameteri;
	proto::PauseTransformFeedbackFn pauseTransformFeedback;
	proto::ResumeTransformFeedbackFn resumeTransformFeedback;
	proto::Uniform1dFn uniform1d;
	proto::Uniform1dvFn uniform1dv;
	proto::Uniform2dFn uniform2d;
	proto::Uniform2dvFn uniform2dv;
	proto::Uniform3dFn uniform3d;
	proto::Uniform3dvFn uniform3dv;
	proto::Uniform4dFn uniform4d;
	proto::Uniform4dvFn uniform4dv;
	proto::UniformMatrix2dvFn uniformMatrix2dv;
	proto::UniformMatrix2x3dvFn uniformMatrix2x3dv;
	proto::UniformMatrix2x4dvFn uniformMatrix2x4dv;
	proto::UniformMatrix3dvFn uniformMatrix3dv;
	proto::UniformMatrix3x2dvFn uniformMatrix3x2dv;
	proto::UniformMatrix3x4dvFn uniformMatrix3x4dv;
	proto::UniformMatrix4dvFn uniformMatrix4dv;
	proto::UniformMatrix4x2dvFn uniformMatrix4x2dv;
	proto::UniformMatrix4x3dvFn uniformMatrix4x3dv;
	proto::UniformSubroutinesuivFn uniformSubroutinesuiv;
	//- end: Core 4.0

	bool VERSION_4_0_compatibility;

	//-//-- 
	//- Core 4.1
	bool VERSION_4_1;

	proto::ActiveShaderProgramFn activeShaderProgram;
	proto::BindProgramPipelineFn bindProgramPipeline;
	proto::ClearDepthfFn clearDepthf;
	proto::CreateShaderProgramvFn createShaderProgramv;
	proto::DeleteProgramPipelinesFn deleteProgramPipelines;
	proto::DepthRangeArrayvFn depthRangeArrayv;
	proto::DepthRangeIndexedFn depthRangeIndexed;
	proto::DepthRangefFn depthRangef;
	proto::GenProgramPipelinesFn genProgramPipelines;
	proto::GetDoublei_vFn getDoublei_v;
	proto::GetFloati_vFn getFloati_v;
	proto::GetProgramBinaryFn getProgramBinary;
	proto::GetProgramPipelineInfoLogFn getProgramPipelineInfoLog;
	proto::GetProgramPipelineivFn getProgramPipelineiv;
	proto::GetShaderPrecisionFormatFn getShaderPrecisionFormat;
	proto::GetVertexAttribLdvFn getVertexAttribLdv;
	proto::IsProgramPipelineFn isProgramPipeline;
	proto::ProgramBinaryFn programBinary;
	proto::ProgramParameteriFn programParameteri;
	proto::ProgramUniform1dFn programUniform1d;
	proto::ProgramUniform1dvFn programUniform1dv;
	proto::ProgramUniform1fFn programUniform1f;
	proto::ProgramUniform1fvFn programUniform1fv;
	proto::ProgramUniform1iFn programUniform1i;
	proto::ProgramUniform1ivFn programUniform1iv;
	proto::ProgramUniform1uiFn programUniform1ui;
	proto::ProgramUniform1uivFn programUniform1uiv;
	proto::ProgramUniform2dFn programUniform2d;
	proto::ProgramUniform2dvFn programUniform2dv;
	proto::ProgramUniform2fFn programUniform2f;
	proto::ProgramUniform2fvFn programUniform2fv;
	proto::ProgramUniform2iFn programUniform2i;
	proto::ProgramUniform2ivFn programUniform2iv;
	proto::ProgramUniform2uiFn programUniform2ui;
	proto::ProgramUniform2uivFn programUniform2uiv;
	proto::ProgramUniform3dFn programUniform3d;
	proto::ProgramUniform3dvFn programUniform3dv;
	proto::ProgramUniform3fFn programUniform3f;
	proto::ProgramUniform3fvFn programUniform3fv;
	proto::ProgramUniform3iFn programUniform3i;
	proto::ProgramUniform3ivFn programUniform3iv;
	proto::ProgramUniform3uiFn programUniform3ui;
	proto::ProgramUniform3uivFn programUniform3uiv;
	proto::ProgramUniform4dFn programUniform4d;
	proto::ProgramUniform4dvFn programUniform4dv;
	proto::ProgramUniform4fFn programUniform4f;
	proto::ProgramUniform4fvFn programUniform4fv;
	proto::ProgramUniform4iFn programUniform4i;
	proto::ProgramUniform4ivFn programUniform4iv;
	proto::ProgramUniform4uiFn programUniform4ui;
	proto::ProgramUniform4uivFn programUniform4uiv;
	proto::ProgramUniformMatrix2dvFn programUniformMatrix2dv;
	proto::ProgramUniformMatrix2fvFn programUniformMatrix2fv;
	proto::ProgramUniformMatrix2x3dvFn programUniformMatrix2x3dv;
	proto::ProgramUniformMatrix2x3fvFn programUniformMatrix2x3fv;
	proto::ProgramUniformMatrix2x4dvFn programUniformMatrix2x4dv;
	proto::ProgramUniformMatrix2x4fvFn programUniformMatrix2x4fv;
	proto::ProgramUniformMatrix3dvFn programUniformMatrix3dv;
	proto::ProgramUniformMatrix3fvFn programUniformMatrix3fv;
	proto::ProgramUniformMatrix3x2dvFn programUniformMatrix3x2dv;
	proto::ProgramUniformMatrix3x2fvFn programUniformMatrix3x2fv;
	proto::ProgramUniformMatrix3x4dvFn programUniformMatrix3x4dv;
	proto::ProgramUniformMatrix3x4fvFn programUniformMatrix3x4fv;
	proto::ProgramUniformMatrix4dvFn programUniformMatrix4dv;
	proto::ProgramUniformMatrix4fvFn programUniformMatrix4fv;
	proto::ProgramUniformMatrix4x2dvFn programUniformMatrix4x2dv;
	proto::ProgramUniformMatrix4x2fvFn programUniformMatrix4x2fv;
	proto::ProgramUniformMatrix4x3dvFn programUniformMatrix4x3dv;
	proto::ProgramUniformMatrix4x3fvFn programUniformMatrix4x3fv;
	proto::ReleaseShaderCompilerFn releaseShaderCompiler;
	proto::ScissorArrayvFn scissorArrayv;
	proto::ScissorIndexedFn scissorIndexed;
	proto::ScissorIndexedvFn scissorIndexedv;
	proto::ShaderBinaryFn shaderBinary;
	proto::UseProgramStagesFn useProgramStages;
	proto::ValidateProgramPipelineFn validateProgramPipeline;
	proto::VertexAttribL1dFn vertexAttribL1d;
	proto::VertexAttribL1dvFn vertexAttribL1dv;
	proto::VertexAttribL2dFn vertexAttribL2d;
	proto::VertexAttribL2dvFn vertexAttribL2dv;
	proto::VertexAttribL3dFn vertexAttribL3d;
	proto::VertexAttribL3dvFn vertexAttribL3dv;
	proto::VertexAttribL4dFn vertexAttribL4d;
	proto::VertexAttribL4dvFn vertexAttribL4dv;
	proto::VertexAttribLPointerFn vertexAttribLPointer;
	proto::ViewportArrayvFn viewportArrayv;
	proto::ViewportIndexedfFn viewportIndexedf;
	proto::ViewportIndexedfvFn viewportIndexedfv;
	//- end: Core 4.1

	bool VERSION_4_1_compatibility;

	//-//-- 
	//- Core 4.2
	bool VERSION_4_2;

	proto::BindImageTextureFn bindImageTexture;
	proto::DrawArraysInstancedBaseInstanceFn drawArraysInstancedBaseInstance;
	proto::DrawElementsInstancedBaseInstanceFn drawElementsInstancedBaseInstance;
	proto::DrawElementsInstancedBaseVertexBaseInstanceFn drawElementsInstancedBaseVertexBaseInstance;
	proto::DrawTransformFeedbackInstancedFn drawTransformFeedbackInstanced;
	proto::DrawTransformFeedbackStreamInstancedFn drawTransformFeedbackStreamInstanced;
	proto::GetActiveAtomicCounterBufferivFn getActiveAtomicCounterBufferiv;
	proto::GetInternalformativFn getInternalformativ;
	proto::MemoryBarrierFn memoryBarrier;
	proto::TexStorage1DFn texStorage1D;
	proto::TexStorage2DFn texStorage2D;
	proto::TexStorage3DFn texStorage3D;
	//- end: Core 4.2

	bool VERSION_4_2_compatibility;

	//-//-- 
	//- Core 4.3
	bool VERSION_4_3;

	proto::BindVertexBufferFn bindVertexBuffer;
	proto::ClearBufferDataFn clearBufferData;
	proto::ClearBufferSubDataFn clearBufferSubData;
	proto::CopyImageSubDataFn copyImageSubData;
	proto::DebugMessageCallbackFn debugMessageCallback;
	proto::DebugMessageControlFn debugMessageControl;
	proto::DebugMessageInsertFn debugMessageInsert;
	proto::DispatchComputeFn dispatchCompute;
	proto::DispatchComputeIndirectFn dispatchComputeIndirect;
	proto::FramebufferParameteriFn framebufferParameteri;
	proto::GetDebugMessageLogFn getDebugMessageLog;
	proto::GetFramebufferParameterivFn getFramebufferParameteriv;
	proto::GetInternalformati64vFn getInternalformati64v;
	proto::GetObjectLabelFn getObjectLabel;
	proto::GetObjectPtrLabelFn getObjectPtrLabel;
	// getPointerv already defined in 1.1_core
	// getPointerv already defined in 1.1_core
	proto::GetProgramInterfaceivFn getProgramInterfaceiv;
	proto::GetProgramResourceIndexFn getProgramResourceIndex;
	proto::GetProgramResourceLocationFn getProgramResourceLocation;
	proto::GetProgramResourceLocationIndexFn getProgramResourceLocationIndex;
	proto::GetProgramResourceNameFn getProgramResourceName;
	proto::GetProgramResourceivFn getProgramResourceiv;
	proto::InvalidateBufferDataFn invalidateBufferData;
	proto::InvalidateBufferSubDataFn invalidateBufferSubData;
	proto::InvalidateFramebufferFn invalidateFramebuffer;
	proto::InvalidateSubFramebufferFn invalidateSubFramebuffer;
	proto::InvalidateTexImageFn invalidateTexImage;
	proto::InvalidateTexSubImageFn invalidateTexSubImage;
	proto::MultiDrawArraysIndirectFn multiDrawArraysIndirect;
	proto::MultiDrawElementsIndirectFn multiDrawElementsIndirect;
	proto::ObjectLabelFn objectLabel;
	proto::ObjectPtrLabelFn objectPtrLabel;
	proto::PopDebugGroupFn popDebugGroup;
	proto::PushDebugGroupFn pushDebugGroup;
	proto::ShaderStorageBlockBindingFn shaderStorageBlockBinding;
	proto::TexBufferRangeFn texBufferRange;
	proto::TexStorage2DMultisampleFn texStorage2DMultisample;
	proto::TexStorage3DMultisampleFn texStorage3DMultisample;
	proto::TextureViewFn textureView;
	proto::VertexAttribBindingFn vertexAttribBinding;
	proto::VertexAttribFormatFn vertexAttribFormat;
	proto::VertexAttribIFormatFn vertexAttribIFormat;
	proto::VertexAttribLFormatFn vertexAttribLFormat;
	proto::VertexBindingDivisorFn vertexBindingDivisor;
	//- end: Core 4.3

	bool VERSION_4_3_compatibility;

	//-//-- 
	//- Core 4.4
	bool VERSION_4_4;

	proto::BindBuffersBaseFn bindBuffersBase;
	proto::BindBuffersRangeFn bindBuffersRange;
	proto::BindImageTexturesFn bindImageTextures;
	proto::BindSamplersFn bindSamplers;
	proto::BindTexturesFn bindTextures;
	proto::BindVertexBuffersFn bindVertexBuffers;
	proto::BufferStorageFn bufferStorage;
	proto::ClearTexImageFn clearTexImage;
	proto::ClearTexSubImageFn clearTexSubImage;
	//- end: Core 4.4

	bool VERSION_4_4_compatibility;

	//-//-- 
	//- Core 4.5
	bool VERSION_4_5;

	proto::BindTextureUnitFn bindTextureUnit;
	proto::BlitNamedFramebufferFn blitNamedFramebuffer;
	proto::CheckNamedFramebufferStatusFn checkNamedFramebufferStatus;
	proto::ClearNamedBufferDataFn clearNamedBufferData;
	proto::ClearNamedBufferSubDataFn clearNamedBufferSubData;
	proto::ClearNamedFramebufferfiFn clearNamedFramebufferfi;
	proto::ClearNamedFramebufferfvFn clearNamedFramebufferfv;
	proto::ClearNamedFramebufferivFn clearNamedFramebufferiv;
	proto::ClearNamedFramebufferuivFn clearNamedFramebufferuiv;
	proto::ClipControlFn clipControl;
	proto::CompressedTextureSubImage1DFn compressedTextureSubImage1D;
	proto::CompressedTextureSubImage2DFn compressedTextureSubImage2D;
	proto::CompressedTextureSubImage3DFn compressedTextureSubImage3D;
	proto::CopyNamedBufferSubDataFn copyNamedBufferSubData;
	proto::CopyTextureSubImage1DFn copyTextureSubImage1D;
	proto::CopyTextureSubImage2DFn copyTextureSubImage2D;
	proto::CopyTextureSubImage3DFn copyTextureSubImage3D;
	proto::CreateBuffersFn createBuffers;
	proto::CreateFramebuffersFn createFramebuffers;
	proto::CreateProgramPipelinesFn createProgramPipelines;
	proto::CreateQueriesFn createQueries;
	proto::CreateRenderbuffersFn createRenderbuffers;
	proto::CreateSamplersFn createSamplers;
	proto::CreateTexturesFn createTextures;
	proto::CreateTransformFeedbacksFn createTransformFeedbacks;
	proto::CreateVertexArraysFn createVertexArrays;
	proto::DisableVertexArrayAttribFn disableVertexArrayAttrib;
	proto::EnableVertexArrayAttribFn enableVertexArrayAttrib;
	proto::FlushMappedNamedBufferRangeFn flushMappedNamedBufferRange;
	proto::GenerateTextureMipmapFn generateTextureMipmap;
	proto::GetCompressedTextureImageFn getCompressedTextureImage;
	proto::GetCompressedTextureSubImageFn getCompressedTextureSubImage;
	proto::GetGraphicsResetStatusFn getGraphicsResetStatus;
	proto::GetNamedBufferParameteri64vFn getNamedBufferParameteri64v;
	proto::GetNamedBufferParameterivFn getNamedBufferParameteriv;
	proto::GetNamedBufferPointervFn getNamedBufferPointerv;
	proto::GetNamedBufferSubDataFn getNamedBufferSubData;
	proto::GetNamedFramebufferAttachmentParameterivFn getNamedFramebufferAttachmentParameteriv;
	proto::GetNamedFramebufferParameterivFn getNamedFramebufferParameteriv;
	proto::GetNamedRenderbufferParameterivFn getNamedRenderbufferParameteriv;
	proto::GetQueryBufferObjecti64vFn getQueryBufferObjecti64v;
	proto::GetQueryBufferObjectivFn getQueryBufferObjectiv;
	proto::GetQueryBufferObjectui64vFn getQueryBufferObjectui64v;
	proto::GetQueryBufferObjectuivFn getQueryBufferObjectuiv;
	proto::GetTextureImageFn getTextureImage;
	proto::GetTextureLevelParameterfvFn getTextureLevelParameterfv;
	proto::GetTextureLevelParameterivFn getTextureLevelParameteriv;
	proto::GetTextureParameterIivFn getTextureParameterIiv;
	proto::GetTextureParameterIuivFn getTextureParameterIuiv;
	proto::GetTextureParameterfvFn getTextureParameterfv;
	proto::GetTextureParameterivFn getTextureParameteriv;
	proto::GetTextureSubImageFn getTextureSubImage;
	proto::GetTransformFeedbacki64_vFn getTransformFeedbacki64_v;
	proto::GetTransformFeedbacki_vFn getTransformFeedbacki_v;
	proto::GetTransformFeedbackivFn getTransformFeedbackiv;
	proto::GetVertexArrayIndexed64ivFn getVertexArrayIndexed64iv;
	proto::GetVertexArrayIndexedivFn getVertexArrayIndexediv;
	proto::GetVertexArrayivFn getVertexArrayiv;
	proto::GetnCompressedTexImageFn getnCompressedTexImage;
	proto::GetnTexImageFn getnTexImage;
	proto::GetnUniformdvFn getnUniformdv;
	proto::GetnUniformfvFn getnUniformfv;
	proto::GetnUniformivFn getnUniformiv;
	proto::GetnUniformuivFn getnUniformuiv;
	proto::InvalidateNamedFramebufferDataFn invalidateNamedFramebufferData;
	proto::InvalidateNamedFramebufferSubDataFn invalidateNamedFramebufferSubData;
	proto::MapNamedBufferFn mapNamedBuffer;
	proto::MapNamedBufferRangeFn mapNamedBufferRange;
	proto::MemoryBarrierByRegionFn memoryBarrierByRegion;
	proto::NamedBufferDataFn namedBufferData;
	proto::NamedBufferStorageFn namedBufferStorage;
	proto::NamedBufferSubDataFn namedBufferSubData;
	proto::NamedFramebufferDrawBufferFn namedFramebufferDrawBuffer;
	proto::NamedFramebufferDrawBuffersFn namedFramebufferDrawBuffers;
	proto::NamedFramebufferParameteriFn namedFramebufferParameteri;
	proto::NamedFramebufferReadBufferFn namedFramebufferReadBuffer;
	proto::NamedFramebufferRenderbufferFn namedFramebufferRenderbuffer;
	proto::NamedFramebufferTextureFn namedFramebufferTexture;
	proto::NamedFramebufferTextureLayerFn namedFramebufferTextureLayer;
	proto::NamedRenderbufferStorageFn namedRenderbufferStorage;
	proto::NamedRenderbufferStorageMultisampleFn namedRenderbufferStorageMultisample;
	proto::ReadnPixelsFn readnPixels;
	proto::TextureBarrierFn textureBarrier;
	proto::TextureBufferFn textureBuffer;
	proto::TextureBufferRangeFn textureBufferRange;
	proto::TextureParameterIivFn textureParameterIiv;
	proto::TextureParameterIuivFn textureParameterIuiv;
	proto::TextureParameterfFn textureParameterf;
	proto::TextureParameterfvFn textureParameterfv;
	proto::TextureParameteriFn textureParameteri;
	proto::TextureParameterivFn textureParameteriv;
	proto::TextureStorage1DFn textureStorage1D;
	proto::TextureStorage2DFn textureStorage2D;
	proto::TextureStorage2DMultisampleFn textureStorage2DMultisample;
	proto::TextureStorage3DFn textureStorage3D;
	proto::TextureStorage3DMultisampleFn textureStorage3DMultisample;
	proto::TextureSubImage1DFn textureSubImage1D;
	proto::TextureSubImage2DFn textureSubImage2D;
	proto::TextureSubImage3DFn textureSubImage3D;
	proto::TransformFeedbackBufferBaseFn transformFeedbackBufferBase;
	proto::TransformFeedbackBufferRangeFn transformFeedbackBufferRange;
	proto::UnmapNamedBufferFn unmapNamedBuffer;
	proto::VertexArrayAttribBindingFn vertexArrayAttribBinding;
	proto::VertexArrayAttribFormatFn vertexArrayAttribFormat;
	proto::VertexArrayAttribIFormatFn vertexArrayAttribIFormat;
	proto::VertexArrayAttribLFormatFn vertexArrayAttribLFormat;
	proto::VertexArrayBindingDivisorFn vertexArrayBindingDivisor;
	proto::VertexArrayElementBufferFn vertexArrayElementBuffer;
	proto::VertexArrayVertexBufferFn vertexArrayVertexBuffer;
	proto::VertexArrayVertexBuffersFn vertexArrayVertexBuffers;
	//- end: Core 4.5

	//-//-- 
	//- Compatibility 4.5
	bool VERSION_4_5_compatibility;

	proto::GetnColorTableFn getnColorTable;
	proto::GetnConvolutionFilterFn getnConvolutionFilter;
	proto::GetnHistogramFn getnHistogram;
	proto::GetnMapdvFn getnMapdv;
	proto::GetnMapfvFn getnMapfv;
	proto::GetnMapivFn getnMapiv;
	proto::GetnMinmaxFn getnMinmax;
	proto::GetnPixelMapfvFn getnPixelMapfv;
	proto::GetnPixelMapuivFn getnPixelMapuiv;
	proto::GetnPixelMapusvFn getnPixelMapusv;
	proto::GetnPolygonStippleFn getnPolygonStipple;
	proto::GetnSeparableFilterFn getnSeparableFilter;
	//- end: Compat 4.5

	//-//-- 
	//- Core 4.6
	bool VERSION_4_6;

	proto::MultiDrawArraysIndirectCountFn multiDrawArraysIndirectCount;
	proto::MultiDrawElementsIndirectCountFn multiDrawElementsIndirectCount;
	proto::SpecializeShaderFn specializeShader;
	//- end: Core 4.6

	bool VERSION_4_6_compatibility;

	//-//-- 
	//- Ext: AMD_debug_output
	bool AMD_debug_output;

	proto::DebugMessageCallbackAMDFn debugMessageCallbackAMD;
	proto::DebugMessageEnableAMDFn debugMessageEnableAMD;
	proto::DebugMessageInsertAMDFn debugMessageInsertAMD;
	proto::GetDebugMessageLogAMDFn getDebugMessageLogAMD;
	//- end: AMD_debug_output

	//-//-- 
	//- Ext: AMD_draw_buffers_blend
	bool AMD_draw_buffers_blend;

	proto::BlendEquationIndexedAMDFn blendEquationIndexedAMD;
	proto::BlendEquationSeparateIndexedAMDFn blendEquationSeparateIndexedAMD;
	proto::BlendFuncIndexedAMDFn blendFuncIndexedAMD;
	proto::BlendFuncSeparateIndexedAMDFn blendFuncSeparateIndexedAMD;
	//- end: AMD_draw_buffers_blend

	//-//-- 
	//- Ext: AMD_gpu_shader_int64
	bool AMD_gpu_shader_int64;

	proto::GetUniformi64vNVFn getUniformi64vNV;
	proto::GetUniformui64vNVFn getUniformui64vNV;
	proto::ProgramUniform1i64NVFn programUniform1i64NV;
	proto::ProgramUniform1i64vNVFn programUniform1i64vNV;
	proto::ProgramUniform1ui64NVFn programUniform1ui64NV;
	proto::ProgramUniform1ui64vNVFn programUniform1ui64vNV;
	proto::ProgramUniform2i64NVFn programUniform2i64NV;
	proto::ProgramUniform2i64vNVFn programUniform2i64vNV;
	proto::ProgramUniform2ui64NVFn programUniform2ui64NV;
	proto::ProgramUniform2ui64vNVFn programUniform2ui64vNV;
	proto::ProgramUniform3i64NVFn programUniform3i64NV;
	proto::ProgramUniform3i64vNVFn programUniform3i64vNV;
	proto::ProgramUniform3ui64NVFn programUniform3ui64NV;
	proto::ProgramUniform3ui64vNVFn programUniform3ui64vNV;
	proto::ProgramUniform4i64NVFn programUniform4i64NV;
	proto::ProgramUniform4i64vNVFn programUniform4i64vNV;
	proto::ProgramUniform4ui64NVFn programUniform4ui64NV;
	proto::ProgramUniform4ui64vNVFn programUniform4ui64vNV;
	proto::Uniform1i64NVFn uniform1i64NV;
	proto::Uniform1i64vNVFn uniform1i64vNV;
	proto::Uniform1ui64NVFn uniform1ui64NV;
	proto::Uniform1ui64vNVFn uniform1ui64vNV;
	proto::Uniform2i64NVFn uniform2i64NV;
	proto::Uniform2i64vNVFn uniform2i64vNV;
	proto::Uniform2ui64NVFn uniform2ui64NV;
	proto::Uniform2ui64vNVFn uniform2ui64vNV;
	proto::Uniform3i64NVFn uniform3i64NV;
	proto::Uniform3i64vNVFn uniform3i64vNV;
	proto::Uniform3ui64NVFn uniform3ui64NV;
	proto::Uniform3ui64vNVFn uniform3ui64vNV;
	proto::Uniform4i64NVFn uniform4i64NV;
	proto::Uniform4i64vNVFn uniform4i64vNV;
	proto::Uniform4ui64NVFn uniform4ui64NV;
	proto::Uniform4ui64vNVFn uniform4ui64vNV;
	//- end: AMD_gpu_shader_int64

	//-//-- 
	//- Ext: AMD_interleaved_elements
	bool AMD_interleaved_elements;

	proto::VertexAttribParameteriAMDFn vertexAttribParameteriAMD;
	//- end: AMD_interleaved_elements

	//-//-- 
	//- Ext: AMD_multi_draw_indirect
	bool AMD_multi_draw_indirect;

	proto::MultiDrawArraysIndirectAMDFn multiDrawArraysIndirectAMD;
	proto::MultiDrawElementsIndirectAMDFn multiDrawElementsIndirectAMD;
	//- end: AMD_multi_draw_indirect

	//-//-- 
	//- Ext: AMD_name_gen_delete
	bool AMD_name_gen_delete;

	proto::DeleteNamesAMDFn deleteNamesAMD;
	proto::GenNamesAMDFn genNamesAMD;
	proto::IsNameAMDFn isNameAMD;
	//- end: AMD_name_gen_delete

	//-//-- 
	//- Ext: AMD_occlusion_query_event
	bool AMD_occlusion_query_event;

	proto::QueryObjectParameteruiAMDFn queryObjectParameteruiAMD;
	//- end: AMD_occlusion_query_event

	//-//-- 
	//- Ext: AMD_performance_monitor
	bool AMD_performance_monitor;

	proto::BeginPerfMonitorAMDFn beginPerfMonitorAMD;
	proto::DeletePerfMonitorsAMDFn deletePerfMonitorsAMD;
	proto::EndPerfMonitorAMDFn endPerfMonitorAMD;
	proto::GenPerfMonitorsAMDFn genPerfMonitorsAMD;
	proto::GetPerfMonitorCounterDataAMDFn getPerfMonitorCounterDataAMD;
	proto::GetPerfMonitorCounterInfoAMDFn getPerfMonitorCounterInfoAMD;
	proto::GetPerfMonitorCounterStringAMDFn getPerfMonitorCounterStringAMD;
	proto::GetPerfMonitorCountersAMDFn getPerfMonitorCountersAMD;
	proto::GetPerfMonitorGroupStringAMDFn getPerfMonitorGroupStringAMD;
	proto::GetPerfMonitorGroupsAMDFn getPerfMonitorGroupsAMD;
	proto::SelectPerfMonitorCountersAMDFn selectPerfMonitorCountersAMD;
	//- end: AMD_performance_monitor

	//-//-- 
	//- Ext: AMD_sample_positions
	bool AMD_sample_positions;

	proto::SetMultisamplefvAMDFn setMultisamplefvAMD;
	//- end: AMD_sample_positions

	//-//-- 
	//- Ext: AMD_sparse_texture
	bool AMD_sparse_texture;

	proto::TexStorageSparseAMDFn texStorageSparseAMD;
	proto::TextureStorageSparseAMDFn textureStorageSparseAMD;
	//- end: AMD_sparse_texture

	//-//-- 
	//- Ext: AMD_stencil_operation_extended
	bool AMD_stencil_operation_extended;

	proto::StencilOpValueAMDFn stencilOpValueAMD;
	//- end: AMD_stencil_operation_extended

	//-//-- 
	//- Ext: AMD_vertex_shader_tessellator
	bool AMD_vertex_shader_tessellator;

	proto::TessellationFactorAMDFn tessellationFactorAMD;
	proto::TessellationModeAMDFn tessellationModeAMD;
	//- end: AMD_vertex_shader_tessellator

	//-//-- 
	//- Ext: APPLE_element_array
	bool APPLE_element_array;

	proto::DrawElementArrayAPPLEFn drawElementArrayAPPLE;
	proto::DrawRangeElementArrayAPPLEFn drawRangeElementArrayAPPLE;
	proto::ElementPointerAPPLEFn elementPointerAPPLE;
	proto::MultiDrawElementArrayAPPLEFn multiDrawElementArrayAPPLE;
	proto::MultiDrawRangeElementArrayAPPLEFn multiDrawRangeElementArrayAPPLE;
	//- end: APPLE_element_array

	//-//-- 
	//- Ext: APPLE_fence
	bool APPLE_fence;

	proto::DeleteFencesAPPLEFn deleteFencesAPPLE;
	proto::FinishFenceAPPLEFn finishFenceAPPLE;
	proto::FinishObjectAPPLEFn finishObjectAPPLE;
	proto::GenFencesAPPLEFn genFencesAPPLE;
	proto::IsFenceAPPLEFn isFenceAPPLE;
	proto::SetFenceAPPLEFn setFenceAPPLE;
	proto::TestFenceAPPLEFn testFenceAPPLE;
	proto::TestObjectAPPLEFn testObjectAPPLE;
	//- end: APPLE_fence

	//-//-- 
	//- Ext: APPLE_flush_buffer_range
	bool APPLE_flush_buffer_range;

	proto::BufferParameteriAPPLEFn bufferParameteriAPPLE;
	proto::FlushMappedBufferRangeAPPLEFn flushMappedBufferRangeAPPLE;
	//- end: APPLE_flush_buffer_range

	//-//-- 
	//- Ext: APPLE_object_purgeable
	bool APPLE_object_purgeable;

	proto::GetObjectParameterivAPPLEFn getObjectParameterivAPPLE;
	proto::ObjectPurgeableAPPLEFn objectPurgeableAPPLE;
	proto::ObjectUnpurgeableAPPLEFn objectUnpurgeableAPPLE;
	//- end: APPLE_object_purgeable

	//-//-- 
	//- Ext: APPLE_texture_range
	bool APPLE_texture_range;

	proto::GetTexParameterPointervAPPLEFn getTexParameterPointervAPPLE;
	proto::TextureRangeAPPLEFn textureRangeAPPLE;
	//- end: APPLE_texture_range

	//-//-- 
	//- Ext: APPLE_vertex_array_object
	bool APPLE_vertex_array_object;

	proto::BindVertexArrayAPPLEFn bindVertexArrayAPPLE;
	proto::DeleteVertexArraysAPPLEFn deleteVertexArraysAPPLE;
	proto::GenVertexArraysAPPLEFn genVertexArraysAPPLE;
	proto::IsVertexArrayAPPLEFn isVertexArrayAPPLE;
	//- end: APPLE_vertex_array_object

	//-//-- 
	//- Ext: APPLE_vertex_array_range
	bool APPLE_vertex_array_range;

	proto::FlushVertexArrayRangeAPPLEFn flushVertexArrayRangeAPPLE;
	proto::VertexArrayParameteriAPPLEFn vertexArrayParameteriAPPLE;
	proto::VertexArrayRangeAPPLEFn vertexArrayRangeAPPLE;
	//- end: APPLE_vertex_array_range

	//-//-- 
	//- Ext: APPLE_vertex_program_evaluators
	bool APPLE_vertex_program_evaluators;

	proto::DisableVertexAttribAPPLEFn disableVertexAttribAPPLE;
	proto::EnableVertexAttribAPPLEFn enableVertexAttribAPPLE;
	proto::IsVertexAttribEnabledAPPLEFn isVertexAttribEnabledAPPLE;
	proto::MapVertexAttrib1dAPPLEFn mapVertexAttrib1dAPPLE;
	proto::MapVertexAttrib1fAPPLEFn mapVertexAttrib1fAPPLE;
	proto::MapVertexAttrib2dAPPLEFn mapVertexAttrib2dAPPLE;
	proto::MapVertexAttrib2fAPPLEFn mapVertexAttrib2fAPPLE;
	//- end: APPLE_vertex_program_evaluators

	//-//-- 
	//- Ext: ARB_ES2_compatibility
	bool ARB_ES2_compatibility;

	// clearDepthf already defined in 4.1_core
	// depthRangef already defined in 4.1_core
	// getShaderPrecisionFormat already defined in 4.1_core
	// releaseShaderCompiler already defined in 4.1_core
	// shaderBinary already defined in 4.1_core
	//- end: ARB_ES2_compatibility

	//-//-- 
	//- Ext: ARB_ES3_1_compatibility
	bool ARB_ES3_1_compatibility;

	// memoryBarrierByRegion already defined in 4.5_core
	//- end: ARB_ES3_1_compatibility

	//-//-- 
	//- Ext: ARB_ES3_2_compatibility
	bool ARB_ES3_2_compatibility;

	proto::PrimitiveBoundingBoxARBFn primitiveBoundingBoxARB;
	//- end: ARB_ES3_2_compatibility

	//-//-- 
	//- Ext: ARB_base_instance
	bool ARB_base_instance;

	// drawArraysInstancedBaseInstance already defined in 4.2_core
	// drawElementsInstancedBaseInstance already defined in 4.2_core
	// drawElementsInstancedBaseVertexBaseInstance already defined in 4.2_core
	//- end: ARB_base_instance

	//-//-- 
	//- Ext: ARB_bindless_texture
	bool ARB_bindless_texture;

	proto::GetImageHandleARBFn getImageHandleARB;
	proto::GetTextureHandleARBFn getTextureHandleARB;
	proto::GetTextureSamplerHandleARBFn getTextureSamplerHandleARB;
	proto::GetVertexAttribLui64vARBFn getVertexAttribLui64vARB;
	proto::IsImageHandleResidentARBFn isImageHandleResidentARB;
	proto::IsTextureHandleResidentARBFn isTextureHandleResidentARB;
	proto::MakeImageHandleNonResidentARBFn makeImageHandleNonResidentARB;
	proto::MakeImageHandleResidentARBFn makeImageHandleResidentARB;
	proto::MakeTextureHandleNonResidentARBFn makeTextureHandleNonResidentARB;
	proto::MakeTextureHandleResidentARBFn makeTextureHandleResidentARB;
	proto::ProgramUniformHandleui64ARBFn programUniformHandleui64ARB;
	proto::ProgramUniformHandleui64vARBFn programUniformHandleui64vARB;
	proto::UniformHandleui64ARBFn uniformHandleui64ARB;
	proto::UniformHandleui64vARBFn uniformHandleui64vARB;
	proto::VertexAttribL1ui64ARBFn vertexAttribL1ui64ARB;
	proto::VertexAttribL1ui64vARBFn vertexAttribL1ui64vARB;
	//- end: ARB_bindless_texture

	//-//-- 
	//- Ext: ARB_blend_func_extended
	bool ARB_blend_func_extended;

	// bindFragDataLocationIndexed already defined in 3.3_core
	// getFragDataIndex already defined in 3.3_core
	//- end: ARB_blend_func_extended

	//-//-- 
	//- Ext: ARB_buffer_storage
	bool ARB_buffer_storage;

	// bufferStorage already defined in 4.4_core
	//- end: ARB_buffer_storage

	//-//-- 
	//- Ext: ARB_cl_event
	bool ARB_cl_event;

	proto::CreateSyncFromCLeventARBFn createSyncFromCLeventARB;
	//- end: ARB_cl_event

	//-//-- 
	//- Ext: ARB_clear_buffer_object
	bool ARB_clear_buffer_object;

	// clearBufferData already defined in 4.3_core
	// clearBufferSubData already defined in 4.3_core
	//- end: ARB_clear_buffer_object

	//-//-- 
	//- Ext: ARB_clear_texture
	bool ARB_clear_texture;

	// clearTexImage already defined in 4.4_core
	// clearTexSubImage already defined in 4.4_core
	//- end: ARB_clear_texture

	//-//-- 
	//- Ext: ARB_clip_control
	bool ARB_clip_control;

	// clipControl already defined in 4.5_core
	//- end: ARB_clip_control

	//-//-- 
	//- Ext: ARB_color_buffer_float
	bool ARB_color_buffer_float;

	proto::ClampColorARBFn clampColorARB;
	//- end: ARB_color_buffer_float

	//-//-- 
	//- Ext: ARB_compute_shader
	bool ARB_compute_shader;

	// dispatchCompute already defined in 4.3_core
	// dispatchComputeIndirect already defined in 4.3_core
	//- end: ARB_compute_shader

	//-//-- 
	//- Ext: ARB_compute_variable_group_size
	bool ARB_compute_variable_group_size;

	proto::DispatchComputeGroupSizeARBFn dispatchComputeGroupSizeARB;
	//- end: ARB_compute_variable_group_size

	//-//-- 
	//- Ext: ARB_copy_buffer
	bool ARB_copy_buffer;

	// copyBufferSubData already defined in 3.1_core
	//- end: ARB_copy_buffer

	//-//-- 
	//- Ext: ARB_copy_image
	bool ARB_copy_image;

	// copyImageSubData already defined in 4.3_core
	//- end: ARB_copy_image

	//-//-- 
	//- Ext: ARB_debug_output
	bool ARB_debug_output;

	proto::DebugMessageCallbackARBFn debugMessageCallbackARB;
	proto::DebugMessageControlARBFn debugMessageControlARB;
	proto::DebugMessageInsertARBFn debugMessageInsertARB;
	proto::GetDebugMessageLogARBFn getDebugMessageLogARB;
	//- end: ARB_debug_output

	//-//-- 
	//- Ext: ARB_direct_state_access
	bool ARB_direct_state_access;

	// bindTextureUnit already defined in 4.5_core
	// blitNamedFramebuffer already defined in 4.5_core
	// checkNamedFramebufferStatus already defined in 4.5_core
	// clearNamedBufferData already defined in 4.5_core
	// clearNamedBufferSubData already defined in 4.5_core
	// clearNamedFramebufferfi already defined in 4.5_core
	// clearNamedFramebufferfv already defined in 4.5_core
	// clearNamedFramebufferiv already defined in 4.5_core
	// clearNamedFramebufferuiv already defined in 4.5_core
	// compressedTextureSubImage1D already defined in 4.5_core
	// compressedTextureSubImage2D already defined in 4.5_core
	// compressedTextureSubImage3D already defined in 4.5_core
	// copyNamedBufferSubData already defined in 4.5_core
	// copyTextureSubImage1D already defined in 4.5_core
	// copyTextureSubImage2D already defined in 4.5_core
	// copyTextureSubImage3D already defined in 4.5_core
	// createBuffers already defined in 4.5_core
	// createFramebuffers already defined in 4.5_core
	// createProgramPipelines already defined in 4.5_core
	// createQueries already defined in 4.5_core
	// createRenderbuffers already defined in 4.5_core
	// createSamplers already defined in 4.5_core
	// createTextures already defined in 4.5_core
	// createTransformFeedbacks already defined in 4.5_core
	// createVertexArrays already defined in 4.5_core
	// disableVertexArrayAttrib already defined in 4.5_core
	// enableVertexArrayAttrib already defined in 4.5_core
	// flushMappedNamedBufferRange already defined in 4.5_core
	// generateTextureMipmap already defined in 4.5_core
	// getCompressedTextureImage already defined in 4.5_core
	// getNamedBufferParameteri64v already defined in 4.5_core
	// getNamedBufferParameteriv already defined in 4.5_core
	// getNamedBufferPointerv already defined in 4.5_core
	// getNamedBufferSubData already defined in 4.5_core
	// getNamedFramebufferAttachmentParameteriv already defined in 4.5_core
	// getNamedFramebufferParameteriv already defined in 4.5_core
	// getNamedRenderbufferParameteriv already defined in 4.5_core
	// getQueryBufferObjecti64v already defined in 4.5_core
	// getQueryBufferObjectiv already defined in 4.5_core
	// getQueryBufferObjectui64v already defined in 4.5_core
	// getQueryBufferObjectuiv already defined in 4.5_core
	// getTextureImage already defined in 4.5_core
	// getTextureLevelParameterfv already defined in 4.5_core
	// getTextureLevelParameteriv already defined in 4.5_core
	// getTextureParameterIiv already defined in 4.5_core
	// getTextureParameterIuiv already defined in 4.5_core
	// getTextureParameterfv already defined in 4.5_core
	// getTextureParameteriv already defined in 4.5_core
	// getTransformFeedbacki64_v already defined in 4.5_core
	// getTransformFeedbacki_v already defined in 4.5_core
	// getTransformFeedbackiv already defined in 4.5_core
	// getVertexArrayIndexed64iv already defined in 4.5_core
	// getVertexArrayIndexediv already defined in 4.5_core
	// getVertexArrayiv already defined in 4.5_core
	// invalidateNamedFramebufferData already defined in 4.5_core
	// invalidateNamedFramebufferSubData already defined in 4.5_core
	// mapNamedBuffer already defined in 4.5_core
	// mapNamedBufferRange already defined in 4.5_core
	// namedBufferData already defined in 4.5_core
	// namedBufferStorage already defined in 4.5_core
	// namedBufferSubData already defined in 4.5_core
	// namedFramebufferDrawBuffer already defined in 4.5_core
	// namedFramebufferDrawBuffers already defined in 4.5_core
	// namedFramebufferParameteri already defined in 4.5_core
	// namedFramebufferReadBuffer already defined in 4.5_core
	// namedFramebufferRenderbuffer already defined in 4.5_core
	// namedFramebufferTexture already defined in 4.5_core
	// namedFramebufferTextureLayer already defined in 4.5_core
	// namedRenderbufferStorage already defined in 4.5_core
	// namedRenderbufferStorageMultisample already defined in 4.5_core
	// textureBuffer already defined in 4.5_core
	// textureBufferRange already defined in 4.5_core
	// textureParameterIiv already defined in 4.5_core
	// textureParameterIuiv already defined in 4.5_core
	// textureParameterf already defined in 4.5_core
	// textureParameterfv already defined in 4.5_core
	// textureParameteri already defined in 4.5_core
	// textureParameteriv already defined in 4.5_core
	// textureStorage1D already defined in 4.5_core
	// textureStorage2D already defined in 4.5_core
	// textureStorage2DMultisample already defined in 4.5_core
	// textureStorage3D already defined in 4.5_core
	// textureStorage3DMultisample already defined in 4.5_core
	// textureSubImage1D already defined in 4.5_core
	// textureSubImage2D already defined in 4.5_core
	// textureSubImage3D already defined in 4.5_core
	// transformFeedbackBufferBase already defined in 4.5_core
	// transformFeedbackBufferRange already defined in 4.5_core
	// unmapNamedBuffer already defined in 4.5_core
	// vertexArrayAttribBinding already defined in 4.5_core
	// vertexArrayAttribFormat already defined in 4.5_core
	// vertexArrayAttribIFormat already defined in 4.5_core
	// vertexArrayAttribLFormat already defined in 4.5_core
	// vertexArrayBindingDivisor already defined in 4.5_core
	// vertexArrayElementBuffer already defined in 4.5_core
	// vertexArrayVertexBuffer already defined in 4.5_core
	// vertexArrayVertexBuffers already defined in 4.5_core
	//- end: ARB_direct_state_access

	//-//-- 
	//- Ext: ARB_draw_buffers
	bool ARB_draw_buffers;

	proto::DrawBuffersARBFn drawBuffersARB;
	//- end: ARB_draw_buffers

	//-//-- 
	//- Ext: ARB_draw_buffers_blend
	bool ARB_draw_buffers_blend;

	proto::BlendEquationSeparateiARBFn blendEquationSeparateiARB;
	proto::BlendEquationiARBFn blendEquationiARB;
	proto::BlendFuncSeparateiARBFn blendFuncSeparateiARB;
	proto::BlendFunciARBFn blendFunciARB;
	//- end: ARB_draw_buffers_blend

	//-//-- 
	//- Ext: ARB_draw_elements_base_vertex
	bool ARB_draw_elements_base_vertex;

	// drawElementsBaseVertex already defined in 3.2_core
	// drawElementsInstancedBaseVertex already defined in 3.2_core
	// drawRangeElementsBaseVertex already defined in 3.2_core
	// multiDrawElementsBaseVertex already defined in 3.2_core
	//- end: ARB_draw_elements_base_vertex

	//-//-- 
	//- Ext: ARB_draw_indirect
	bool ARB_draw_indirect;

	// drawArraysIndirect already defined in 4.0_core
	// drawElementsIndirect already defined in 4.0_core
	//- end: ARB_draw_indirect

	//-//-- 
	//- Ext: ARB_draw_instanced
	bool ARB_draw_instanced;

	proto::DrawArraysInstancedARBFn drawArraysInstancedARB;
	proto::DrawElementsInstancedARBFn drawElementsInstancedARB;
	//- end: ARB_draw_instanced

	//-//-- 
	//- Ext: ARB_fragment_program
	bool ARB_fragment_program;

	proto::BindProgramARBFn bindProgramARB;
	proto::DeleteProgramsARBFn deleteProgramsARB;
	proto::GenProgramsARBFn genProgramsARB;
	proto::GetProgramEnvParameterdvARBFn getProgramEnvParameterdvARB;
	proto::GetProgramEnvParameterfvARBFn getProgramEnvParameterfvARB;
	proto::GetProgramLocalParameterdvARBFn getProgramLocalParameterdvARB;
	proto::GetProgramLocalParameterfvARBFn getProgramLocalParameterfvARB;
	proto::GetProgramStringARBFn getProgramStringARB;
	proto::GetProgramivARBFn getProgramivARB;
	proto::IsProgramARBFn isProgramARB;
	proto::ProgramEnvParameter4dARBFn programEnvParameter4dARB;
	proto::ProgramEnvParameter4dvARBFn programEnvParameter4dvARB;
	proto::ProgramEnvParameter4fARBFn programEnvParameter4fARB;
	proto::ProgramEnvParameter4fvARBFn programEnvParameter4fvARB;
	proto::ProgramLocalParameter4dARBFn programLocalParameter4dARB;
	proto::ProgramLocalParameter4dvARBFn programLocalParameter4dvARB;
	proto::ProgramLocalParameter4fARBFn programLocalParameter4fARB;
	proto::ProgramLocalParameter4fvARBFn programLocalParameter4fvARB;
	proto::ProgramStringARBFn programStringARB;
	//- end: ARB_fragment_program

	//-//-- 
	//- Ext: ARB_framebuffer_no_attachments
	bool ARB_framebuffer_no_attachments;

	// framebufferParameteri already defined in 4.3_core
	// getFramebufferParameteriv already defined in 4.3_core
	//- end: ARB_framebuffer_no_attachments

	//-//-- 
	//- Ext: ARB_framebuffer_object
	bool ARB_framebuffer_object;

	// bindFramebuffer already defined in 3.0_core
	// bindRenderbuffer already defined in 3.0_core
	// blitFramebuffer already defined in 3.0_core
	// checkFramebufferStatus already defined in 3.0_core
	// deleteFramebuffers already defined in 3.0_core
	// deleteRenderbuffers already defined in 3.0_core
	// framebufferRenderbuffer already defined in 3.0_core
	// framebufferTexture1D already defined in 3.0_core
	// framebufferTexture2D already defined in 3.0_core
	// framebufferTexture3D already defined in 3.0_core
	// framebufferTextureLayer already defined in 3.0_core
	// genFramebuffers already defined in 3.0_core
	// genRenderbuffers already defined in 3.0_core
	// generateMipmap already defined in 3.0_core
	// getFramebufferAttachmentParameteriv already defined in 3.0_core
	// getRenderbufferParameteriv already defined in 3.0_core
	// isFramebuffer already defined in 3.0_core
	// isRenderbuffer already defined in 3.0_core
	// renderbufferStorage already defined in 3.0_core
	// renderbufferStorageMultisample already defined in 3.0_core
	//- end: ARB_framebuffer_object

	//-//-- 
	//- Ext: ARB_geometry_shader4
	bool ARB_geometry_shader4;

	proto::FramebufferTextureARBFn framebufferTextureARB;
	proto::FramebufferTextureFaceARBFn framebufferTextureFaceARB;
	proto::FramebufferTextureLayerARBFn framebufferTextureLayerARB;
	proto::ProgramParameteriARBFn programParameteriARB;
	//- end: ARB_geometry_shader4

	//-//-- 
	//- Ext: ARB_get_program_binary
	bool ARB_get_program_binary;

	// getProgramBinary already defined in 4.1_core
	// programBinary already defined in 4.1_core
	// programParameteri already defined in 4.1_core
	//- end: ARB_get_program_binary

	//-//-- 
	//- Ext: ARB_get_texture_sub_image
	bool ARB_get_texture_sub_image;

	// getCompressedTextureSubImage already defined in 4.5_core
	// getTextureSubImage already defined in 4.5_core
	//- end: ARB_get_texture_sub_image

	//-//-- 
	//- Ext: ARB_gpu_shader_fp64
	bool ARB_gpu_shader_fp64;

	// getUniformdv already defined in 4.0_core
	// uniform1d already defined in 4.0_core
	// uniform1dv already defined in 4.0_core
	// uniform2d already defined in 4.0_core
	// uniform2dv already defined in 4.0_core
	// uniform3d already defined in 4.0_core
	// uniform3dv already defined in 4.0_core
	// uniform4d already defined in 4.0_core
	// uniform4dv already defined in 4.0_core
	// uniformMatrix2dv already defined in 4.0_core
	// uniformMatrix2x3dv already defined in 4.0_core
	// uniformMatrix2x4dv already defined in 4.0_core
	// uniformMatrix3dv already defined in 4.0_core
	// uniformMatrix3x2dv already defined in 4.0_core
	// uniformMatrix3x4dv already defined in 4.0_core
	// uniformMatrix4dv already defined in 4.0_core
	// uniformMatrix4x2dv already defined in 4.0_core
	// uniformMatrix4x3dv already defined in 4.0_core
	//- end: ARB_gpu_shader_fp64

	//-//-- 
	//- Ext: ARB_gpu_shader_int64
	bool ARB_gpu_shader_int64;

	proto::GetUniformi64vARBFn getUniformi64vARB;
	proto::GetUniformui64vARBFn getUniformui64vARB;
	proto::GetnUniformi64vARBFn getnUniformi64vARB;
	proto::GetnUniformui64vARBFn getnUniformui64vARB;
	proto::ProgramUniform1i64ARBFn programUniform1i64ARB;
	proto::ProgramUniform1i64vARBFn programUniform1i64vARB;
	proto::ProgramUniform1ui64ARBFn programUniform1ui64ARB;
	proto::ProgramUniform1ui64vARBFn programUniform1ui64vARB;
	proto::ProgramUniform2i64ARBFn programUniform2i64ARB;
	proto::ProgramUniform2i64vARBFn programUniform2i64vARB;
	proto::ProgramUniform2ui64ARBFn programUniform2ui64ARB;
	proto::ProgramUniform2ui64vARBFn programUniform2ui64vARB;
	proto::ProgramUniform3i64ARBFn programUniform3i64ARB;
	proto::ProgramUniform3i64vARBFn programUniform3i64vARB;
	proto::ProgramUniform3ui64ARBFn programUniform3ui64ARB;
	proto::ProgramUniform3ui64vARBFn programUniform3ui64vARB;
	proto::ProgramUniform4i64ARBFn programUniform4i64ARB;
	proto::ProgramUniform4i64vARBFn programUniform4i64vARB;
	proto::ProgramUniform4ui64ARBFn programUniform4ui64ARB;
	proto::ProgramUniform4ui64vARBFn programUniform4ui64vARB;
	proto::Uniform1i64ARBFn uniform1i64ARB;
	proto::Uniform1i64vARBFn uniform1i64vARB;
	proto::Uniform1ui64ARBFn uniform1ui64ARB;
	proto::Uniform1ui64vARBFn uniform1ui64vARB;
	proto::Uniform2i64ARBFn uniform2i64ARB;
	proto::Uniform2i64vARBFn uniform2i64vARB;
	proto::Uniform2ui64ARBFn uniform2ui64ARB;
	proto::Uniform2ui64vARBFn uniform2ui64vARB;
	proto::Uniform3i64ARBFn uniform3i64ARB;
	proto::Uniform3i64vARBFn uniform3i64vARB;
	proto::Uniform3ui64ARBFn uniform3ui64ARB;
	proto::Uniform3ui64vARBFn uniform3ui64vARB;
	proto::Uniform4i64ARBFn uniform4i64ARB;
	proto::Uniform4i64vARBFn uniform4i64vARB;
	proto::Uniform4ui64ARBFn uniform4ui64ARB;
	proto::Uniform4ui64vARBFn uniform4ui64vARB;
	//- end: ARB_gpu_shader_int64

	//-//-- 
	//- Ext: ARB_imaging
	bool ARB_imaging;

	// blendColor already defined in 1.4_core
	// blendEquation already defined in 1.4_core
	proto::ColorSubTableFn colorSubTable;
	proto::ColorTableFn colorTable;
	proto::ColorTableParameterfvFn colorTableParameterfv;
	proto::ColorTableParameterivFn colorTableParameteriv;
	proto::ConvolutionFilter1DFn convolutionFilter1D;
	proto::ConvolutionFilter2DFn convolutionFilter2D;
	proto::ConvolutionParameterfFn convolutionParameterf;
	proto::ConvolutionParameterfvFn convolutionParameterfv;
	proto::ConvolutionParameteriFn convolutionParameteri;
	proto::ConvolutionParameterivFn convolutionParameteriv;
	proto::CopyColorSubTableFn copyColorSubTable;
	proto::CopyColorTableFn copyColorTable;
	proto::CopyConvolutionFilter1DFn copyConvolutionFilter1D;
	proto::CopyConvolutionFilter2DFn copyConvolutionFilter2D;
	proto::GetColorTableFn getColorTable;
	proto::GetColorTableParameterfvFn getColorTableParameterfv;
	proto::GetColorTableParameterivFn getColorTableParameteriv;
	proto::GetConvolutionFilterFn getConvolutionFilter;
	proto::GetConvolutionParameterfvFn getConvolutionParameterfv;
	proto::GetConvolutionParameterivFn getConvolutionParameteriv;
	proto::GetHistogramFn getHistogram;
	proto::GetHistogramParameterfvFn getHistogramParameterfv;
	proto::GetHistogramParameterivFn getHistogramParameteriv;
	proto::GetMinmaxFn getMinmax;
	proto::GetMinmaxParameterfvFn getMinmaxParameterfv;
	proto::GetMinmaxParameterivFn getMinmaxParameteriv;
	proto::GetSeparableFilterFn getSeparableFilter;
	proto::HistogramFn histogram;
	proto::MinmaxFn minmax;
	proto::ResetHistogramFn resetHistogram;
	proto::ResetMinmaxFn resetMinmax;
	proto::SeparableFilter2DFn separableFilter2D;
	//- end: ARB_imaging

	//-//-- 
	//- Ext: ARB_indirect_parameters
	bool ARB_indirect_parameters;

	proto::MultiDrawArraysIndirectCountARBFn multiDrawArraysIndirectCountARB;
	proto::MultiDrawElementsIndirectCountARBFn multiDrawElementsIndirectCountARB;
	//- end: ARB_indirect_parameters

	//-//-- 
	//- Ext: ARB_instanced_arrays
	bool ARB_instanced_arrays;

	proto::VertexAttribDivisorARBFn vertexAttribDivisorARB;
	//- end: ARB_instanced_arrays

	//-//-- 
	//- Ext: ARB_internalformat_query
	bool ARB_internalformat_query;

	// getInternalformativ already defined in 4.2_core
	//- end: ARB_internalformat_query

	//-//-- 
	//- Ext: ARB_internalformat_query2
	bool ARB_internalformat_query2;

	// getInternalformati64v already defined in 4.3_core
	//- end: ARB_internalformat_query2

	//-//-- 
	//- Ext: ARB_invalidate_subdata
	bool ARB_invalidate_subdata;

	// invalidateBufferData already defined in 4.3_core
	// invalidateBufferSubData already defined in 4.3_core
	// invalidateFramebuffer already defined in 4.3_core
	// invalidateSubFramebuffer already defined in 4.3_core
	// invalidateTexImage already defined in 4.3_core
	// invalidateTexSubImage already defined in 4.3_core
	//- end: ARB_invalidate_subdata

	//-//-- 
	//- Ext: ARB_map_buffer_range
	bool ARB_map_buffer_range;

	// flushMappedBufferRange already defined in 3.0_core
	// mapBufferRange already defined in 3.0_core
	//- end: ARB_map_buffer_range

	//-//-- 
	//- Ext: ARB_matrix_palette
	bool ARB_matrix_palette;

	proto::CurrentPaletteMatrixARBFn currentPaletteMatrixARB;
	proto::MatrixIndexPointerARBFn matrixIndexPointerARB;
	proto::MatrixIndexubvARBFn matrixIndexubvARB;
	proto::MatrixIndexuivARBFn matrixIndexuivARB;
	proto::MatrixIndexusvARBFn matrixIndexusvARB;
	//- end: ARB_matrix_palette

	//-//-- 
	//- Ext: ARB_multi_bind
	bool ARB_multi_bind;

	// bindBuffersBase already defined in 4.4_core
	// bindBuffersRange already defined in 4.4_core
	// bindImageTextures already defined in 4.4_core
	// bindSamplers already defined in 4.4_core
	// bindTextures already defined in 4.4_core
	// bindVertexBuffers already defined in 4.4_core
	//- end: ARB_multi_bind

	//-//-- 
	//- Ext: ARB_multi_draw_indirect
	bool ARB_multi_draw_indirect;

	// multiDrawArraysIndirect already defined in 4.3_core
	// multiDrawElementsIndirect already defined in 4.3_core
	//- end: ARB_multi_draw_indirect

	//-//-- 
	//- Ext: ARB_multisample
	bool ARB_multisample;

	proto::SampleCoverageARBFn sampleCoverageARB;
	//- end: ARB_multisample

	//-//-- 
	//- Ext: ARB_multitexture
	bool ARB_multitexture;

	proto::ActiveTextureARBFn activeTextureARB;
	proto::ClientActiveTextureARBFn clientActiveTextureARB;
	proto::MultiTexCoord1dARBFn multiTexCoord1dARB;
	proto::MultiTexCoord1dvARBFn multiTexCoord1dvARB;
	proto::MultiTexCoord1fARBFn multiTexCoord1fARB;
	proto::MultiTexCoord1fvARBFn multiTexCoord1fvARB;
	proto::MultiTexCoord1iARBFn multiTexCoord1iARB;
	proto::MultiTexCoord1ivARBFn multiTexCoord1ivARB;
	proto::MultiTexCoord1sARBFn multiTexCoord1sARB;
	proto::MultiTexCoord1svARBFn multiTexCoord1svARB;
	proto::MultiTexCoord2dARBFn multiTexCoord2dARB;
	proto::MultiTexCoord2dvARBFn multiTexCoord2dvARB;
	proto::MultiTexCoord2fARBFn multiTexCoord2fARB;
	proto::MultiTexCoord2fvARBFn multiTexCoord2fvARB;
	proto::MultiTexCoord2iARBFn multiTexCoord2iARB;
	proto::MultiTexCoord2ivARBFn multiTexCoord2ivARB;
	proto::MultiTexCoord2sARBFn multiTexCoord2sARB;
	proto::MultiTexCoord2svARBFn multiTexCoord2svARB;
	proto::MultiTexCoord3dARBFn multiTexCoord3dARB;
	proto::MultiTexCoord3dvARBFn multiTexCoord3dvARB;
	proto::MultiTexCoord3fARBFn multiTexCoord3fARB;
	proto::MultiTexCoord3fvARBFn multiTexCoord3fvARB;
	proto::MultiTexCoord3iARBFn multiTexCoord3iARB;
	proto::MultiTexCoord3ivARBFn multiTexCoord3ivARB;
	proto::MultiTexCoord3sARBFn multiTexCoord3sARB;
	proto::MultiTexCoord3svARBFn multiTexCoord3svARB;
	proto::MultiTexCoord4dARBFn multiTexCoord4dARB;
	proto::MultiTexCoord4dvARBFn multiTexCoord4dvARB;
	proto::MultiTexCoord4fARBFn multiTexCoord4fARB;
	proto::MultiTexCoord4fvARBFn multiTexCoord4fvARB;
	proto::MultiTexCoord4iARBFn multiTexCoord4iARB;
	proto::MultiTexCoord4ivARBFn multiTexCoord4ivARB;
	proto::MultiTexCoord4sARBFn multiTexCoord4sARB;
	proto::MultiTexCoord4svARBFn multiTexCoord4svARB;
	//- end: ARB_multitexture

	//-//-- 
	//- Ext: ARB_occlusion_query
	bool ARB_occlusion_query;

	proto::BeginQueryARBFn beginQueryARB;
	proto::DeleteQueriesARBFn deleteQueriesARB;
	proto::EndQueryARBFn endQueryARB;
	proto::GenQueriesARBFn genQueriesARB;
	proto::GetQueryObjectivARBFn getQueryObjectivARB;
	proto::GetQueryObjectuivARBFn getQueryObjectuivARB;
	proto::GetQueryivARBFn getQueryivARB;
	proto::IsQueryARBFn isQueryARB;
	//- end: ARB_occlusion_query

	//-//-- 
	//- Ext: ARB_parallel_shader_compile
	bool ARB_parallel_shader_compile;

	proto::MaxShaderCompilerThreadsARBFn maxShaderCompilerThreadsARB;
	//- end: ARB_parallel_shader_compile

	//-//-- 
	//- Ext: ARB_point_parameters
	bool ARB_point_parameters;

	proto::PointParameterfARBFn pointParameterfARB;
	proto::PointParameterfvARBFn pointParameterfvARB;
	//- end: ARB_point_parameters

	//-//-- 
	//- Ext: ARB_program_interface_query
	bool ARB_program_interface_query;

	// getProgramInterfaceiv already defined in 4.3_core
	// getProgramResourceIndex already defined in 4.3_core
	// getProgramResourceLocation already defined in 4.3_core
	// getProgramResourceLocationIndex already defined in 4.3_core
	// getProgramResourceName already defined in 4.3_core
	// getProgramResourceiv already defined in 4.3_core
	//- end: ARB_program_interface_query

	//-//-- 
	//- Ext: ARB_provoking_vertex
	bool ARB_provoking_vertex;

	// provokingVertex already defined in 3.2_core
	//- end: ARB_provoking_vertex

	//-//-- 
	//- Ext: ARB_robustness
	bool ARB_robustness;

	proto::GetGraphicsResetStatusARBFn getGraphicsResetStatusARB;
	proto::GetnColorTableARBFn getnColorTableARB;
	proto::GetnCompressedTexImageARBFn getnCompressedTexImageARB;
	proto::GetnConvolutionFilterARBFn getnConvolutionFilterARB;
	proto::GetnHistogramARBFn getnHistogramARB;
	proto::GetnMapdvARBFn getnMapdvARB;
	proto::GetnMapfvARBFn getnMapfvARB;
	proto::GetnMapivARBFn getnMapivARB;
	proto::GetnMinmaxARBFn getnMinmaxARB;
	proto::GetnPixelMapfvARBFn getnPixelMapfvARB;
	proto::GetnPixelMapuivARBFn getnPixelMapuivARB;
	proto::GetnPixelMapusvARBFn getnPixelMapusvARB;
	proto::GetnPolygonStippleARBFn getnPolygonStippleARB;
	proto::GetnSeparableFilterARBFn getnSeparableFilterARB;
	proto::GetnTexImageARBFn getnTexImageARB;
	proto::GetnUniformdvARBFn getnUniformdvARB;
	proto::GetnUniformfvARBFn getnUniformfvARB;
	proto::GetnUniformivARBFn getnUniformivARB;
	proto::GetnUniformuivARBFn getnUniformuivARB;
	proto::ReadnPixelsARBFn readnPixelsARB;
	//- end: ARB_robustness

	//-//-- 
	//- Ext: ARB_sample_locations
	bool ARB_sample_locations;

	proto::EvaluateDepthValuesARBFn evaluateDepthValuesARB;
	proto::FramebufferSampleLocationsfvARBFn framebufferSampleLocationsfvARB;
	proto::NamedFramebufferSampleLocationsfvARBFn namedFramebufferSampleLocationsfvARB;
	//- end: ARB_sample_locations

	//-//-- 
	//- Ext: ARB_sample_shading
	bool ARB_sample_shading;

	proto::MinSampleShadingARBFn minSampleShadingARB;
	//- end: ARB_sample_shading

	//-//-- 
	//- Ext: ARB_sampler_objects
	bool ARB_sampler_objects;

	// bindSampler already defined in 3.3_core
	// deleteSamplers already defined in 3.3_core
	// genSamplers already defined in 3.3_core
	// getSamplerParameterIiv already defined in 3.3_core
	// getSamplerParameterIuiv already defined in 3.3_core
	// getSamplerParameterfv already defined in 3.3_core
	// getSamplerParameteriv already defined in 3.3_core
	// isSampler already defined in 3.3_core
	// samplerParameterIiv already defined in 3.3_core
	// samplerParameterIuiv already defined in 3.3_core
	// samplerParameterf already defined in 3.3_core
	// samplerParameterfv already defined in 3.3_core
	// samplerParameteri already defined in 3.3_core
	// samplerParameteriv already defined in 3.3_core
	//- end: ARB_sampler_objects

	//-//-- 
	//- Ext: ARB_separate_shader_objects
	bool ARB_separate_shader_objects;

	// activeShaderProgram already defined in 4.1_core
	// bindProgramPipeline already defined in 4.1_core
	// createShaderProgramv already defined in 4.1_core
	// deleteProgramPipelines already defined in 4.1_core
	// genProgramPipelines already defined in 4.1_core
	// getProgramPipelineInfoLog already defined in 4.1_core
	// getProgramPipelineiv already defined in 4.1_core
	// isProgramPipeline already defined in 4.1_core
	// programUniform1d already defined in 4.1_core
	// programUniform1dv already defined in 4.1_core
	// programUniform1f already defined in 4.1_core
	// programUniform1fv already defined in 4.1_core
	// programUniform1i already defined in 4.1_core
	// programUniform1iv already defined in 4.1_core
	// programUniform1ui already defined in 4.1_core
	// programUniform1uiv already defined in 4.1_core
	// programUniform2d already defined in 4.1_core
	// programUniform2dv already defined in 4.1_core
	// programUniform2f already defined in 4.1_core
	// programUniform2fv already defined in 4.1_core
	// programUniform2i already defined in 4.1_core
	// programUniform2iv already defined in 4.1_core
	// programUniform2ui already defined in 4.1_core
	// programUniform2uiv already defined in 4.1_core
	// programUniform3d already defined in 4.1_core
	// programUniform3dv already defined in 4.1_core
	// programUniform3f already defined in 4.1_core
	// programUniform3fv already defined in 4.1_core
	// programUniform3i already defined in 4.1_core
	// programUniform3iv already defined in 4.1_core
	// programUniform3ui already defined in 4.1_core
	// programUniform3uiv already defined in 4.1_core
	// programUniform4d already defined in 4.1_core
	// programUniform4dv already defined in 4.1_core
	// programUniform4f already defined in 4.1_core
	// programUniform4fv already defined in 4.1_core
	// programUniform4i already defined in 4.1_core
	// programUniform4iv already defined in 4.1_core
	// programUniform4ui already defined in 4.1_core
	// programUniform4uiv already defined in 4.1_core
	// programUniformMatrix2dv already defined in 4.1_core
	// programUniformMatrix2fv already defined in 4.1_core
	// programUniformMatrix2x3dv already defined in 4.1_core
	// programUniformMatrix2x3fv already defined in 4.1_core
	// programUniformMatrix2x4dv already defined in 4.1_core
	// programUniformMatrix2x4fv already defined in 4.1_core
	// programUniformMatrix3dv already defined in 4.1_core
	// programUniformMatrix3fv already defined in 4.1_core
	// programUniformMatrix3x2dv already defined in 4.1_core
	// programUniformMatrix3x2fv already defined in 4.1_core
	// programUniformMatrix3x4dv already defined in 4.1_core
	// programUniformMatrix3x4fv already defined in 4.1_core
	// programUniformMatrix4dv already defined in 4.1_core
	// programUniformMatrix4fv already defined in 4.1_core
	// programUniformMatrix4x2dv already defined in 4.1_core
	// programUniformMatrix4x2fv already defined in 4.1_core
	// programUniformMatrix4x3dv already defined in 4.1_core
	// programUniformMatrix4x3fv already defined in 4.1_core
	// useProgramStages already defined in 4.1_core
	// validateProgramPipeline already defined in 4.1_core
	//- end: ARB_separate_shader_objects

	//-//-- 
	//- Ext: ARB_shader_atomic_counters
	bool ARB_shader_atomic_counters;

	// getActiveAtomicCounterBufferiv already defined in 4.2_core
	//- end: ARB_shader_atomic_counters

	//-//-- 
	//- Ext: ARB_shader_image_load_store
	bool ARB_shader_image_load_store;

	// bindImageTexture already defined in 4.2_core
	// memoryBarrier already defined in 4.2_core
	//- end: ARB_shader_image_load_store

	//-//-- 
	//- Ext: ARB_shader_objects
	bool ARB_shader_objects;

	proto::AttachObjectARBFn attachObjectARB;
	proto::CompileShaderARBFn compileShaderARB;
	proto::CreateProgramObjectARBFn createProgramObjectARB;
	proto::CreateShaderObjectARBFn createShaderObjectARB;
	proto::DeleteObjectARBFn deleteObjectARB;
	proto::DetachObjectARBFn detachObjectARB;
	proto::GetActiveUniformARBFn getActiveUniformARB;
	proto::GetAttachedObjectsARBFn getAttachedObjectsARB;
	proto::GetHandleARBFn getHandleARB;
	proto::GetInfoLogARBFn getInfoLogARB;
	proto::GetObjectParameterfvARBFn getObjectParameterfvARB;
	proto::GetObjectParameterivARBFn getObjectParameterivARB;
	proto::GetShaderSourceARBFn getShaderSourceARB;
	proto::GetUniformLocationARBFn getUniformLocationARB;
	proto::GetUniformfvARBFn getUniformfvARB;
	proto::GetUniformivARBFn getUniformivARB;
	proto::LinkProgramARBFn linkProgramARB;
	proto::ShaderSourceARBFn shaderSourceARB;
	proto::Uniform1fARBFn uniform1fARB;
	proto::Uniform1fvARBFn uniform1fvARB;
	proto::Uniform1iARBFn uniform1iARB;
	proto::Uniform1ivARBFn uniform1ivARB;
	proto::Uniform2fARBFn uniform2fARB;
	proto::Uniform2fvARBFn uniform2fvARB;
	proto::Uniform2iARBFn uniform2iARB;
	proto::Uniform2ivARBFn uniform2ivARB;
	proto::Uniform3fARBFn uniform3fARB;
	proto::Uniform3fvARBFn uniform3fvARB;
	proto::Uniform3iARBFn uniform3iARB;
	proto::Uniform3ivARBFn uniform3ivARB;
	proto::Uniform4fARBFn uniform4fARB;
	proto::Uniform4fvARBFn uniform4fvARB;
	proto::Uniform4iARBFn uniform4iARB;
	proto::Uniform4ivARBFn uniform4ivARB;
	proto::UniformMatrix2fvARBFn uniformMatrix2fvARB;
	proto::UniformMatrix3fvARBFn uniformMatrix3fvARB;
	proto::UniformMatrix4fvARBFn uniformMatrix4fvARB;
	proto::UseProgramObjectARBFn useProgramObjectARB;
	proto::ValidateProgramARBFn validateProgramARB;
	//- end: ARB_shader_objects

	//-//-- 
	//- Ext: ARB_shader_storage_buffer_object
	bool ARB_shader_storage_buffer_object;

	// shaderStorageBlockBinding already defined in 4.3_core
	//- end: ARB_shader_storage_buffer_object

	//-//-- 
	//- Ext: ARB_shader_subroutine
	bool ARB_shader_subroutine;

	// getActiveSubroutineName already defined in 4.0_core
	// getActiveSubroutineUniformName already defined in 4.0_core
	// getActiveSubroutineUniformiv already defined in 4.0_core
	// getProgramStageiv already defined in 4.0_core
	// getSubroutineIndex already defined in 4.0_core
	// getSubroutineUniformLocation already defined in 4.0_core
	// getUniformSubroutineuiv already defined in 4.0_core
	// uniformSubroutinesuiv already defined in 4.0_core
	//- end: ARB_shader_subroutine

	//-//-- 
	//- Ext: ARB_shading_language_include
	bool ARB_shading_language_include;

	proto::CompileShaderIncludeARBFn compileShaderIncludeARB;
	proto::DeleteNamedStringARBFn deleteNamedStringARB;
	proto::GetNamedStringARBFn getNamedStringARB;
	proto::GetNamedStringivARBFn getNamedStringivARB;
	proto::IsNamedStringARBFn isNamedStringARB;
	proto::NamedStringARBFn namedStringARB;
	//- end: ARB_shading_language_include

	//-//-- 
	//- Ext: ARB_sparse_buffer
	bool ARB_sparse_buffer;

	proto::BufferPageCommitmentARBFn bufferPageCommitmentARB;
	proto::NamedBufferPageCommitmentARBFn namedBufferPageCommitmentARB;
	proto::NamedBufferPageCommitmentEXTFn namedBufferPageCommitmentEXT;
	//- end: ARB_sparse_buffer

	//-//-- 
	//- Ext: ARB_sparse_texture
	bool ARB_sparse_texture;

	proto::TexPageCommitmentARBFn texPageCommitmentARB;
	//- end: ARB_sparse_texture

	//-//-- 
	//- Ext: ARB_sync
	bool ARB_sync;

	// clientWaitSync already defined in 3.2_core
	// deleteSync already defined in 3.2_core
	// fenceSync already defined in 3.2_core
	// getInteger64v already defined in 3.2_core
	// getSynciv already defined in 3.2_core
	// isSync already defined in 3.2_core
	// waitSync already defined in 3.2_core
	//- end: ARB_sync

	//-//-- 
	//- Ext: ARB_tessellation_shader
	bool ARB_tessellation_shader;

	// patchParameterfv already defined in 4.0_core
	// patchParameteri already defined in 4.0_core
	//- end: ARB_tessellation_shader

	//-//-- 
	//- Ext: ARB_texture_barrier
	bool ARB_texture_barrier;

	// textureBarrier already defined in 4.5_core
	//- end: ARB_texture_barrier

	//-//-- 
	//- Ext: ARB_texture_buffer_object
	bool ARB_texture_buffer_object;

	proto::TexBufferARBFn texBufferARB;
	//- end: ARB_texture_buffer_object

	//-//-- 
	//- Ext: ARB_texture_buffer_range
	bool ARB_texture_buffer_range;

	// texBufferRange already defined in 4.3_core
	//- end: ARB_texture_buffer_range

	//-//-- 
	//- Ext: ARB_texture_compression
	bool ARB_texture_compression;

	proto::CompressedTexImage1DARBFn compressedTexImage1DARB;
	proto::CompressedTexImage2DARBFn compressedTexImage2DARB;
	proto::CompressedTexImage3DARBFn compressedTexImage3DARB;
	proto::CompressedTexSubImage1DARBFn compressedTexSubImage1DARB;
	proto::CompressedTexSubImage2DARBFn compressedTexSubImage2DARB;
	proto::CompressedTexSubImage3DARBFn compressedTexSubImage3DARB;
	proto::GetCompressedTexImageARBFn getCompressedTexImageARB;
	//- end: ARB_texture_compression

	//-//-- 
	//- Ext: ARB_texture_multisample
	bool ARB_texture_multisample;

	// getMultisamplefv already defined in 3.2_core
	// sampleMaski already defined in 3.2_core
	// texImage2DMultisample already defined in 3.2_core
	// texImage3DMultisample already defined in 3.2_core
	//- end: ARB_texture_multisample

	//-//-- 
	//- Ext: ARB_texture_storage
	bool ARB_texture_storage;

	// texStorage1D already defined in 4.2_core
	// texStorage2D already defined in 4.2_core
	// texStorage3D already defined in 4.2_core
	//- end: ARB_texture_storage

	//-//-- 
	//- Ext: ARB_texture_storage_multisample
	bool ARB_texture_storage_multisample;

	// texStorage2DMultisample already defined in 4.3_core
	// texStorage3DMultisample already defined in 4.3_core
	//- end: ARB_texture_storage_multisample

	//-//-- 
	//- Ext: ARB_texture_view
	bool ARB_texture_view;

	// textureView already defined in 4.3_core
	//- end: ARB_texture_view

	//-//-- 
	//- Ext: ARB_timer_query
	bool ARB_timer_query;

	// getQueryObjecti64v already defined in 3.3_core
	// getQueryObjectui64v already defined in 3.3_core
	// queryCounter already defined in 3.3_core
	//- end: ARB_timer_query

	//-//-- 
	//- Ext: ARB_transform_feedback2
	bool ARB_transform_feedback2;

	// bindTransformFeedback already defined in 4.0_core
	// deleteTransformFeedbacks already defined in 4.0_core
	// drawTransformFeedback already defined in 4.0_core
	// genTransformFeedbacks already defined in 4.0_core
	// isTransformFeedback already defined in 4.0_core
	// pauseTransformFeedback already defined in 4.0_core
	// resumeTransformFeedback already defined in 4.0_core
	//- end: ARB_transform_feedback2

	//-//-- 
	//- Ext: ARB_transform_feedback3
	bool ARB_transform_feedback3;

	// beginQueryIndexed already defined in 4.0_core
	// drawTransformFeedbackStream already defined in 4.0_core
	// endQueryIndexed already defined in 4.0_core
	// getQueryIndexediv already defined in 4.0_core
	//- end: ARB_transform_feedback3

	//-//-- 
	//- Ext: ARB_transform_feedback_instanced
	bool ARB_transform_feedback_instanced;

	// drawTransformFeedbackInstanced already defined in 4.2_core
	// drawTransformFeedbackStreamInstanced already defined in 4.2_core
	//- end: ARB_transform_feedback_instanced

	//-//-- 
	//- Ext: ARB_transpose_matrix
	bool ARB_transpose_matrix;

	proto::LoadTransposeMatrixdARBFn loadTransposeMatrixdARB;
	proto::LoadTransposeMatrixfARBFn loadTransposeMatrixfARB;
	proto::MultTransposeMatrixdARBFn multTransposeMatrixdARB;
	proto::MultTransposeMatrixfARBFn multTransposeMatrixfARB;
	//- end: ARB_transpose_matrix

	//-//-- 
	//- Ext: ARB_uniform_buffer_object
	bool ARB_uniform_buffer_object;

	// bindBufferBase already defined in 3.0_core
	// bindBufferRange already defined in 3.0_core
	// getActiveUniformBlockName already defined in 3.1_core
	// getActiveUniformBlockiv already defined in 3.1_core
	// getActiveUniformName already defined in 3.1_core
	// getActiveUniformsiv already defined in 3.1_core
	// getIntegeri_v already defined in 3.0_core
	// getUniformBlockIndex already defined in 3.1_core
	// getUniformIndices already defined in 3.1_core
	// uniformBlockBinding already defined in 3.1_core
	//- end: ARB_uniform_buffer_object

	//-//-- 
	//- Ext: ARB_vertex_array_object
	bool ARB_vertex_array_object;

	// bindVertexArray already defined in 3.0_core
	// deleteVertexArrays already defined in 3.0_core
	// genVertexArrays already defined in 3.0_core
	// isVertexArray already defined in 3.0_core
	//- end: ARB_vertex_array_object

	//-//-- 
	//- Ext: ARB_vertex_attrib_64bit
	bool ARB_vertex_attrib_64bit;

	// getVertexAttribLdv already defined in 4.1_core
	// vertexAttribL1d already defined in 4.1_core
	// vertexAttribL1dv already defined in 4.1_core
	// vertexAttribL2d already defined in 4.1_core
	// vertexAttribL2dv already defined in 4.1_core
	// vertexAttribL3d already defined in 4.1_core
	// vertexAttribL3dv already defined in 4.1_core
	// vertexAttribL4d already defined in 4.1_core
	// vertexAttribL4dv already defined in 4.1_core
	// vertexAttribLPointer already defined in 4.1_core
	//- end: ARB_vertex_attrib_64bit

	//-//-- 
	//- Ext: ARB_vertex_attrib_binding
	bool ARB_vertex_attrib_binding;

	// bindVertexBuffer already defined in 4.3_core
	// vertexAttribBinding already defined in 4.3_core
	// vertexAttribFormat already defined in 4.3_core
	// vertexAttribIFormat already defined in 4.3_core
	// vertexAttribLFormat already defined in 4.3_core
	// vertexBindingDivisor already defined in 4.3_core
	//- end: ARB_vertex_attrib_binding

	//-//-- 
	//- Ext: ARB_vertex_blend
	bool ARB_vertex_blend;

	proto::VertexBlendARBFn vertexBlendARB;
	proto::WeightPointerARBFn weightPointerARB;
	proto::WeightbvARBFn weightbvARB;
	proto::WeightdvARBFn weightdvARB;
	proto::WeightfvARBFn weightfvARB;
	proto::WeightivARBFn weightivARB;
	proto::WeightsvARBFn weightsvARB;
	proto::WeightubvARBFn weightubvARB;
	proto::WeightuivARBFn weightuivARB;
	proto::WeightusvARBFn weightusvARB;
	//- end: ARB_vertex_blend

	//-//-- 
	//- Ext: ARB_vertex_buffer_object
	bool ARB_vertex_buffer_object;

	proto::BindBufferARBFn bindBufferARB;
	proto::BufferDataARBFn bufferDataARB;
	proto::BufferSubDataARBFn bufferSubDataARB;
	proto::DeleteBuffersARBFn deleteBuffersARB;
	proto::GenBuffersARBFn genBuffersARB;
	proto::GetBufferParameterivARBFn getBufferParameterivARB;
	proto::GetBufferPointervARBFn getBufferPointervARB;
	proto::GetBufferSubDataARBFn getBufferSubDataARB;
	proto::IsBufferARBFn isBufferARB;
	proto::MapBufferARBFn mapBufferARB;
	proto::UnmapBufferARBFn unmapBufferARB;
	//- end: ARB_vertex_buffer_object

	//-//-- 
	//- Ext: ARB_vertex_program
	bool ARB_vertex_program;

	// bindProgramARB already defined in ARB_fragment_program
	// deleteProgramsARB already defined in ARB_fragment_program
	proto::DisableVertexAttribArrayARBFn disableVertexAttribArrayARB;
	proto::EnableVertexAttribArrayARBFn enableVertexAttribArrayARB;
	// genProgramsARB already defined in ARB_fragment_program
	// getProgramEnvParameterdvARB already defined in ARB_fragment_program
	// getProgramEnvParameterfvARB already defined in ARB_fragment_program
	// getProgramLocalParameterdvARB already defined in ARB_fragment_program
	// getProgramLocalParameterfvARB already defined in ARB_fragment_program
	// getProgramStringARB already defined in ARB_fragment_program
	// getProgramivARB already defined in ARB_fragment_program
	proto::GetVertexAttribPointervARBFn getVertexAttribPointervARB;
	proto::GetVertexAttribdvARBFn getVertexAttribdvARB;
	proto::GetVertexAttribfvARBFn getVertexAttribfvARB;
	proto::GetVertexAttribivARBFn getVertexAttribivARB;
	// isProgramARB already defined in ARB_fragment_program
	// programEnvParameter4dARB already defined in ARB_fragment_program
	// programEnvParameter4dvARB already defined in ARB_fragment_program
	// programEnvParameter4fARB already defined in ARB_fragment_program
	// programEnvParameter4fvARB already defined in ARB_fragment_program
	// programLocalParameter4dARB already defined in ARB_fragment_program
	// programLocalParameter4dvARB already defined in ARB_fragment_program
	// programLocalParameter4fARB already defined in ARB_fragment_program
	// programLocalParameter4fvARB already defined in ARB_fragment_program
	// programStringARB already defined in ARB_fragment_program
	proto::VertexAttrib1dARBFn vertexAttrib1dARB;
	proto::VertexAttrib1dvARBFn vertexAttrib1dvARB;
	proto::VertexAttrib1fARBFn vertexAttrib1fARB;
	proto::VertexAttrib1fvARBFn vertexAttrib1fvARB;
	proto::VertexAttrib1sARBFn vertexAttrib1sARB;
	proto::VertexAttrib1svARBFn vertexAttrib1svARB;
	proto::VertexAttrib2dARBFn vertexAttrib2dARB;
	proto::VertexAttrib2dvARBFn vertexAttrib2dvARB;
	proto::VertexAttrib2fARBFn vertexAttrib2fARB;
	proto::VertexAttrib2fvARBFn vertexAttrib2fvARB;
	proto::VertexAttrib2sARBFn vertexAttrib2sARB;
	proto::VertexAttrib2svARBFn vertexAttrib2svARB;
	proto::VertexAttrib3dARBFn vertexAttrib3dARB;
	proto::VertexAttrib3dvARBFn vertexAttrib3dvARB;
	proto::VertexAttrib3fARBFn vertexAttrib3fARB;
	proto::VertexAttrib3fvARBFn vertexAttrib3fvARB;
	proto::VertexAttrib3sARBFn vertexAttrib3sARB;
	proto::VertexAttrib3svARBFn vertexAttrib3svARB;
	proto::VertexAttrib4NbvARBFn vertexAttrib4NbvARB;
	proto::VertexAttrib4NivARBFn vertexAttrib4NivARB;
	proto::VertexAttrib4NsvARBFn vertexAttrib4NsvARB;
	proto::VertexAttrib4NubARBFn vertexAttrib4NubARB;
	proto::VertexAttrib4NubvARBFn vertexAttrib4NubvARB;
	proto::VertexAttrib4NuivARBFn vertexAttrib4NuivARB;
	proto::VertexAttrib4NusvARBFn vertexAttrib4NusvARB;
	proto::VertexAttrib4bvARBFn vertexAttrib4bvARB;
	proto::VertexAttrib4dARBFn vertexAttrib4dARB;
	proto::VertexAttrib4dvARBFn vertexAttrib4dvARB;
	proto::VertexAttrib4fARBFn vertexAttrib4fARB;
	proto::VertexAttrib4fvARBFn vertexAttrib4fvARB;
	proto::VertexAttrib4ivARBFn vertexAttrib4ivARB;
	proto::VertexAttrib4sARBFn vertexAttrib4sARB;
	proto::VertexAttrib4svARBFn vertexAttrib4svARB;
	proto::VertexAttrib4ubvARBFn vertexAttrib4ubvARB;
	proto::VertexAttrib4uivARBFn vertexAttrib4uivARB;
	proto::VertexAttrib4usvARBFn vertexAttrib4usvARB;
	proto::VertexAttribPointerARBFn vertexAttribPointerARB;
	//- end: ARB_vertex_program

	//-//-- 
	//- Ext: ARB_vertex_shader
	bool ARB_vertex_shader;

	proto::BindAttribLocationARBFn bindAttribLocationARB;
	// disableVertexAttribArrayARB already defined in ARB_vertex_program
	// enableVertexAttribArrayARB already defined in ARB_vertex_program
	proto::GetActiveAttribARBFn getActiveAttribARB;
	proto::GetAttribLocationARBFn getAttribLocationARB;
	// getVertexAttribPointervARB already defined in ARB_vertex_program
	// getVertexAttribdvARB already defined in ARB_vertex_program
	// getVertexAttribfvARB already defined in ARB_vertex_program
	// getVertexAttribivARB already defined in ARB_vertex_program
	// vertexAttrib1dARB already defined in ARB_vertex_program
	// vertexAttrib1dvARB already defined in ARB_vertex_program
	// vertexAttrib1fARB already defined in ARB_vertex_program
	// vertexAttrib1fvARB already defined in ARB_vertex_program
	// vertexAttrib1sARB already defined in ARB_vertex_program
	// vertexAttrib1svARB already defined in ARB_vertex_program
	// vertexAttrib2dARB already defined in ARB_vertex_program
	// vertexAttrib2dvARB already defined in ARB_vertex_program
	// vertexAttrib2fARB already defined in ARB_vertex_program
	// vertexAttrib2fvARB already defined in ARB_vertex_program
	// vertexAttrib2sARB already defined in ARB_vertex_program
	// vertexAttrib2svARB already defined in ARB_vertex_program
	// vertexAttrib3dARB already defined in ARB_vertex_program
	// vertexAttrib3dvARB already defined in ARB_vertex_program
	// vertexAttrib3fARB already defined in ARB_vertex_program
	// vertexAttrib3fvARB already defined in ARB_vertex_program
	// vertexAttrib3sARB already defined in ARB_vertex_program
	// vertexAttrib3svARB already defined in ARB_vertex_program
	// vertexAttrib4NbvARB already defined in ARB_vertex_program
	// vertexAttrib4NivARB already defined in ARB_vertex_program
	// vertexAttrib4NsvARB already defined in ARB_vertex_program
	// vertexAttrib4NubARB already defined in ARB_vertex_program
	// vertexAttrib4NubvARB already defined in ARB_vertex_program
	// vertexAttrib4NuivARB already defined in ARB_vertex_program
	// vertexAttrib4NusvARB already defined in ARB_vertex_program
	// vertexAttrib4bvARB already defined in ARB_vertex_program
	// vertexAttrib4dARB already defined in ARB_vertex_program
	// vertexAttrib4dvARB already defined in ARB_vertex_program
	// vertexAttrib4fARB already defined in ARB_vertex_program
	// vertexAttrib4fvARB already defined in ARB_vertex_program
	// vertexAttrib4ivARB already defined in ARB_vertex_program
	// vertexAttrib4sARB already defined in ARB_vertex_program
	// vertexAttrib4svARB already defined in ARB_vertex_program
	// vertexAttrib4ubvARB already defined in ARB_vertex_program
	// vertexAttrib4uivARB already defined in ARB_vertex_program
	// vertexAttrib4usvARB already defined in ARB_vertex_program
	// vertexAttribPointerARB already defined in ARB_vertex_program
	//- end: ARB_vertex_shader

	//-//-- 
	//- Ext: ARB_vertex_type_2_10_10_10_rev
	bool ARB_vertex_type_2_10_10_10_rev;

	// colorP3ui already defined in 3.3_compatibility
	// colorP3uiv already defined in 3.3_compatibility
	// colorP4ui already defined in 3.3_compatibility
	// colorP4uiv already defined in 3.3_compatibility
	// multiTexCoordP1ui already defined in 3.3_compatibility
	// multiTexCoordP1uiv already defined in 3.3_compatibility
	// multiTexCoordP2ui already defined in 3.3_compatibility
	// multiTexCoordP2uiv already defined in 3.3_compatibility
	// multiTexCoordP3ui already defined in 3.3_compatibility
	// multiTexCoordP3uiv already defined in 3.3_compatibility
	// multiTexCoordP4ui already defined in 3.3_compatibility
	// multiTexCoordP4uiv already defined in 3.3_compatibility
	// normalP3ui already defined in 3.3_compatibility
	// normalP3uiv already defined in 3.3_compatibility
	// secondaryColorP3ui already defined in 3.3_compatibility
	// secondaryColorP3uiv already defined in 3.3_compatibility
	// texCoordP1ui already defined in 3.3_compatibility
	// texCoordP1uiv already defined in 3.3_compatibility
	// texCoordP2ui already defined in 3.3_compatibility
	// texCoordP2uiv already defined in 3.3_compatibility
	// texCoordP3ui already defined in 3.3_compatibility
	// texCoordP3uiv already defined in 3.3_compatibility
	// texCoordP4ui already defined in 3.3_compatibility
	// texCoordP4uiv already defined in 3.3_compatibility
	// vertexAttribP1ui already defined in 3.3_core
	// vertexAttribP1uiv already defined in 3.3_core
	// vertexAttribP2ui already defined in 3.3_core
	// vertexAttribP2uiv already defined in 3.3_core
	// vertexAttribP3ui already defined in 3.3_core
	// vertexAttribP3uiv already defined in 3.3_core
	// vertexAttribP4ui already defined in 3.3_core
	// vertexAttribP4uiv already defined in 3.3_core
	// vertexP2ui already defined in 3.3_compatibility
	// vertexP2uiv already defined in 3.3_compatibility
	// vertexP3ui already defined in 3.3_compatibility
	// vertexP3uiv already defined in 3.3_compatibility
	// vertexP4ui already defined in 3.3_compatibility
	// vertexP4uiv already defined in 3.3_compatibility
	//- end: ARB_vertex_type_2_10_10_10_rev

	//-//-- 
	//- Ext: ARB_viewport_array
	bool ARB_viewport_array;

	// depthRangeArrayv already defined in 4.1_core
	// depthRangeIndexed already defined in 4.1_core
	// getDoublei_v already defined in 4.1_core
	// getFloati_v already defined in 4.1_core
	// scissorArrayv already defined in 4.1_core
	// scissorIndexed already defined in 4.1_core
	// scissorIndexedv already defined in 4.1_core
	// viewportArrayv already defined in 4.1_core
	// viewportIndexedf already defined in 4.1_core
	// viewportIndexedfv already defined in 4.1_core
	//- end: ARB_viewport_array

	//-//-- 
	//- Ext: ARB_window_pos
	bool ARB_window_pos;

	proto::WindowPos2dARBFn windowPos2dARB;
	proto::WindowPos2dvARBFn windowPos2dvARB;
	proto::WindowPos2fARBFn windowPos2fARB;
	proto::WindowPos2fvARBFn windowPos2fvARB;
	proto::WindowPos2iARBFn windowPos2iARB;
	proto::WindowPos2ivARBFn windowPos2ivARB;
	proto::WindowPos2sARBFn windowPos2sARB;
	proto::WindowPos2svARBFn windowPos2svARB;
	proto::WindowPos3dARBFn windowPos3dARB;
	proto::WindowPos3dvARBFn windowPos3dvARB;
	proto::WindowPos3fARBFn windowPos3fARB;
	proto::WindowPos3fvARBFn windowPos3fvARB;
	proto::WindowPos3iARBFn windowPos3iARB;
	proto::WindowPos3ivARBFn windowPos3ivARB;
	proto::WindowPos3sARBFn windowPos3sARB;
	proto::WindowPos3svARBFn windowPos3svARB;
	//- end: ARB_window_pos

	//-//-- 
	//- Ext: ATI_draw_buffers
	bool ATI_draw_buffers;

	proto::DrawBuffersATIFn drawBuffersATI;
	//- end: ATI_draw_buffers

	//-//-- 
	//- Ext: ATI_element_array
	bool ATI_element_array;

	proto::DrawElementArrayATIFn drawElementArrayATI;
	proto::DrawRangeElementArrayATIFn drawRangeElementArrayATI;
	proto::ElementPointerATIFn elementPointerATI;
	//- end: ATI_element_array

	//-//-- 
	//- Ext: ATI_envmap_bumpmap
	bool ATI_envmap_bumpmap;

	proto::GetTexBumpParameterfvATIFn getTexBumpParameterfvATI;
	proto::GetTexBumpParameterivATIFn getTexBumpParameterivATI;
	proto::TexBumpParameterfvATIFn texBumpParameterfvATI;
	proto::TexBumpParameterivATIFn texBumpParameterivATI;
	//- end: ATI_envmap_bumpmap

	//-//-- 
	//- Ext: ATI_fragment_shader
	bool ATI_fragment_shader;

	proto::AlphaFragmentOp1ATIFn alphaFragmentOp1ATI;
	proto::AlphaFragmentOp2ATIFn alphaFragmentOp2ATI;
	proto::AlphaFragmentOp3ATIFn alphaFragmentOp3ATI;
	proto::BeginFragmentShaderATIFn beginFragmentShaderATI;
	proto::BindFragmentShaderATIFn bindFragmentShaderATI;
	proto::ColorFragmentOp1ATIFn colorFragmentOp1ATI;
	proto::ColorFragmentOp2ATIFn colorFragmentOp2ATI;
	proto::ColorFragmentOp3ATIFn colorFragmentOp3ATI;
	proto::DeleteFragmentShaderATIFn deleteFragmentShaderATI;
	proto::EndFragmentShaderATIFn endFragmentShaderATI;
	proto::GenFragmentShadersATIFn genFragmentShadersATI;
	proto::PassTexCoordATIFn passTexCoordATI;
	proto::SampleMapATIFn sampleMapATI;
	proto::SetFragmentShaderConstantATIFn setFragmentShaderConstantATI;
	//- end: ATI_fragment_shader

	//-//-- 
	//- Ext: ATI_map_object_buffer
	bool ATI_map_object_buffer;

	proto::MapObjectBufferATIFn mapObjectBufferATI;
	proto::UnmapObjectBufferATIFn unmapObjectBufferATI;
	//- end: ATI_map_object_buffer

	//-//-- 
	//- Ext: ATI_pn_triangles
	bool ATI_pn_triangles;

	proto::PNTrianglesfATIFn pNTrianglesfATI;
	proto::PNTrianglesiATIFn pNTrianglesiATI;
	//- end: ATI_pn_triangles

	//-//-- 
	//- Ext: ATI_separate_stencil
	bool ATI_separate_stencil;

	proto::StencilFuncSeparateATIFn stencilFuncSeparateATI;
	proto::StencilOpSeparateATIFn stencilOpSeparateATI;
	//- end: ATI_separate_stencil

	//-//-- 
	//- Ext: ATI_vertex_array_object
	bool ATI_vertex_array_object;

	proto::ArrayObjectATIFn arrayObjectATI;
	proto::FreeObjectBufferATIFn freeObjectBufferATI;
	proto::GetArrayObjectfvATIFn getArrayObjectfvATI;
	proto::GetArrayObjectivATIFn getArrayObjectivATI;
	proto::GetObjectBufferfvATIFn getObjectBufferfvATI;
	proto::GetObjectBufferivATIFn getObjectBufferivATI;
	proto::GetVariantArrayObjectfvATIFn getVariantArrayObjectfvATI;
	proto::GetVariantArrayObjectivATIFn getVariantArrayObjectivATI;
	proto::IsObjectBufferATIFn isObjectBufferATI;
	proto::NewObjectBufferATIFn newObjectBufferATI;
	proto::UpdateObjectBufferATIFn updateObjectBufferATI;
	proto::VariantArrayObjectATIFn variantArrayObjectATI;
	//- end: ATI_vertex_array_object

	//-//-- 
	//- Ext: ATI_vertex_attrib_array_object
	bool ATI_vertex_attrib_array_object;

	proto::GetVertexAttribArrayObjectfvATIFn getVertexAttribArrayObjectfvATI;
	proto::GetVertexAttribArrayObjectivATIFn getVertexAttribArrayObjectivATI;
	proto::VertexAttribArrayObjectATIFn vertexAttribArrayObjectATI;
	//- end: ATI_vertex_attrib_array_object

	//-//-- 
	//- Ext: ATI_vertex_streams
	bool ATI_vertex_streams;

	proto::ClientActiveVertexStreamATIFn clientActiveVertexStreamATI;
	proto::NormalStream3bATIFn normalStream3bATI;
	proto::NormalStream3bvATIFn normalStream3bvATI;
	proto::NormalStream3dATIFn normalStream3dATI;
	proto::NormalStream3dvATIFn normalStream3dvATI;
	proto::NormalStream3fATIFn normalStream3fATI;
	proto::NormalStream3fvATIFn normalStream3fvATI;
	proto::NormalStream3iATIFn normalStream3iATI;
	proto::NormalStream3ivATIFn normalStream3ivATI;
	proto::NormalStream3sATIFn normalStream3sATI;
	proto::NormalStream3svATIFn normalStream3svATI;
	proto::VertexBlendEnvfATIFn vertexBlendEnvfATI;
	proto::VertexBlendEnviATIFn vertexBlendEnviATI;
	proto::VertexStream1dATIFn vertexStream1dATI;
	proto::VertexStream1dvATIFn vertexStream1dvATI;
	proto::VertexStream1fATIFn vertexStream1fATI;
	proto::VertexStream1fvATIFn vertexStream1fvATI;
	proto::VertexStream1iATIFn vertexStream1iATI;
	proto::VertexStream1ivATIFn vertexStream1ivATI;
	proto::VertexStream1sATIFn vertexStream1sATI;
	proto::VertexStream1svATIFn vertexStream1svATI;
	proto::VertexStream2dATIFn vertexStream2dATI;
	proto::VertexStream2dvATIFn vertexStream2dvATI;
	proto::VertexStream2fATIFn vertexStream2fATI;
	proto::VertexStream2fvATIFn vertexStream2fvATI;
	proto::VertexStream2iATIFn vertexStream2iATI;
	proto::VertexStream2ivATIFn vertexStream2ivATI;
	proto::VertexStream2sATIFn vertexStream2sATI;
	proto::VertexStream2svATIFn vertexStream2svATI;
	proto::VertexStream3dATIFn vertexStream3dATI;
	proto::VertexStream3dvATIFn vertexStream3dvATI;
	proto::VertexStream3fATIFn vertexStream3fATI;
	proto::VertexStream3fvATIFn vertexStream3fvATI;
	proto::VertexStream3iATIFn vertexStream3iATI;
	proto::VertexStream3ivATIFn vertexStream3ivATI;
	proto::VertexStream3sATIFn vertexStream3sATI;
	proto::VertexStream3svATIFn vertexStream3svATI;
	proto::VertexStream4dATIFn vertexStream4dATI;
	proto::VertexStream4dvATIFn vertexStream4dvATI;
	proto::VertexStream4fATIFn vertexStream4fATI;
	proto::VertexStream4fvATIFn vertexStream4fvATI;
	proto::VertexStream4iATIFn vertexStream4iATI;
	proto::VertexStream4ivATIFn vertexStream4ivATI;
	proto::VertexStream4sATIFn vertexStream4sATI;
	proto::VertexStream4svATIFn vertexStream4svATI;
	//- end: ATI_vertex_streams

	//-//-- 
	//- Ext: EXT_bindable_uniform
	bool EXT_bindable_uniform;

	proto::GetUniformBufferSizeEXTFn getUniformBufferSizeEXT;
	proto::GetUniformOffsetEXTFn getUniformOffsetEXT;
	proto::UniformBufferEXTFn uniformBufferEXT;
	//- end: EXT_bindable_uniform

	//-//-- 
	//- Ext: EXT_blend_color
	bool EXT_blend_color;

	proto::BlendColorEXTFn blendColorEXT;
	//- end: EXT_blend_color

	//-//-- 
	//- Ext: EXT_blend_equation_separate
	bool EXT_blend_equation_separate;

	proto::BlendEquationSeparateEXTFn blendEquationSeparateEXT;
	//- end: EXT_blend_equation_separate

	//-//-- 
	//- Ext: EXT_blend_func_separate
	bool EXT_blend_func_separate;

	proto::BlendFuncSeparateEXTFn blendFuncSeparateEXT;
	//- end: EXT_blend_func_separate

	//-//-- 
	//- Ext: EXT_blend_minmax
	bool EXT_blend_minmax;

	proto::BlendEquationEXTFn blendEquationEXT;
	//- end: EXT_blend_minmax

	//-//-- 
	//- Ext: EXT_color_subtable
	bool EXT_color_subtable;

	proto::ColorSubTableEXTFn colorSubTableEXT;
	proto::CopyColorSubTableEXTFn copyColorSubTableEXT;
	//- end: EXT_color_subtable

	//-//-- 
	//- Ext: EXT_compiled_vertex_array
	bool EXT_compiled_vertex_array;

	proto::LockArraysEXTFn lockArraysEXT;
	proto::UnlockArraysEXTFn unlockArraysEXT;
	//- end: EXT_compiled_vertex_array

	//-//-- 
	//- Ext: EXT_convolution
	bool EXT_convolution;

	proto::ConvolutionFilter1DEXTFn convolutionFilter1DEXT;
	proto::ConvolutionFilter2DEXTFn convolutionFilter2DEXT;
	proto::ConvolutionParameterfEXTFn convolutionParameterfEXT;
	proto::ConvolutionParameterfvEXTFn convolutionParameterfvEXT;
	proto::ConvolutionParameteriEXTFn convolutionParameteriEXT;
	proto::ConvolutionParameterivEXTFn convolutionParameterivEXT;
	proto::CopyConvolutionFilter1DEXTFn copyConvolutionFilter1DEXT;
	proto::CopyConvolutionFilter2DEXTFn copyConvolutionFilter2DEXT;
	proto::GetConvolutionFilterEXTFn getConvolutionFilterEXT;
	proto::GetConvolutionParameterfvEXTFn getConvolutionParameterfvEXT;
	proto::GetConvolutionParameterivEXTFn getConvolutionParameterivEXT;
	proto::GetSeparableFilterEXTFn getSeparableFilterEXT;
	proto::SeparableFilter2DEXTFn separableFilter2DEXT;
	//- end: EXT_convolution

	//-//-- 
	//- Ext: EXT_coordinate_frame
	bool EXT_coordinate_frame;

	proto::Binormal3bEXTFn binormal3bEXT;
	proto::Binormal3bvEXTFn binormal3bvEXT;
	proto::Binormal3dEXTFn binormal3dEXT;
	proto::Binormal3dvEXTFn binormal3dvEXT;
	proto::Binormal3fEXTFn binormal3fEXT;
	proto::Binormal3fvEXTFn binormal3fvEXT;
	proto::Binormal3iEXTFn binormal3iEXT;
	proto::Binormal3ivEXTFn binormal3ivEXT;
	proto::Binormal3sEXTFn binormal3sEXT;
	proto::Binormal3svEXTFn binormal3svEXT;
	proto::BinormalPointerEXTFn binormalPointerEXT;
	proto::Tangent3bEXTFn tangent3bEXT;
	proto::Tangent3bvEXTFn tangent3bvEXT;
	proto::Tangent3dEXTFn tangent3dEXT;
	proto::Tangent3dvEXTFn tangent3dvEXT;
	proto::Tangent3fEXTFn tangent3fEXT;
	proto::Tangent3fvEXTFn tangent3fvEXT;
	proto::Tangent3iEXTFn tangent3iEXT;
	proto::Tangent3ivEXTFn tangent3ivEXT;
	proto::Tangent3sEXTFn tangent3sEXT;
	proto::Tangent3svEXTFn tangent3svEXT;
	proto::TangentPointerEXTFn tangentPointerEXT;
	//- end: EXT_coordinate_frame

	//-//-- 
	//- Ext: EXT_copy_texture
	bool EXT_copy_texture;

	proto::CopyTexImage1DEXTFn copyTexImage1DEXT;
	proto::CopyTexImage2DEXTFn copyTexImage2DEXT;
	proto::CopyTexSubImage1DEXTFn copyTexSubImage1DEXT;
	proto::CopyTexSubImage2DEXTFn copyTexSubImage2DEXT;
	proto::CopyTexSubImage3DEXTFn copyTexSubImage3DEXT;
	//- end: EXT_copy_texture

	//-//-- 
	//- Ext: EXT_cull_vertex
	bool EXT_cull_vertex;

	proto::CullParameterdvEXTFn cullParameterdvEXT;
	proto::CullParameterfvEXTFn cullParameterfvEXT;
	//- end: EXT_cull_vertex

	//-//-- 
	//- Ext: EXT_debug_label
	bool EXT_debug_label;

	proto::GetObjectLabelEXTFn getObjectLabelEXT;
	proto::LabelObjectEXTFn labelObjectEXT;
	//- end: EXT_debug_label

	//-//-- 
	//- Ext: EXT_debug_marker
	bool EXT_debug_marker;

	proto::InsertEventMarkerEXTFn insertEventMarkerEXT;
	proto::PopGroupMarkerEXTFn popGroupMarkerEXT;
	proto::PushGroupMarkerEXTFn pushGroupMarkerEXT;
	//- end: EXT_debug_marker

	//-//-- 
	//- Ext: EXT_depth_bounds_test
	bool EXT_depth_bounds_test;

	proto::DepthBoundsEXTFn depthBoundsEXT;
	//- end: EXT_depth_bounds_test

	//-//-- 
	//- Ext: EXT_direct_state_access
	bool EXT_direct_state_access;

	proto::BindMultiTextureEXTFn bindMultiTextureEXT;
	proto::CheckNamedFramebufferStatusEXTFn checkNamedFramebufferStatusEXT;
	proto::ClearNamedBufferDataEXTFn clearNamedBufferDataEXT;
	proto::ClearNamedBufferSubDataEXTFn clearNamedBufferSubDataEXT;
	proto::ClientAttribDefaultEXTFn clientAttribDefaultEXT;
	proto::CompressedMultiTexImage1DEXTFn compressedMultiTexImage1DEXT;
	proto::CompressedMultiTexImage2DEXTFn compressedMultiTexImage2DEXT;
	proto::CompressedMultiTexImage3DEXTFn compressedMultiTexImage3DEXT;
	proto::CompressedMultiTexSubImage1DEXTFn compressedMultiTexSubImage1DEXT;
	proto::CompressedMultiTexSubImage2DEXTFn compressedMultiTexSubImage2DEXT;
	proto::CompressedMultiTexSubImage3DEXTFn compressedMultiTexSubImage3DEXT;
	proto::CompressedTextureImage1DEXTFn compressedTextureImage1DEXT;
	proto::CompressedTextureImage2DEXTFn compressedTextureImage2DEXT;
	proto::CompressedTextureImage3DEXTFn compressedTextureImage3DEXT;
	proto::CompressedTextureSubImage1DEXTFn compressedTextureSubImage1DEXT;
	proto::CompressedTextureSubImage2DEXTFn compressedTextureSubImage2DEXT;
	proto::CompressedTextureSubImage3DEXTFn compressedTextureSubImage3DEXT;
	proto::CopyMultiTexImage1DEXTFn copyMultiTexImage1DEXT;
	proto::CopyMultiTexImage2DEXTFn copyMultiTexImage2DEXT;
	proto::CopyMultiTexSubImage1DEXTFn copyMultiTexSubImage1DEXT;
	proto::CopyMultiTexSubImage2DEXTFn copyMultiTexSubImage2DEXT;
	proto::CopyMultiTexSubImage3DEXTFn copyMultiTexSubImage3DEXT;
	proto::CopyTextureImage1DEXTFn copyTextureImage1DEXT;
	proto::CopyTextureImage2DEXTFn copyTextureImage2DEXT;
	proto::CopyTextureSubImage1DEXTFn copyTextureSubImage1DEXT;
	proto::CopyTextureSubImage2DEXTFn copyTextureSubImage2DEXT;
	proto::CopyTextureSubImage3DEXTFn copyTextureSubImage3DEXT;
	proto::DisableClientStateIndexedEXTFn disableClientStateIndexedEXT;
	proto::DisableClientStateiEXTFn disableClientStateiEXT;
	proto::DisableIndexedEXTFn disableIndexedEXT;
	proto::DisableVertexArrayAttribEXTFn disableVertexArrayAttribEXT;
	proto::DisableVertexArrayEXTFn disableVertexArrayEXT;
	proto::EnableClientStateIndexedEXTFn enableClientStateIndexedEXT;
	proto::EnableClientStateiEXTFn enableClientStateiEXT;
	proto::EnableIndexedEXTFn enableIndexedEXT;
	proto::EnableVertexArrayAttribEXTFn enableVertexArrayAttribEXT;
	proto::EnableVertexArrayEXTFn enableVertexArrayEXT;
	proto::FlushMappedNamedBufferRangeEXTFn flushMappedNamedBufferRangeEXT;
	proto::FramebufferDrawBufferEXTFn framebufferDrawBufferEXT;
	proto::FramebufferDrawBuffersEXTFn framebufferDrawBuffersEXT;
	proto::FramebufferReadBufferEXTFn framebufferReadBufferEXT;
	proto::GenerateMultiTexMipmapEXTFn generateMultiTexMipmapEXT;
	proto::GenerateTextureMipmapEXTFn generateTextureMipmapEXT;
	proto::GetBooleanIndexedvEXTFn getBooleanIndexedvEXT;
	proto::GetCompressedMultiTexImageEXTFn getCompressedMultiTexImageEXT;
	proto::GetCompressedTextureImageEXTFn getCompressedTextureImageEXT;
	proto::GetDoubleIndexedvEXTFn getDoubleIndexedvEXT;
	proto::GetDoublei_vEXTFn getDoublei_vEXT;
	proto::GetFloatIndexedvEXTFn getFloatIndexedvEXT;
	proto::GetFloati_vEXTFn getFloati_vEXT;
	proto::GetFramebufferParameterivEXTFn getFramebufferParameterivEXT;
	proto::GetIntegerIndexedvEXTFn getIntegerIndexedvEXT;
	proto::GetMultiTexEnvfvEXTFn getMultiTexEnvfvEXT;
	proto::GetMultiTexEnvivEXTFn getMultiTexEnvivEXT;
	proto::GetMultiTexGendvEXTFn getMultiTexGendvEXT;
	proto::GetMultiTexGenfvEXTFn getMultiTexGenfvEXT;
	proto::GetMultiTexGenivEXTFn getMultiTexGenivEXT;
	proto::GetMultiTexImageEXTFn getMultiTexImageEXT;
	proto::GetMultiTexLevelParameterfvEXTFn getMultiTexLevelParameterfvEXT;
	proto::GetMultiTexLevelParameterivEXTFn getMultiTexLevelParameterivEXT;
	proto::GetMultiTexParameterIivEXTFn getMultiTexParameterIivEXT;
	proto::GetMultiTexParameterIuivEXTFn getMultiTexParameterIuivEXT;
	proto::GetMultiTexParameterfvEXTFn getMultiTexParameterfvEXT;
	proto::GetMultiTexParameterivEXTFn getMultiTexParameterivEXT;
	proto::GetNamedBufferParameterivEXTFn getNamedBufferParameterivEXT;
	proto::GetNamedBufferPointervEXTFn getNamedBufferPointervEXT;
	proto::GetNamedBufferSubDataEXTFn getNamedBufferSubDataEXT;
	proto::GetNamedFramebufferAttachmentParameterivEXTFn getNamedFramebufferAttachmentParameterivEXT;
	proto::GetNamedFramebufferParameterivEXTFn getNamedFramebufferParameterivEXT;
	proto::GetNamedProgramLocalParameterIivEXTFn getNamedProgramLocalParameterIivEXT;
	proto::GetNamedProgramLocalParameterIuivEXTFn getNamedProgramLocalParameterIuivEXT;
	proto::GetNamedProgramLocalParameterdvEXTFn getNamedProgramLocalParameterdvEXT;
	proto::GetNamedProgramLocalParameterfvEXTFn getNamedProgramLocalParameterfvEXT;
	proto::GetNamedProgramStringEXTFn getNamedProgramStringEXT;
	proto::GetNamedProgramivEXTFn getNamedProgramivEXT;
	proto::GetNamedRenderbufferParameterivEXTFn getNamedRenderbufferParameterivEXT;
	proto::GetPointerIndexedvEXTFn getPointerIndexedvEXT;
	proto::GetPointeri_vEXTFn getPointeri_vEXT;
	proto::GetTextureImageEXTFn getTextureImageEXT;
	proto::GetTextureLevelParameterfvEXTFn getTextureLevelParameterfvEXT;
	proto::GetTextureLevelParameterivEXTFn getTextureLevelParameterivEXT;
	proto::GetTextureParameterIivEXTFn getTextureParameterIivEXT;
	proto::GetTextureParameterIuivEXTFn getTextureParameterIuivEXT;
	proto::GetTextureParameterfvEXTFn getTextureParameterfvEXT;
	proto::GetTextureParameterivEXTFn getTextureParameterivEXT;
	proto::GetVertexArrayIntegeri_vEXTFn getVertexArrayIntegeri_vEXT;
	proto::GetVertexArrayIntegervEXTFn getVertexArrayIntegervEXT;
	proto::GetVertexArrayPointeri_vEXTFn getVertexArrayPointeri_vEXT;
	proto::GetVertexArrayPointervEXTFn getVertexArrayPointervEXT;
	proto::IsEnabledIndexedEXTFn isEnabledIndexedEXT;
	proto::MapNamedBufferEXTFn mapNamedBufferEXT;
	proto::MapNamedBufferRangeEXTFn mapNamedBufferRangeEXT;
	proto::MatrixFrustumEXTFn matrixFrustumEXT;
	proto::MatrixLoadIdentityEXTFn matrixLoadIdentityEXT;
	proto::MatrixLoadTransposedEXTFn matrixLoadTransposedEXT;
	proto::MatrixLoadTransposefEXTFn matrixLoadTransposefEXT;
	proto::MatrixLoaddEXTFn matrixLoaddEXT;
	proto::MatrixLoadfEXTFn matrixLoadfEXT;
	proto::MatrixMultTransposedEXTFn matrixMultTransposedEXT;
	proto::MatrixMultTransposefEXTFn matrixMultTransposefEXT;
	proto::MatrixMultdEXTFn matrixMultdEXT;
	proto::MatrixMultfEXTFn matrixMultfEXT;
	proto::MatrixOrthoEXTFn matrixOrthoEXT;
	proto::MatrixPopEXTFn matrixPopEXT;
	proto::MatrixPushEXTFn matrixPushEXT;
	proto::MatrixRotatedEXTFn matrixRotatedEXT;
	proto::MatrixRotatefEXTFn matrixRotatefEXT;
	proto::MatrixScaledEXTFn matrixScaledEXT;
	proto::MatrixScalefEXTFn matrixScalefEXT;
	proto::MatrixTranslatedEXTFn matrixTranslatedEXT;
	proto::MatrixTranslatefEXTFn matrixTranslatefEXT;
	proto::MultiTexBufferEXTFn multiTexBufferEXT;
	proto::MultiTexCoordPointerEXTFn multiTexCoordPointerEXT;
	proto::MultiTexEnvfEXTFn multiTexEnvfEXT;
	proto::MultiTexEnvfvEXTFn multiTexEnvfvEXT;
	proto::MultiTexEnviEXTFn multiTexEnviEXT;
	proto::MultiTexEnvivEXTFn multiTexEnvivEXT;
	proto::MultiTexGendEXTFn multiTexGendEXT;
	proto::MultiTexGendvEXTFn multiTexGendvEXT;
	proto::MultiTexGenfEXTFn multiTexGenfEXT;
	proto::MultiTexGenfvEXTFn multiTexGenfvEXT;
	proto::MultiTexGeniEXTFn multiTexGeniEXT;
	proto::MultiTexGenivEXTFn multiTexGenivEXT;
	proto::MultiTexImage1DEXTFn multiTexImage1DEXT;
	proto::MultiTexImage2DEXTFn multiTexImage2DEXT;
	proto::MultiTexImage3DEXTFn multiTexImage3DEXT;
	proto::MultiTexParameterIivEXTFn multiTexParameterIivEXT;
	proto::MultiTexParameterIuivEXTFn multiTexParameterIuivEXT;
	proto::MultiTexParameterfEXTFn multiTexParameterfEXT;
	proto::MultiTexParameterfvEXTFn multiTexParameterfvEXT;
	proto::MultiTexParameteriEXTFn multiTexParameteriEXT;
	proto::MultiTexParameterivEXTFn multiTexParameterivEXT;
	proto::MultiTexRenderbufferEXTFn multiTexRenderbufferEXT;
	proto::MultiTexSubImage1DEXTFn multiTexSubImage1DEXT;
	proto::MultiTexSubImage2DEXTFn multiTexSubImage2DEXT;
	proto::MultiTexSubImage3DEXTFn multiTexSubImage3DEXT;
	proto::NamedBufferDataEXTFn namedBufferDataEXT;
	proto::NamedBufferStorageEXTFn namedBufferStorageEXT;
	proto::NamedBufferSubDataEXTFn namedBufferSubDataEXT;
	proto::NamedCopyBufferSubDataEXTFn namedCopyBufferSubDataEXT;
	proto::NamedFramebufferParameteriEXTFn namedFramebufferParameteriEXT;
	proto::NamedFramebufferRenderbufferEXTFn namedFramebufferRenderbufferEXT;
	proto::NamedFramebufferTexture1DEXTFn namedFramebufferTexture1DEXT;
	proto::NamedFramebufferTexture2DEXTFn namedFramebufferTexture2DEXT;
	proto::NamedFramebufferTexture3DEXTFn namedFramebufferTexture3DEXT;
	proto::NamedFramebufferTextureEXTFn namedFramebufferTextureEXT;
	proto::NamedFramebufferTextureFaceEXTFn namedFramebufferTextureFaceEXT;
	proto::NamedFramebufferTextureLayerEXTFn namedFramebufferTextureLayerEXT;
	proto::NamedProgramLocalParameter4dEXTFn namedProgramLocalParameter4dEXT;
	proto::NamedProgramLocalParameter4dvEXTFn namedProgramLocalParameter4dvEXT;
	proto::NamedProgramLocalParameter4fEXTFn namedProgramLocalParameter4fEXT;
	proto::NamedProgramLocalParameter4fvEXTFn namedProgramLocalParameter4fvEXT;
	proto::NamedProgramLocalParameterI4iEXTFn namedProgramLocalParameterI4iEXT;
	proto::NamedProgramLocalParameterI4ivEXTFn namedProgramLocalParameterI4ivEXT;
	proto::NamedProgramLocalParameterI4uiEXTFn namedProgramLocalParameterI4uiEXT;
	proto::NamedProgramLocalParameterI4uivEXTFn namedProgramLocalParameterI4uivEXT;
	proto::NamedProgramLocalParameters4fvEXTFn namedProgramLocalParameters4fvEXT;
	proto::NamedProgramLocalParametersI4ivEXTFn namedProgramLocalParametersI4ivEXT;
	proto::NamedProgramLocalParametersI4uivEXTFn namedProgramLocalParametersI4uivEXT;
	proto::NamedProgramStringEXTFn namedProgramStringEXT;
	proto::NamedRenderbufferStorageEXTFn namedRenderbufferStorageEXT;
	proto::NamedRenderbufferStorageMultisampleCoverageEXTFn namedRenderbufferStorageMultisampleCoverageEXT;
	proto::NamedRenderbufferStorageMultisampleEXTFn namedRenderbufferStorageMultisampleEXT;
	proto::ProgramUniform1dEXTFn programUniform1dEXT;
	proto::ProgramUniform1dvEXTFn programUniform1dvEXT;
	proto::ProgramUniform1fEXTFn programUniform1fEXT;
	proto::ProgramUniform1fvEXTFn programUniform1fvEXT;
	proto::ProgramUniform1iEXTFn programUniform1iEXT;
	proto::ProgramUniform1ivEXTFn programUniform1ivEXT;
	proto::ProgramUniform1uiEXTFn programUniform1uiEXT;
	proto::ProgramUniform1uivEXTFn programUniform1uivEXT;
	proto::ProgramUniform2dEXTFn programUniform2dEXT;
	proto::ProgramUniform2dvEXTFn programUniform2dvEXT;
	proto::ProgramUniform2fEXTFn programUniform2fEXT;
	proto::ProgramUniform2fvEXTFn programUniform2fvEXT;
	proto::ProgramUniform2iEXTFn programUniform2iEXT;
	proto::ProgramUniform2ivEXTFn programUniform2ivEXT;
	proto::ProgramUniform2uiEXTFn programUniform2uiEXT;
	proto::ProgramUniform2uivEXTFn programUniform2uivEXT;
	proto::ProgramUniform3dEXTFn programUniform3dEXT;
	proto::ProgramUniform3dvEXTFn programUniform3dvEXT;
	proto::ProgramUniform3fEXTFn programUniform3fEXT;
	proto::ProgramUniform3fvEXTFn programUniform3fvEXT;
	proto::ProgramUniform3iEXTFn programUniform3iEXT;
	proto::ProgramUniform3ivEXTFn programUniform3ivEXT;
	proto::ProgramUniform3uiEXTFn programUniform3uiEXT;
	proto::ProgramUniform3uivEXTFn programUniform3uivEXT;
	proto::ProgramUniform4dEXTFn programUniform4dEXT;
	proto::ProgramUniform4dvEXTFn programUniform4dvEXT;
	proto::ProgramUniform4fEXTFn programUniform4fEXT;
	proto::ProgramUniform4fvEXTFn programUniform4fvEXT;
	proto::ProgramUniform4iEXTFn programUniform4iEXT;
	proto::ProgramUniform4ivEXTFn programUniform4ivEXT;
	proto::ProgramUniform4uiEXTFn programUniform4uiEXT;
	proto::ProgramUniform4uivEXTFn programUniform4uivEXT;
	proto::ProgramUniformMatrix2dvEXTFn programUniformMatrix2dvEXT;
	proto::ProgramUniformMatrix2fvEXTFn programUniformMatrix2fvEXT;
	proto::ProgramUniformMatrix2x3dvEXTFn programUniformMatrix2x3dvEXT;
	proto::ProgramUniformMatrix2x3fvEXTFn programUniformMatrix2x3fvEXT;
	proto::ProgramUniformMatrix2x4dvEXTFn programUniformMatrix2x4dvEXT;
	proto::ProgramUniformMatrix2x4fvEXTFn programUniformMatrix2x4fvEXT;
	proto::ProgramUniformMatrix3dvEXTFn programUniformMatrix3dvEXT;
	proto::ProgramUniformMatrix3fvEXTFn programUniformMatrix3fvEXT;
	proto::ProgramUniformMatrix3x2dvEXTFn programUniformMatrix3x2dvEXT;
	proto::ProgramUniformMatrix3x2fvEXTFn programUniformMatrix3x2fvEXT;
	proto::ProgramUniformMatrix3x4dvEXTFn programUniformMatrix3x4dvEXT;
	proto::ProgramUniformMatrix3x4fvEXTFn programUniformMatrix3x4fvEXT;
	proto::ProgramUniformMatrix4dvEXTFn programUniformMatrix4dvEXT;
	proto::ProgramUniformMatrix4fvEXTFn programUniformMatrix4fvEXT;
	proto::ProgramUniformMatrix4x2dvEXTFn programUniformMatrix4x2dvEXT;
	proto::ProgramUniformMatrix4x2fvEXTFn programUniformMatrix4x2fvEXT;
	proto::ProgramUniformMatrix4x3dvEXTFn programUniformMatrix4x3dvEXT;
	proto::ProgramUniformMatrix4x3fvEXTFn programUniformMatrix4x3fvEXT;
	proto::PushClientAttribDefaultEXTFn pushClientAttribDefaultEXT;
	proto::TextureBufferEXTFn textureBufferEXT;
	proto::TextureBufferRangeEXTFn textureBufferRangeEXT;
	proto::TextureImage1DEXTFn textureImage1DEXT;
	proto::TextureImage2DEXTFn textureImage2DEXT;
	proto::TextureImage3DEXTFn textureImage3DEXT;
	proto::TexturePageCommitmentEXTFn texturePageCommitmentEXT;
	proto::TextureParameterIivEXTFn textureParameterIivEXT;
	proto::TextureParameterIuivEXTFn textureParameterIuivEXT;
	proto::TextureParameterfEXTFn textureParameterfEXT;
	proto::TextureParameterfvEXTFn textureParameterfvEXT;
	proto::TextureParameteriEXTFn textureParameteriEXT;
	proto::TextureParameterivEXTFn textureParameterivEXT;
	proto::TextureRenderbufferEXTFn textureRenderbufferEXT;
	proto::TextureStorage1DEXTFn textureStorage1DEXT;
	proto::TextureStorage2DEXTFn textureStorage2DEXT;
	proto::TextureStorage2DMultisampleEXTFn textureStorage2DMultisampleEXT;
	proto::TextureStorage3DEXTFn textureStorage3DEXT;
	proto::TextureStorage3DMultisampleEXTFn textureStorage3DMultisampleEXT;
	proto::TextureSubImage1DEXTFn textureSubImage1DEXT;
	proto::TextureSubImage2DEXTFn textureSubImage2DEXT;
	proto::TextureSubImage3DEXTFn textureSubImage3DEXT;
	proto::UnmapNamedBufferEXTFn unmapNamedBufferEXT;
	proto::VertexArrayBindVertexBufferEXTFn vertexArrayBindVertexBufferEXT;
	proto::VertexArrayColorOffsetEXTFn vertexArrayColorOffsetEXT;
	proto::VertexArrayEdgeFlagOffsetEXTFn vertexArrayEdgeFlagOffsetEXT;
	proto::VertexArrayFogCoordOffsetEXTFn vertexArrayFogCoordOffsetEXT;
	proto::VertexArrayIndexOffsetEXTFn vertexArrayIndexOffsetEXT;
	proto::VertexArrayMultiTexCoordOffsetEXTFn vertexArrayMultiTexCoordOffsetEXT;
	proto::VertexArrayNormalOffsetEXTFn vertexArrayNormalOffsetEXT;
	proto::VertexArraySecondaryColorOffsetEXTFn vertexArraySecondaryColorOffsetEXT;
	proto::VertexArrayTexCoordOffsetEXTFn vertexArrayTexCoordOffsetEXT;
	proto::VertexArrayVertexAttribBindingEXTFn vertexArrayVertexAttribBindingEXT;
	proto::VertexArrayVertexAttribDivisorEXTFn vertexArrayVertexAttribDivisorEXT;
	proto::VertexArrayVertexAttribFormatEXTFn vertexArrayVertexAttribFormatEXT;
	proto::VertexArrayVertexAttribIFormatEXTFn vertexArrayVertexAttribIFormatEXT;
	proto::VertexArrayVertexAttribIOffsetEXTFn vertexArrayVertexAttribIOffsetEXT;
	proto::VertexArrayVertexAttribLFormatEXTFn vertexArrayVertexAttribLFormatEXT;
	proto::VertexArrayVertexAttribLOffsetEXTFn vertexArrayVertexAttribLOffsetEXT;
	proto::VertexArrayVertexAttribOffsetEXTFn vertexArrayVertexAttribOffsetEXT;
	proto::VertexArrayVertexBindingDivisorEXTFn vertexArrayVertexBindingDivisorEXT;
	proto::VertexArrayVertexOffsetEXTFn vertexArrayVertexOffsetEXT;
	//- end: EXT_direct_state_access

	//-//-- 
	//- Ext: EXT_draw_buffers2
	bool EXT_draw_buffers2;

	proto::ColorMaskIndexedEXTFn colorMaskIndexedEXT;
	// disableIndexedEXT already defined in EXT_direct_state_access
	// enableIndexedEXT already defined in EXT_direct_state_access
	// getBooleanIndexedvEXT already defined in EXT_direct_state_access
	// getIntegerIndexedvEXT already defined in EXT_direct_state_access
	// isEnabledIndexedEXT already defined in EXT_direct_state_access
	//- end: EXT_draw_buffers2

	//-//-- 
	//- Ext: EXT_draw_instanced
	bool EXT_draw_instanced;

	proto::DrawArraysInstancedEXTFn drawArraysInstancedEXT;
	proto::DrawElementsInstancedEXTFn drawElementsInstancedEXT;
	//- end: EXT_draw_instanced

	//-//-- 
	//- Ext: EXT_draw_range_elements
	bool EXT_draw_range_elements;

	proto::DrawRangeElementsEXTFn drawRangeElementsEXT;
	//- end: EXT_draw_range_elements

	//-//-- 
	//- Ext: EXT_fog_coord
	bool EXT_fog_coord;

	proto::FogCoordPointerEXTFn fogCoordPointerEXT;
	proto::FogCoorddEXTFn fogCoorddEXT;
	proto::FogCoorddvEXTFn fogCoorddvEXT;
	proto::FogCoordfEXTFn fogCoordfEXT;
	proto::FogCoordfvEXTFn fogCoordfvEXT;
	//- end: EXT_fog_coord

	//-//-- 
	//- Ext: EXT_framebuffer_blit
	bool EXT_framebuffer_blit;

	proto::BlitFramebufferEXTFn blitFramebufferEXT;
	//- end: EXT_framebuffer_blit

	//-//-- 
	//- Ext: EXT_framebuffer_multisample
	bool EXT_framebuffer_multisample;

	proto::RenderbufferStorageMultisampleEXTFn renderbufferStorageMultisampleEXT;
	//- end: EXT_framebuffer_multisample

	//-//-- 
	//- Ext: EXT_framebuffer_object
	bool EXT_framebuffer_object;

	proto::BindFramebufferEXTFn bindFramebufferEXT;
	proto::BindRenderbufferEXTFn bindRenderbufferEXT;
	proto::CheckFramebufferStatusEXTFn checkFramebufferStatusEXT;
	proto::DeleteFramebuffersEXTFn deleteFramebuffersEXT;
	proto::DeleteRenderbuffersEXTFn deleteRenderbuffersEXT;
	proto::FramebufferRenderbufferEXTFn framebufferRenderbufferEXT;
	proto::FramebufferTexture1DEXTFn framebufferTexture1DEXT;
	proto::FramebufferTexture2DEXTFn framebufferTexture2DEXT;
	proto::FramebufferTexture3DEXTFn framebufferTexture3DEXT;
	proto::GenFramebuffersEXTFn genFramebuffersEXT;
	proto::GenRenderbuffersEXTFn genRenderbuffersEXT;
	proto::GenerateMipmapEXTFn generateMipmapEXT;
	proto::GetFramebufferAttachmentParameterivEXTFn getFramebufferAttachmentParameterivEXT;
	proto::GetRenderbufferParameterivEXTFn getRenderbufferParameterivEXT;
	proto::IsFramebufferEXTFn isFramebufferEXT;
	proto::IsRenderbufferEXTFn isRenderbufferEXT;
	proto::RenderbufferStorageEXTFn renderbufferStorageEXT;
	//- end: EXT_framebuffer_object

	//-//-- 
	//- Ext: EXT_geometry_shader4
	bool EXT_geometry_shader4;

	proto::ProgramParameteriEXTFn programParameteriEXT;
	//- end: EXT_geometry_shader4

	//-//-- 
	//- Ext: EXT_gpu_program_parameters
	bool EXT_gpu_program_parameters;

	proto::ProgramEnvParameters4fvEXTFn programEnvParameters4fvEXT;
	proto::ProgramLocalParameters4fvEXTFn programLocalParameters4fvEXT;
	//- end: EXT_gpu_program_parameters

	//-//-- 
	//- Ext: EXT_gpu_shader4
	bool EXT_gpu_shader4;

	proto::BindFragDataLocationEXTFn bindFragDataLocationEXT;
	proto::GetFragDataLocationEXTFn getFragDataLocationEXT;
	proto::GetUniformuivEXTFn getUniformuivEXT;
	proto::Uniform1uiEXTFn uniform1uiEXT;
	proto::Uniform1uivEXTFn uniform1uivEXT;
	proto::Uniform2uiEXTFn uniform2uiEXT;
	proto::Uniform2uivEXTFn uniform2uivEXT;
	proto::Uniform3uiEXTFn uniform3uiEXT;
	proto::Uniform3uivEXTFn uniform3uivEXT;
	proto::Uniform4uiEXTFn uniform4uiEXT;
	proto::Uniform4uivEXTFn uniform4uivEXT;
	//- end: EXT_gpu_shader4

	//-//-- 
	//- Ext: EXT_histogram
	bool EXT_histogram;

	proto::GetHistogramEXTFn getHistogramEXT;
	proto::GetHistogramParameterfvEXTFn getHistogramParameterfvEXT;
	proto::GetHistogramParameterivEXTFn getHistogramParameterivEXT;
	proto::GetMinmaxEXTFn getMinmaxEXT;
	proto::GetMinmaxParameterfvEXTFn getMinmaxParameterfvEXT;
	proto::GetMinmaxParameterivEXTFn getMinmaxParameterivEXT;
	proto::HistogramEXTFn histogramEXT;
	proto::MinmaxEXTFn minmaxEXT;
	proto::ResetHistogramEXTFn resetHistogramEXT;
	proto::ResetMinmaxEXTFn resetMinmaxEXT;
	//- end: EXT_histogram

	//-//-- 
	//- Ext: EXT_index_func
	bool EXT_index_func;

	proto::IndexFuncEXTFn indexFuncEXT;
	//- end: EXT_index_func

	//-//-- 
	//- Ext: EXT_index_material
	bool EXT_index_material;

	proto::IndexMaterialEXTFn indexMaterialEXT;
	//- end: EXT_index_material

	//-//-- 
	//- Ext: EXT_light_texture
	bool EXT_light_texture;

	proto::ApplyTextureEXTFn applyTextureEXT;
	proto::TextureLightEXTFn textureLightEXT;
	proto::TextureMaterialEXTFn textureMaterialEXT;
	//- end: EXT_light_texture

	//-//-- 
	//- Ext: EXT_multi_draw_arrays
	bool EXT_multi_draw_arrays;

	proto::MultiDrawArraysEXTFn multiDrawArraysEXT;
	proto::MultiDrawElementsEXTFn multiDrawElementsEXT;
	//- end: EXT_multi_draw_arrays

	//-//-- 
	//- Ext: EXT_multisample
	bool EXT_multisample;

	proto::SampleMaskEXTFn sampleMaskEXT;
	proto::SamplePatternEXTFn samplePatternEXT;
	//- end: EXT_multisample

	//-//-- 
	//- Ext: EXT_paletted_texture
	bool EXT_paletted_texture;

	proto::ColorTableEXTFn colorTableEXT;
	proto::GetColorTableEXTFn getColorTableEXT;
	proto::GetColorTableParameterfvEXTFn getColorTableParameterfvEXT;
	proto::GetColorTableParameterivEXTFn getColorTableParameterivEXT;
	//- end: EXT_paletted_texture

	//-//-- 
	//- Ext: EXT_pixel_transform
	bool EXT_pixel_transform;

	proto::GetPixelTransformParameterfvEXTFn getPixelTransformParameterfvEXT;
	proto::GetPixelTransformParameterivEXTFn getPixelTransformParameterivEXT;
	proto::PixelTransformParameterfEXTFn pixelTransformParameterfEXT;
	proto::PixelTransformParameterfvEXTFn pixelTransformParameterfvEXT;
	proto::PixelTransformParameteriEXTFn pixelTransformParameteriEXT;
	proto::PixelTransformParameterivEXTFn pixelTransformParameterivEXT;
	//- end: EXT_pixel_transform

	//-//-- 
	//- Ext: EXT_point_parameters
	bool EXT_point_parameters;

	proto::PointParameterfEXTFn pointParameterfEXT;
	proto::PointParameterfvEXTFn pointParameterfvEXT;
	//- end: EXT_point_parameters

	//-//-- 
	//- Ext: EXT_polygon_offset
	bool EXT_polygon_offset;

	proto::PolygonOffsetEXTFn polygonOffsetEXT;
	//- end: EXT_polygon_offset

	//-//-- 
	//- Ext: EXT_polygon_offset_clamp
	bool EXT_polygon_offset_clamp;

	proto::PolygonOffsetClampEXTFn polygonOffsetClampEXT;
	//- end: EXT_polygon_offset_clamp

	//-//-- 
	//- Ext: EXT_provoking_vertex
	bool EXT_provoking_vertex;

	proto::ProvokingVertexEXTFn provokingVertexEXT;
	//- end: EXT_provoking_vertex

	//-//-- 
	//- Ext: EXT_raster_multisample
	bool EXT_raster_multisample;

	proto::RasterSamplesEXTFn rasterSamplesEXT;
	//- end: EXT_raster_multisample

	//-//-- 
	//- Ext: EXT_secondary_color
	bool EXT_secondary_color;

	proto::SecondaryColor3bEXTFn secondaryColor3bEXT;
	proto::SecondaryColor3bvEXTFn secondaryColor3bvEXT;
	proto::SecondaryColor3dEXTFn secondaryColor3dEXT;
	proto::SecondaryColor3dvEXTFn secondaryColor3dvEXT;
	proto::SecondaryColor3fEXTFn secondaryColor3fEXT;
	proto::SecondaryColor3fvEXTFn secondaryColor3fvEXT;
	proto::SecondaryColor3iEXTFn secondaryColor3iEXT;
	proto::SecondaryColor3ivEXTFn secondaryColor3ivEXT;
	proto::SecondaryColor3sEXTFn secondaryColor3sEXT;
	proto::SecondaryColor3svEXTFn secondaryColor3svEXT;
	proto::SecondaryColor3ubEXTFn secondaryColor3ubEXT;
	proto::SecondaryColor3ubvEXTFn secondaryColor3ubvEXT;
	proto::SecondaryColor3uiEXTFn secondaryColor3uiEXT;
	proto::SecondaryColor3uivEXTFn secondaryColor3uivEXT;
	proto::SecondaryColor3usEXTFn secondaryColor3usEXT;
	proto::SecondaryColor3usvEXTFn secondaryColor3usvEXT;
	proto::SecondaryColorPointerEXTFn secondaryColorPointerEXT;
	//- end: EXT_secondary_color

	//-//-- 
	//- Ext: EXT_separate_shader_objects
	bool EXT_separate_shader_objects;

	proto::ActiveProgramEXTFn activeProgramEXT;
	proto::CreateShaderProgramEXTFn createShaderProgramEXT;
	proto::UseShaderProgramEXTFn useShaderProgramEXT;
	//- end: EXT_separate_shader_objects

	//-//-- 
	//- Ext: EXT_shader_image_load_store
	bool EXT_shader_image_load_store;

	proto::BindImageTextureEXTFn bindImageTextureEXT;
	proto::MemoryBarrierEXTFn memoryBarrierEXT;
	//- end: EXT_shader_image_load_store

	//-//-- 
	//- Ext: EXT_stencil_clear_tag
	bool EXT_stencil_clear_tag;

	proto::StencilClearTagEXTFn stencilClearTagEXT;
	//- end: EXT_stencil_clear_tag

	//-//-- 
	//- Ext: EXT_stencil_two_side
	bool EXT_stencil_two_side;

	proto::ActiveStencilFaceEXTFn activeStencilFaceEXT;
	//- end: EXT_stencil_two_side

	//-//-- 
	//- Ext: EXT_subtexture
	bool EXT_subtexture;

	proto::TexSubImage1DEXTFn texSubImage1DEXT;
	proto::TexSubImage2DEXTFn texSubImage2DEXT;
	//- end: EXT_subtexture

	//-//-- 
	//- Ext: EXT_texture3D
	bool EXT_texture3D;

	proto::TexImage3DEXTFn texImage3DEXT;
	proto::TexSubImage3DEXTFn texSubImage3DEXT;
	//- end: EXT_texture3D

	//-//-- 
	//- Ext: EXT_texture_array
	bool EXT_texture_array;

	proto::FramebufferTextureLayerEXTFn framebufferTextureLayerEXT;
	//- end: EXT_texture_array

	//-//-- 
	//- Ext: EXT_texture_buffer_object
	bool EXT_texture_buffer_object;

	proto::TexBufferEXTFn texBufferEXT;
	//- end: EXT_texture_buffer_object

	//-//-- 
	//- Ext: EXT_texture_filter_minmax
	bool EXT_texture_filter_minmax;

	// rasterSamplesEXT already defined in EXT_raster_multisample
	//- end: EXT_texture_filter_minmax

	//-//-- 
	//- Ext: EXT_texture_integer
	bool EXT_texture_integer;

	proto::ClearColorIiEXTFn clearColorIiEXT;
	proto::ClearColorIuiEXTFn clearColorIuiEXT;
	proto::GetTexParameterIivEXTFn getTexParameterIivEXT;
	proto::GetTexParameterIuivEXTFn getTexParameterIuivEXT;
	proto::TexParameterIivEXTFn texParameterIivEXT;
	proto::TexParameterIuivEXTFn texParameterIuivEXT;
	//- end: EXT_texture_integer

	//-//-- 
	//- Ext: EXT_texture_object
	bool EXT_texture_object;

	proto::AreTexturesResidentEXTFn areTexturesResidentEXT;
	proto::BindTextureEXTFn bindTextureEXT;
	proto::DeleteTexturesEXTFn deleteTexturesEXT;
	proto::GenTexturesEXTFn genTexturesEXT;
	proto::IsTextureEXTFn isTextureEXT;
	proto::PrioritizeTexturesEXTFn prioritizeTexturesEXT;
	//- end: EXT_texture_object

	//-//-- 
	//- Ext: EXT_texture_perturb_normal
	bool EXT_texture_perturb_normal;

	proto::TextureNormalEXTFn textureNormalEXT;
	//- end: EXT_texture_perturb_normal

	//-//-- 
	//- Ext: EXT_timer_query
	bool EXT_timer_query;

	proto::GetQueryObjecti64vEXTFn getQueryObjecti64vEXT;
	proto::GetQueryObjectui64vEXTFn getQueryObjectui64vEXT;
	//- end: EXT_timer_query

	//-//-- 
	//- Ext: EXT_transform_feedback
	bool EXT_transform_feedback;

	proto::BeginTransformFeedbackEXTFn beginTransformFeedbackEXT;
	proto::BindBufferBaseEXTFn bindBufferBaseEXT;
	proto::BindBufferOffsetEXTFn bindBufferOffsetEXT;
	proto::BindBufferRangeEXTFn bindBufferRangeEXT;
	proto::EndTransformFeedbackEXTFn endTransformFeedbackEXT;
	proto::GetTransformFeedbackVaryingEXTFn getTransformFeedbackVaryingEXT;
	proto::TransformFeedbackVaryingsEXTFn transformFeedbackVaryingsEXT;
	//- end: EXT_transform_feedback

	//-//-- 
	//- Ext: EXT_vertex_array
	bool EXT_vertex_array;

	proto::ArrayElementEXTFn arrayElementEXT;
	proto::ColorPointerEXTFn colorPointerEXT;
	proto::DrawArraysEXTFn drawArraysEXT;
	proto::EdgeFlagPointerEXTFn edgeFlagPointerEXT;
	proto::GetPointervEXTFn getPointervEXT;
	proto::IndexPointerEXTFn indexPointerEXT;
	proto::NormalPointerEXTFn normalPointerEXT;
	proto::TexCoordPointerEXTFn texCoordPointerEXT;
	proto::VertexPointerEXTFn vertexPointerEXT;
	//- end: EXT_vertex_array

	//-//-- 
	//- Ext: EXT_vertex_attrib_64bit
	bool EXT_vertex_attrib_64bit;

	proto::GetVertexAttribLdvEXTFn getVertexAttribLdvEXT;
	proto::VertexAttribL1dEXTFn vertexAttribL1dEXT;
	proto::VertexAttribL1dvEXTFn vertexAttribL1dvEXT;
	proto::VertexAttribL2dEXTFn vertexAttribL2dEXT;
	proto::VertexAttribL2dvEXTFn vertexAttribL2dvEXT;
	proto::VertexAttribL3dEXTFn vertexAttribL3dEXT;
	proto::VertexAttribL3dvEXTFn vertexAttribL3dvEXT;
	proto::VertexAttribL4dEXTFn vertexAttribL4dEXT;
	proto::VertexAttribL4dvEXTFn vertexAttribL4dvEXT;
	proto::VertexAttribLPointerEXTFn vertexAttribLPointerEXT;
	//- end: EXT_vertex_attrib_64bit

	//-//-- 
	//- Ext: EXT_vertex_shader
	bool EXT_vertex_shader;

	proto::BeginVertexShaderEXTFn beginVertexShaderEXT;
	proto::BindLightParameterEXTFn bindLightParameterEXT;
	proto::BindMaterialParameterEXTFn bindMaterialParameterEXT;
	proto::BindParameterEXTFn bindParameterEXT;
	proto::BindTexGenParameterEXTFn bindTexGenParameterEXT;
	proto::BindTextureUnitParameterEXTFn bindTextureUnitParameterEXT;
	proto::BindVertexShaderEXTFn bindVertexShaderEXT;
	proto::DeleteVertexShaderEXTFn deleteVertexShaderEXT;
	proto::DisableVariantClientStateEXTFn disableVariantClientStateEXT;
	proto::EnableVariantClientStateEXTFn enableVariantClientStateEXT;
	proto::EndVertexShaderEXTFn endVertexShaderEXT;
	proto::ExtractComponentEXTFn extractComponentEXT;
	proto::GenSymbolsEXTFn genSymbolsEXT;
	proto::GenVertexShadersEXTFn genVertexShadersEXT;
	proto::GetInvariantBooleanvEXTFn getInvariantBooleanvEXT;
	proto::GetInvariantFloatvEXTFn getInvariantFloatvEXT;
	proto::GetInvariantIntegervEXTFn getInvariantIntegervEXT;
	proto::GetLocalConstantBooleanvEXTFn getLocalConstantBooleanvEXT;
	proto::GetLocalConstantFloatvEXTFn getLocalConstantFloatvEXT;
	proto::GetLocalConstantIntegervEXTFn getLocalConstantIntegervEXT;
	proto::GetVariantBooleanvEXTFn getVariantBooleanvEXT;
	proto::GetVariantFloatvEXTFn getVariantFloatvEXT;
	proto::GetVariantIntegervEXTFn getVariantIntegervEXT;
	proto::GetVariantPointervEXTFn getVariantPointervEXT;
	proto::InsertComponentEXTFn insertComponentEXT;
	proto::IsVariantEnabledEXTFn isVariantEnabledEXT;
	proto::SetInvariantEXTFn setInvariantEXT;
	proto::SetLocalConstantEXTFn setLocalConstantEXT;
	proto::ShaderOp1EXTFn shaderOp1EXT;
	proto::ShaderOp2EXTFn shaderOp2EXT;
	proto::ShaderOp3EXTFn shaderOp3EXT;
	proto::SwizzleEXTFn swizzleEXT;
	proto::VariantPointerEXTFn variantPointerEXT;
	proto::VariantbvEXTFn variantbvEXT;
	proto::VariantdvEXTFn variantdvEXT;
	proto::VariantfvEXTFn variantfvEXT;
	proto::VariantivEXTFn variantivEXT;
	proto::VariantsvEXTFn variantsvEXT;
	proto::VariantubvEXTFn variantubvEXT;
	proto::VariantuivEXTFn variantuivEXT;
	proto::VariantusvEXTFn variantusvEXT;
	proto::WriteMaskEXTFn writeMaskEXT;
	//- end: EXT_vertex_shader

	//-//-- 
	//- Ext: EXT_vertex_weighting
	bool EXT_vertex_weighting;

	proto::VertexWeightPointerEXTFn vertexWeightPointerEXT;
	proto::VertexWeightfEXTFn vertexWeightfEXT;
	proto::VertexWeightfvEXTFn vertexWeightfvEXT;
	//- end: EXT_vertex_weighting

	//-//-- 
	//- Ext: EXT_x11_sync_object
	bool EXT_x11_sync_object;

	proto::ImportSyncEXTFn importSyncEXT;
	//- end: EXT_x11_sync_object

	//-//-- 
	//- Ext: GREMEDY_frame_terminator
	bool GREMEDY_frame_terminator;

	proto::FrameTerminatorGREMEDYFn frameTerminatorGREMEDY;
	//- end: GREMEDY_frame_terminator

	//-//-- 
	//- Ext: GREMEDY_string_marker
	bool GREMEDY_string_marker;

	proto::StringMarkerGREMEDYFn stringMarkerGREMEDY;
	//- end: GREMEDY_string_marker

	//-//-- 
	//- Ext: HP_image_transform
	bool HP_image_transform;

	proto::GetImageTransformParameterfvHPFn getImageTransformParameterfvHP;
	proto::GetImageTransformParameterivHPFn getImageTransformParameterivHP;
	proto::ImageTransformParameterfHPFn imageTransformParameterfHP;
	proto::ImageTransformParameterfvHPFn imageTransformParameterfvHP;
	proto::ImageTransformParameteriHPFn imageTransformParameteriHP;
	proto::ImageTransformParameterivHPFn imageTransformParameterivHP;
	//- end: HP_image_transform

	//-//-- 
	//- Ext: IBM_multimode_draw_arrays
	bool IBM_multimode_draw_arrays;

	proto::MultiModeDrawArraysIBMFn multiModeDrawArraysIBM;
	proto::MultiModeDrawElementsIBMFn multiModeDrawElementsIBM;
	//- end: IBM_multimode_draw_arrays

	//-//-- 
	//- Ext: IBM_static_data
	bool IBM_static_data;

	proto::FlushStaticDataIBMFn flushStaticDataIBM;
	//- end: IBM_static_data

	//-//-- 
	//- Ext: IBM_vertex_array_lists
	bool IBM_vertex_array_lists;

	proto::ColorPointerListIBMFn colorPointerListIBM;
	proto::EdgeFlagPointerListIBMFn edgeFlagPointerListIBM;
	proto::FogCoordPointerListIBMFn fogCoordPointerListIBM;
	proto::IndexPointerListIBMFn indexPointerListIBM;
	proto::NormalPointerListIBMFn normalPointerListIBM;
	proto::SecondaryColorPointerListIBMFn secondaryColorPointerListIBM;
	proto::TexCoordPointerListIBMFn texCoordPointerListIBM;
	proto::VertexPointerListIBMFn vertexPointerListIBM;
	//- end: IBM_vertex_array_lists

	//-//-- 
	//- Ext: INTEL_framebuffer_CMAA
	bool INTEL_framebuffer_CMAA;

	proto::ApplyFramebufferAttachmentCMAAINTELFn applyFramebufferAttachmentCMAAINTEL;
	//- end: INTEL_framebuffer_CMAA

	//-//-- 
	//- Ext: INTEL_map_texture
	bool INTEL_map_texture;

	proto::MapTexture2DINTELFn mapTexture2DINTEL;
	proto::SyncTextureINTELFn syncTextureINTEL;
	proto::UnmapTexture2DINTELFn unmapTexture2DINTEL;
	//- end: INTEL_map_texture

	//-//-- 
	//- Ext: INTEL_parallel_arrays
	bool INTEL_parallel_arrays;

	proto::ColorPointervINTELFn colorPointervINTEL;
	proto::NormalPointervINTELFn normalPointervINTEL;
	proto::TexCoordPointervINTELFn texCoordPointervINTEL;
	proto::VertexPointervINTELFn vertexPointervINTEL;
	//- end: INTEL_parallel_arrays

	//-//-- 
	//- Ext: INTEL_performance_query
	bool INTEL_performance_query;

	proto::BeginPerfQueryINTELFn beginPerfQueryINTEL;
	proto::CreatePerfQueryINTELFn createPerfQueryINTEL;
	proto::DeletePerfQueryINTELFn deletePerfQueryINTEL;
	proto::EndPerfQueryINTELFn endPerfQueryINTEL;
	proto::GetFirstPerfQueryIdINTELFn getFirstPerfQueryIdINTEL;
	proto::GetNextPerfQueryIdINTELFn getNextPerfQueryIdINTEL;
	proto::GetPerfCounterInfoINTELFn getPerfCounterInfoINTEL;
	proto::GetPerfQueryDataINTELFn getPerfQueryDataINTEL;
	proto::GetPerfQueryIdByNameINTELFn getPerfQueryIdByNameINTEL;
	proto::GetPerfQueryInfoINTELFn getPerfQueryInfoINTEL;
	//- end: INTEL_performance_query

	//-//-- 
	//- Ext: KHR_blend_equation_advanced
	bool KHR_blend_equation_advanced;

	proto::BlendBarrierKHRFn blendBarrierKHR;
	//- end: KHR_blend_equation_advanced

	//-//-- 
	//- Ext: KHR_debug
	bool KHR_debug;

	// debugMessageCallback already defined in 4.3_core
	// debugMessageControl already defined in 4.3_core
	// debugMessageInsert already defined in 4.3_core
	// getDebugMessageLog already defined in 4.3_core
	// getObjectLabel already defined in 4.3_core
	// getObjectPtrLabel already defined in 4.3_core
	// getPointerv already defined in 1.1_core
	// objectLabel already defined in 4.3_core
	// objectPtrLabel already defined in 4.3_core
	// popDebugGroup already defined in 4.3_core
	// pushDebugGroup already defined in 4.3_core
	//- end: KHR_debug

	//-//-- 
	//- Ext: KHR_robustness
	bool KHR_robustness;

	// getGraphicsResetStatus already defined in 4.5_core
	// getnUniformfv already defined in 4.5_core
	// getnUniformiv already defined in 4.5_core
	// getnUniformuiv already defined in 4.5_core
	// readnPixels already defined in 4.5_core
	//- end: KHR_robustness

	//-//-- 
	//- Ext: MESA_resize_buffers
	bool MESA_resize_buffers;

	proto::ResizeBuffersMESAFn resizeBuffersMESA;
	//- end: MESA_resize_buffers

	//-//-- 
	//- Ext: MESA_window_pos
	bool MESA_window_pos;

	proto::WindowPos2dMESAFn windowPos2dMESA;
	proto::WindowPos2dvMESAFn windowPos2dvMESA;
	proto::WindowPos2fMESAFn windowPos2fMESA;
	proto::WindowPos2fvMESAFn windowPos2fvMESA;
	proto::WindowPos2iMESAFn windowPos2iMESA;
	proto::WindowPos2ivMESAFn windowPos2ivMESA;
	proto::WindowPos2sMESAFn windowPos2sMESA;
	proto::WindowPos2svMESAFn windowPos2svMESA;
	proto::WindowPos3dMESAFn windowPos3dMESA;
	proto::WindowPos3dvMESAFn windowPos3dvMESA;
	proto::WindowPos3fMESAFn windowPos3fMESA;
	proto::WindowPos3fvMESAFn windowPos3fvMESA;
	proto::WindowPos3iMESAFn windowPos3iMESA;
	proto::WindowPos3ivMESAFn windowPos3ivMESA;
	proto::WindowPos3sMESAFn windowPos3sMESA;
	proto::WindowPos3svMESAFn windowPos3svMESA;
	proto::WindowPos4dMESAFn windowPos4dMESA;
	proto::WindowPos4dvMESAFn windowPos4dvMESA;
	proto::WindowPos4fMESAFn windowPos4fMESA;
	proto::WindowPos4fvMESAFn windowPos4fvMESA;
	proto::WindowPos4iMESAFn windowPos4iMESA;
	proto::WindowPos4ivMESAFn windowPos4ivMESA;
	proto::WindowPos4sMESAFn windowPos4sMESA;
	proto::WindowPos4svMESAFn windowPos4svMESA;
	//- end: MESA_window_pos

	//-//-- 
	//- Ext: NVX_conditional_render
	bool NVX_conditional_render;

	proto::BeginConditionalRenderNVXFn beginConditionalRenderNVX;
	proto::EndConditionalRenderNVXFn endConditionalRenderNVX;
	//- end: NVX_conditional_render

	//-//-- 
	//- Ext: NV_bindless_multi_draw_indirect
	bool NV_bindless_multi_draw_indirect;

	proto::MultiDrawArraysIndirectBindlessNVFn multiDrawArraysIndirectBindlessNV;
	proto::MultiDrawElementsIndirectBindlessNVFn multiDrawElementsIndirectBindlessNV;
	//- end: NV_bindless_multi_draw_indirect

	//-//-- 
	//- Ext: NV_bindless_multi_draw_indirect_count
	bool NV_bindless_multi_draw_indirect_count;

	proto::MultiDrawArraysIndirectBindlessCountNVFn multiDrawArraysIndirectBindlessCountNV;
	proto::MultiDrawElementsIndirectBindlessCountNVFn multiDrawElementsIndirectBindlessCountNV;
	//- end: NV_bindless_multi_draw_indirect_count

	//-//-- 
	//- Ext: NV_bindless_texture
	bool NV_bindless_texture;

	proto::GetImageHandleNVFn getImageHandleNV;
	proto::GetTextureHandleNVFn getTextureHandleNV;
	proto::GetTextureSamplerHandleNVFn getTextureSamplerHandleNV;
	proto::IsImageHandleResidentNVFn isImageHandleResidentNV;
	proto::IsTextureHandleResidentNVFn isTextureHandleResidentNV;
	proto::MakeImageHandleNonResidentNVFn makeImageHandleNonResidentNV;
	proto::MakeImageHandleResidentNVFn makeImageHandleResidentNV;
	proto::MakeTextureHandleNonResidentNVFn makeTextureHandleNonResidentNV;
	proto::MakeTextureHandleResidentNVFn makeTextureHandleResidentNV;
	proto::ProgramUniformHandleui64NVFn programUniformHandleui64NV;
	proto::ProgramUniformHandleui64vNVFn programUniformHandleui64vNV;
	proto::UniformHandleui64NVFn uniformHandleui64NV;
	proto::UniformHandleui64vNVFn uniformHandleui64vNV;
	//- end: NV_bindless_texture

	//-//-- 
	//- Ext: NV_blend_equation_advanced
	bool NV_blend_equation_advanced;

	proto::BlendBarrierNVFn blendBarrierNV;
	proto::BlendParameteriNVFn blendParameteriNV;
	//- end: NV_blend_equation_advanced

	//-//-- 
	//- Ext: NV_command_list
	bool NV_command_list;

	proto::CallCommandListNVFn callCommandListNV;
	proto::CommandListSegmentsNVFn commandListSegmentsNV;
	proto::CompileCommandListNVFn compileCommandListNV;
	proto::CreateCommandListsNVFn createCommandListsNV;
	proto::CreateStatesNVFn createStatesNV;
	proto::DeleteCommandListsNVFn deleteCommandListsNV;
	proto::DeleteStatesNVFn deleteStatesNV;
	proto::DrawCommandsAddressNVFn drawCommandsAddressNV;
	proto::DrawCommandsNVFn drawCommandsNV;
	proto::DrawCommandsStatesAddressNVFn drawCommandsStatesAddressNV;
	proto::DrawCommandsStatesNVFn drawCommandsStatesNV;
	proto::GetCommandHeaderNVFn getCommandHeaderNV;
	proto::GetStageIndexNVFn getStageIndexNV;
	proto::IsCommandListNVFn isCommandListNV;
	proto::IsStateNVFn isStateNV;
	proto::ListDrawCommandsStatesClientNVFn listDrawCommandsStatesClientNV;
	proto::StateCaptureNVFn stateCaptureNV;
	//- end: NV_command_list

	//-//-- 
	//- Ext: NV_conditional_render
	bool NV_conditional_render;

	proto::BeginConditionalRenderNVFn beginConditionalRenderNV;
	proto::EndConditionalRenderNVFn endConditionalRenderNV;
	//- end: NV_conditional_render

	//-//-- 
	//- Ext: NV_conservative_raster
	bool NV_conservative_raster;

	proto::SubpixelPrecisionBiasNVFn subpixelPrecisionBiasNV;
	//- end: NV_conservative_raster

	//-//-- 
	//- Ext: NV_conservative_raster_dilate
	bool NV_conservative_raster_dilate;

	proto::ConservativeRasterParameterfNVFn conservativeRasterParameterfNV;
	//- end: NV_conservative_raster_dilate

	//-//-- 
	//- Ext: NV_copy_image
	bool NV_copy_image;

	proto::CopyImageSubDataNVFn copyImageSubDataNV;
	//- end: NV_copy_image

	//-//-- 
	//- Ext: NV_depth_buffer_float
	bool NV_depth_buffer_float;

	proto::ClearDepthdNVFn clearDepthdNV;
	proto::DepthBoundsdNVFn depthBoundsdNV;
	proto::DepthRangedNVFn depthRangedNV;
	//- end: NV_depth_buffer_float

	//-//-- 
	//- Ext: NV_draw_texture
	bool NV_draw_texture;

	proto::DrawTextureNVFn drawTextureNV;
	//- end: NV_draw_texture

	//-//-- 
	//- Ext: NV_evaluators
	bool NV_evaluators;

	proto::EvalMapsNVFn evalMapsNV;
	proto::GetMapAttribParameterfvNVFn getMapAttribParameterfvNV;
	proto::GetMapAttribParameterivNVFn getMapAttribParameterivNV;
	proto::GetMapControlPointsNVFn getMapControlPointsNV;
	proto::GetMapParameterfvNVFn getMapParameterfvNV;
	proto::GetMapParameterivNVFn getMapParameterivNV;
	proto::MapControlPointsNVFn mapControlPointsNV;
	proto::MapParameterfvNVFn mapParameterfvNV;
	proto::MapParameterivNVFn mapParameterivNV;
	//- end: NV_evaluators

	//-//-- 
	//- Ext: NV_explicit_multisample
	bool NV_explicit_multisample;

	proto::GetMultisamplefvNVFn getMultisamplefvNV;
	proto::SampleMaskIndexedNVFn sampleMaskIndexedNV;
	proto::TexRenderbufferNVFn texRenderbufferNV;
	//- end: NV_explicit_multisample

	//-//-- 
	//- Ext: NV_fence
	bool NV_fence;

	proto::DeleteFencesNVFn deleteFencesNV;
	proto::FinishFenceNVFn finishFenceNV;
	proto::GenFencesNVFn genFencesNV;
	proto::GetFenceivNVFn getFenceivNV;
	proto::IsFenceNVFn isFenceNV;
	proto::SetFenceNVFn setFenceNV;
	proto::TestFenceNVFn testFenceNV;
	//- end: NV_fence

	//-//-- 
	//- Ext: NV_fragment_coverage_to_color
	bool NV_fragment_coverage_to_color;

	proto::FragmentCoverageColorNVFn fragmentCoverageColorNV;
	//- end: NV_fragment_coverage_to_color

	//-//-- 
	//- Ext: NV_fragment_program
	bool NV_fragment_program;

	proto::GetProgramNamedParameterdvNVFn getProgramNamedParameterdvNV;
	proto::GetProgramNamedParameterfvNVFn getProgramNamedParameterfvNV;
	proto::ProgramNamedParameter4dNVFn programNamedParameter4dNV;
	proto::ProgramNamedParameter4dvNVFn programNamedParameter4dvNV;
	proto::ProgramNamedParameter4fNVFn programNamedParameter4fNV;
	proto::ProgramNamedParameter4fvNVFn programNamedParameter4fvNV;
	//- end: NV_fragment_program

	//-//-- 
	//- Ext: NV_framebuffer_mixed_samples
	bool NV_framebuffer_mixed_samples;

	proto::CoverageModulationNVFn coverageModulationNV;
	proto::CoverageModulationTableNVFn coverageModulationTableNV;
	proto::GetCoverageModulationTableNVFn getCoverageModulationTableNV;
	// rasterSamplesEXT already defined in EXT_raster_multisample
	//- end: NV_framebuffer_mixed_samples

	//-//-- 
	//- Ext: NV_framebuffer_multisample_coverage
	bool NV_framebuffer_multisample_coverage;

	proto::RenderbufferStorageMultisampleCoverageNVFn renderbufferStorageMultisampleCoverageNV;
	//- end: NV_framebuffer_multisample_coverage

	//-//-- 
	//- Ext: NV_geometry_program4
	bool NV_geometry_program4;

	proto::FramebufferTextureEXTFn framebufferTextureEXT;
	proto::FramebufferTextureFaceEXTFn framebufferTextureFaceEXT;
	// framebufferTextureLayerEXT already defined in EXT_texture_array
	proto::ProgramVertexLimitNVFn programVertexLimitNV;
	//- end: NV_geometry_program4

	//-//-- 
	//- Ext: NV_gpu_program4
	bool NV_gpu_program4;

	proto::GetProgramEnvParameterIivNVFn getProgramEnvParameterIivNV;
	proto::GetProgramEnvParameterIuivNVFn getProgramEnvParameterIuivNV;
	proto::GetProgramLocalParameterIivNVFn getProgramLocalParameterIivNV;
	proto::GetProgramLocalParameterIuivNVFn getProgramLocalParameterIuivNV;
	proto::ProgramEnvParameterI4iNVFn programEnvParameterI4iNV;
	proto::ProgramEnvParameterI4ivNVFn programEnvParameterI4ivNV;
	proto::ProgramEnvParameterI4uiNVFn programEnvParameterI4uiNV;
	proto::ProgramEnvParameterI4uivNVFn programEnvParameterI4uivNV;
	proto::ProgramEnvParametersI4ivNVFn programEnvParametersI4ivNV;
	proto::ProgramEnvParametersI4uivNVFn programEnvParametersI4uivNV;
	proto::ProgramLocalParameterI4iNVFn programLocalParameterI4iNV;
	proto::ProgramLocalParameterI4ivNVFn programLocalParameterI4ivNV;
	proto::ProgramLocalParameterI4uiNVFn programLocalParameterI4uiNV;
	proto::ProgramLocalParameterI4uivNVFn programLocalParameterI4uivNV;
	proto::ProgramLocalParametersI4ivNVFn programLocalParametersI4ivNV;
	proto::ProgramLocalParametersI4uivNVFn programLocalParametersI4uivNV;
	//- end: NV_gpu_program4

	//-//-- 
	//- Ext: NV_gpu_program5
	bool NV_gpu_program5;

	proto::GetProgramSubroutineParameteruivNVFn getProgramSubroutineParameteruivNV;
	proto::ProgramSubroutineParametersuivNVFn programSubroutineParametersuivNV;
	//- end: NV_gpu_program5

	//-//-- 
	//- Ext: NV_gpu_shader5
	bool NV_gpu_shader5;

	// getUniformi64vNV already defined in AMD_gpu_shader_int64
	// programUniform1i64NV already defined in AMD_gpu_shader_int64
	// programUniform1i64vNV already defined in AMD_gpu_shader_int64
	// programUniform1ui64NV already defined in AMD_gpu_shader_int64
	// programUniform1ui64vNV already defined in AMD_gpu_shader_int64
	// programUniform2i64NV already defined in AMD_gpu_shader_int64
	// programUniform2i64vNV already defined in AMD_gpu_shader_int64
	// programUniform2ui64NV already defined in AMD_gpu_shader_int64
	// programUniform2ui64vNV already defined in AMD_gpu_shader_int64
	// programUniform3i64NV already defined in AMD_gpu_shader_int64
	// programUniform3i64vNV already defined in AMD_gpu_shader_int64
	// programUniform3ui64NV already defined in AMD_gpu_shader_int64
	// programUniform3ui64vNV already defined in AMD_gpu_shader_int64
	// programUniform4i64NV already defined in AMD_gpu_shader_int64
	// programUniform4i64vNV already defined in AMD_gpu_shader_int64
	// programUniform4ui64NV already defined in AMD_gpu_shader_int64
	// programUniform4ui64vNV already defined in AMD_gpu_shader_int64
	// uniform1i64NV already defined in AMD_gpu_shader_int64
	// uniform1i64vNV already defined in AMD_gpu_shader_int64
	// uniform1ui64NV already defined in AMD_gpu_shader_int64
	// uniform1ui64vNV already defined in AMD_gpu_shader_int64
	// uniform2i64NV already defined in AMD_gpu_shader_int64
	// uniform2i64vNV already defined in AMD_gpu_shader_int64
	// uniform2ui64NV already defined in AMD_gpu_shader_int64
	// uniform2ui64vNV already defined in AMD_gpu_shader_int64
	// uniform3i64NV already defined in AMD_gpu_shader_int64
	// uniform3i64vNV already defined in AMD_gpu_shader_int64
	// uniform3ui64NV already defined in AMD_gpu_shader_int64
	// uniform3ui64vNV already defined in AMD_gpu_shader_int64
	// uniform4i64NV already defined in AMD_gpu_shader_int64
	// uniform4i64vNV already defined in AMD_gpu_shader_int64
	// uniform4ui64NV already defined in AMD_gpu_shader_int64
	// uniform4ui64vNV already defined in AMD_gpu_shader_int64
	//- end: NV_gpu_shader5

	//-//-- 
	//- Ext: NV_half_float
	bool NV_half_float;

	proto::Color3hNVFn color3hNV;
	proto::Color3hvNVFn color3hvNV;
	proto::Color4hNVFn color4hNV;
	proto::Color4hvNVFn color4hvNV;
	proto::FogCoordhNVFn fogCoordhNV;
	proto::FogCoordhvNVFn fogCoordhvNV;
	proto::MultiTexCoord1hNVFn multiTexCoord1hNV;
	proto::MultiTexCoord1hvNVFn multiTexCoord1hvNV;
	proto::MultiTexCoord2hNVFn multiTexCoord2hNV;
	proto::MultiTexCoord2hvNVFn multiTexCoord2hvNV;
	proto::MultiTexCoord3hNVFn multiTexCoord3hNV;
	proto::MultiTexCoord3hvNVFn multiTexCoord3hvNV;
	proto::MultiTexCoord4hNVFn multiTexCoord4hNV;
	proto::MultiTexCoord4hvNVFn multiTexCoord4hvNV;
	proto::Normal3hNVFn normal3hNV;
	proto::Normal3hvNVFn normal3hvNV;
	proto::SecondaryColor3hNVFn secondaryColor3hNV;
	proto::SecondaryColor3hvNVFn secondaryColor3hvNV;
	proto::TexCoord1hNVFn texCoord1hNV;
	proto::TexCoord1hvNVFn texCoord1hvNV;
	proto::TexCoord2hNVFn texCoord2hNV;
	proto::TexCoord2hvNVFn texCoord2hvNV;
	proto::TexCoord3hNVFn texCoord3hNV;
	proto::TexCoord3hvNVFn texCoord3hvNV;
	proto::TexCoord4hNVFn texCoord4hNV;
	proto::TexCoord4hvNVFn texCoord4hvNV;
	proto::Vertex2hNVFn vertex2hNV;
	proto::Vertex2hvNVFn vertex2hvNV;
	proto::Vertex3hNVFn vertex3hNV;
	proto::Vertex3hvNVFn vertex3hvNV;
	proto::Vertex4hNVFn vertex4hNV;
	proto::Vertex4hvNVFn vertex4hvNV;
	proto::VertexAttrib1hNVFn vertexAttrib1hNV;
	proto::VertexAttrib1hvNVFn vertexAttrib1hvNV;
	proto::VertexAttrib2hNVFn vertexAttrib2hNV;
	proto::VertexAttrib2hvNVFn vertexAttrib2hvNV;
	proto::VertexAttrib3hNVFn vertexAttrib3hNV;
	proto::VertexAttrib3hvNVFn vertexAttrib3hvNV;
	proto::VertexAttrib4hNVFn vertexAttrib4hNV;
	proto::VertexAttrib4hvNVFn vertexAttrib4hvNV;
	proto::VertexAttribs1hvNVFn vertexAttribs1hvNV;
	proto::VertexAttribs2hvNVFn vertexAttribs2hvNV;
	proto::VertexAttribs3hvNVFn vertexAttribs3hvNV;
	proto::VertexAttribs4hvNVFn vertexAttribs4hvNV;
	proto::VertexWeighthNVFn vertexWeighthNV;
	proto::VertexWeighthvNVFn vertexWeighthvNV;
	//- end: NV_half_float

	//-//-- 
	//- Ext: NV_internalformat_sample_query
	bool NV_internalformat_sample_query;

	proto::GetInternalformatSampleivNVFn getInternalformatSampleivNV;
	//- end: NV_internalformat_sample_query

	//-//-- 
	//- Ext: NV_occlusion_query
	bool NV_occlusion_query;

	proto::BeginOcclusionQueryNVFn beginOcclusionQueryNV;
	proto::DeleteOcclusionQueriesNVFn deleteOcclusionQueriesNV;
	proto::EndOcclusionQueryNVFn endOcclusionQueryNV;
	proto::GenOcclusionQueriesNVFn genOcclusionQueriesNV;
	proto::GetOcclusionQueryivNVFn getOcclusionQueryivNV;
	proto::GetOcclusionQueryuivNVFn getOcclusionQueryuivNV;
	proto::IsOcclusionQueryNVFn isOcclusionQueryNV;
	//- end: NV_occlusion_query

	//-//-- 
	//- Ext: NV_parameter_buffer_object
	bool NV_parameter_buffer_object;

	proto::ProgramBufferParametersIivNVFn programBufferParametersIivNV;
	proto::ProgramBufferParametersIuivNVFn programBufferParametersIuivNV;
	proto::ProgramBufferParametersfvNVFn programBufferParametersfvNV;
	//- end: NV_parameter_buffer_object

	//-//-- 
	//- Ext: NV_path_rendering
	bool NV_path_rendering;

	proto::CopyPathNVFn copyPathNV;
	proto::CoverFillPathInstancedNVFn coverFillPathInstancedNV;
	proto::CoverFillPathNVFn coverFillPathNV;
	proto::CoverStrokePathInstancedNVFn coverStrokePathInstancedNV;
	proto::CoverStrokePathNVFn coverStrokePathNV;
	proto::DeletePathsNVFn deletePathsNV;
	proto::GenPathsNVFn genPathsNV;
	proto::GetPathColorGenfvNVFn getPathColorGenfvNV;
	proto::GetPathColorGenivNVFn getPathColorGenivNV;
	proto::GetPathCommandsNVFn getPathCommandsNV;
	proto::GetPathCoordsNVFn getPathCoordsNV;
	proto::GetPathDashArrayNVFn getPathDashArrayNV;
	proto::GetPathLengthNVFn getPathLengthNV;
	proto::GetPathMetricRangeNVFn getPathMetricRangeNV;
	proto::GetPathMetricsNVFn getPathMetricsNV;
	proto::GetPathParameterfvNVFn getPathParameterfvNV;
	proto::GetPathParameterivNVFn getPathParameterivNV;
	proto::GetPathSpacingNVFn getPathSpacingNV;
	proto::GetPathTexGenfvNVFn getPathTexGenfvNV;
	proto::GetPathTexGenivNVFn getPathTexGenivNV;
	proto::GetProgramResourcefvNVFn getProgramResourcefvNV;
	proto::InterpolatePathsNVFn interpolatePathsNV;
	proto::IsPathNVFn isPathNV;
	proto::IsPointInFillPathNVFn isPointInFillPathNV;
	proto::IsPointInStrokePathNVFn isPointInStrokePathNV;
	proto::MatrixLoad3x2fNVFn matrixLoad3x2fNV;
	proto::MatrixLoad3x3fNVFn matrixLoad3x3fNV;
	proto::MatrixLoadTranspose3x3fNVFn matrixLoadTranspose3x3fNV;
	proto::MatrixMult3x2fNVFn matrixMult3x2fNV;
	proto::MatrixMult3x3fNVFn matrixMult3x3fNV;
	proto::MatrixMultTranspose3x3fNVFn matrixMultTranspose3x3fNV;
	proto::PathColorGenNVFn pathColorGenNV;
	proto::PathCommandsNVFn pathCommandsNV;
	proto::PathCoordsNVFn pathCoordsNV;
	proto::PathCoverDepthFuncNVFn pathCoverDepthFuncNV;
	proto::PathDashArrayNVFn pathDashArrayNV;
	proto::PathFogGenNVFn pathFogGenNV;
	proto::PathGlyphIndexArrayNVFn pathGlyphIndexArrayNV;
	proto::PathGlyphIndexRangeNVFn pathGlyphIndexRangeNV;
	proto::PathGlyphRangeNVFn pathGlyphRangeNV;
	proto::PathGlyphsNVFn pathGlyphsNV;
	proto::PathMemoryGlyphIndexArrayNVFn pathMemoryGlyphIndexArrayNV;
	proto::PathParameterfNVFn pathParameterfNV;
	proto::PathParameterfvNVFn pathParameterfvNV;
	proto::PathParameteriNVFn pathParameteriNV;
	proto::PathParameterivNVFn pathParameterivNV;
	proto::PathStencilDepthOffsetNVFn pathStencilDepthOffsetNV;
	proto::PathStencilFuncNVFn pathStencilFuncNV;
	proto::PathStringNVFn pathStringNV;
	proto::PathSubCommandsNVFn pathSubCommandsNV;
	proto::PathSubCoordsNVFn pathSubCoordsNV;
	proto::PathTexGenNVFn pathTexGenNV;
	proto::PointAlongPathNVFn pointAlongPathNV;
	proto::ProgramPathFragmentInputGenNVFn programPathFragmentInputGenNV;
	proto::StencilFillPathInstancedNVFn stencilFillPathInstancedNV;
	proto::StencilFillPathNVFn stencilFillPathNV;
	proto::StencilStrokePathInstancedNVFn stencilStrokePathInstancedNV;
	proto::StencilStrokePathNVFn stencilStrokePathNV;
	proto::StencilThenCoverFillPathInstancedNVFn stencilThenCoverFillPathInstancedNV;
	proto::StencilThenCoverFillPathNVFn stencilThenCoverFillPathNV;
	proto::StencilThenCoverStrokePathInstancedNVFn stencilThenCoverStrokePathInstancedNV;
	proto::StencilThenCoverStrokePathNVFn stencilThenCoverStrokePathNV;
	proto::TransformPathNVFn transformPathNV;
	proto::WeightPathsNVFn weightPathsNV;
	//- end: NV_path_rendering

	//-//-- 
	//- Ext: NV_pixel_data_range
	bool NV_pixel_data_range;

	proto::FlushPixelDataRangeNVFn flushPixelDataRangeNV;
	proto::PixelDataRangeNVFn pixelDataRangeNV;
	//- end: NV_pixel_data_range

	//-//-- 
	//- Ext: NV_point_sprite
	bool NV_point_sprite;

	proto::PointParameteriNVFn pointParameteriNV;
	proto::PointParameterivNVFn pointParameterivNV;
	//- end: NV_point_sprite

	//-//-- 
	//- Ext: NV_present_video
	bool NV_present_video;

	proto::GetVideoi64vNVFn getVideoi64vNV;
	proto::GetVideoivNVFn getVideoivNV;
	proto::GetVideoui64vNVFn getVideoui64vNV;
	proto::GetVideouivNVFn getVideouivNV;
	proto::PresentFrameDualFillNVFn presentFrameDualFillNV;
	proto::PresentFrameKeyedNVFn presentFrameKeyedNV;
	//- end: NV_present_video

	//-//-- 
	//- Ext: NV_primitive_restart
	bool NV_primitive_restart;

	proto::PrimitiveRestartIndexNVFn primitiveRestartIndexNV;
	proto::PrimitiveRestartNVFn primitiveRestartNV;
	//- end: NV_primitive_restart

	//-//-- 
	//- Ext: NV_register_combiners
	bool NV_register_combiners;

	proto::CombinerInputNVFn combinerInputNV;
	proto::CombinerOutputNVFn combinerOutputNV;
	proto::CombinerParameterfNVFn combinerParameterfNV;
	proto::CombinerParameterfvNVFn combinerParameterfvNV;
	proto::CombinerParameteriNVFn combinerParameteriNV;
	proto::CombinerParameterivNVFn combinerParameterivNV;
	proto::FinalCombinerInputNVFn finalCombinerInputNV;
	proto::GetCombinerInputParameterfvNVFn getCombinerInputParameterfvNV;
	proto::GetCombinerInputParameterivNVFn getCombinerInputParameterivNV;
	proto::GetCombinerOutputParameterfvNVFn getCombinerOutputParameterfvNV;
	proto::GetCombinerOutputParameterivNVFn getCombinerOutputParameterivNV;
	proto::GetFinalCombinerInputParameterfvNVFn getFinalCombinerInputParameterfvNV;
	proto::GetFinalCombinerInputParameterivNVFn getFinalCombinerInputParameterivNV;
	//- end: NV_register_combiners

	//-//-- 
	//- Ext: NV_register_combiners2
	bool NV_register_combiners2;

	proto::CombinerStageParameterfvNVFn combinerStageParameterfvNV;
	proto::GetCombinerStageParameterfvNVFn getCombinerStageParameterfvNV;
	//- end: NV_register_combiners2

	//-//-- 
	//- Ext: NV_sample_locations
	bool NV_sample_locations;

	proto::FramebufferSampleLocationsfvNVFn framebufferSampleLocationsfvNV;
	proto::NamedFramebufferSampleLocationsfvNVFn namedFramebufferSampleLocationsfvNV;
	proto::ResolveDepthValuesNVFn resolveDepthValuesNV;
	//- end: NV_sample_locations

	//-//-- 
	//- Ext: NV_shader_buffer_load
	bool NV_shader_buffer_load;

	proto::GetBufferParameterui64vNVFn getBufferParameterui64vNV;
	proto::GetIntegerui64vNVFn getIntegerui64vNV;
	proto::GetNamedBufferParameterui64vNVFn getNamedBufferParameterui64vNV;
	// getUniformui64vNV already defined in AMD_gpu_shader_int64
	proto::IsBufferResidentNVFn isBufferResidentNV;
	proto::IsNamedBufferResidentNVFn isNamedBufferResidentNV;
	proto::MakeBufferNonResidentNVFn makeBufferNonResidentNV;
	proto::MakeBufferResidentNVFn makeBufferResidentNV;
	proto::MakeNamedBufferNonResidentNVFn makeNamedBufferNonResidentNV;
	proto::MakeNamedBufferResidentNVFn makeNamedBufferResidentNV;
	proto::ProgramUniformui64NVFn programUniformui64NV;
	proto::ProgramUniformui64vNVFn programUniformui64vNV;
	proto::Uniformui64NVFn uniformui64NV;
	proto::Uniformui64vNVFn uniformui64vNV;
	//- end: NV_shader_buffer_load

	//-//-- 
	//- Ext: NV_texture_barrier
	bool NV_texture_barrier;

	proto::TextureBarrierNVFn textureBarrierNV;
	//- end: NV_texture_barrier

	//-//-- 
	//- Ext: NV_texture_multisample
	bool NV_texture_multisample;

	proto::TexImage2DMultisampleCoverageNVFn texImage2DMultisampleCoverageNV;
	proto::TexImage3DMultisampleCoverageNVFn texImage3DMultisampleCoverageNV;
	proto::TextureImage2DMultisampleCoverageNVFn textureImage2DMultisampleCoverageNV;
	proto::TextureImage2DMultisampleNVFn textureImage2DMultisampleNV;
	proto::TextureImage3DMultisampleCoverageNVFn textureImage3DMultisampleCoverageNV;
	proto::TextureImage3DMultisampleNVFn textureImage3DMultisampleNV;
	//- end: NV_texture_multisample

	//-//-- 
	//- Ext: NV_transform_feedback
	bool NV_transform_feedback;

	proto::ActiveVaryingNVFn activeVaryingNV;
	proto::BeginTransformFeedbackNVFn beginTransformFeedbackNV;
	proto::BindBufferBaseNVFn bindBufferBaseNV;
	proto::BindBufferOffsetNVFn bindBufferOffsetNV;
	proto::BindBufferRangeNVFn bindBufferRangeNV;
	proto::EndTransformFeedbackNVFn endTransformFeedbackNV;
	proto::GetActiveVaryingNVFn getActiveVaryingNV;
	proto::GetTransformFeedbackVaryingNVFn getTransformFeedbackVaryingNV;
	proto::GetVaryingLocationNVFn getVaryingLocationNV;
	proto::TransformFeedbackAttribsNVFn transformFeedbackAttribsNV;
	proto::TransformFeedbackStreamAttribsNVFn transformFeedbackStreamAttribsNV;
	proto::TransformFeedbackVaryingsNVFn transformFeedbackVaryingsNV;
	//- end: NV_transform_feedback

	//-//-- 
	//- Ext: NV_transform_feedback2
	bool NV_transform_feedback2;

	proto::BindTransformFeedbackNVFn bindTransformFeedbackNV;
	proto::DeleteTransformFeedbacksNVFn deleteTransformFeedbacksNV;
	proto::DrawTransformFeedbackNVFn drawTransformFeedbackNV;
	proto::GenTransformFeedbacksNVFn genTransformFeedbacksNV;
	proto::IsTransformFeedbackNVFn isTransformFeedbackNV;
	proto::PauseTransformFeedbackNVFn pauseTransformFeedbackNV;
	proto::ResumeTransformFeedbackNVFn resumeTransformFeedbackNV;
	//- end: NV_transform_feedback2

	//-//-- 
	//- Ext: NV_vdpau_interop
	bool NV_vdpau_interop;

	proto::VDPAUFiniNVFn vDPAUFiniNV;
	proto::VDPAUGetSurfaceivNVFn vDPAUGetSurfaceivNV;
	proto::VDPAUInitNVFn vDPAUInitNV;
	proto::VDPAUIsSurfaceNVFn vDPAUIsSurfaceNV;
	proto::VDPAUMapSurfacesNVFn vDPAUMapSurfacesNV;
	proto::VDPAURegisterOutputSurfaceNVFn vDPAURegisterOutputSurfaceNV;
	proto::VDPAURegisterVideoSurfaceNVFn vDPAURegisterVideoSurfaceNV;
	proto::VDPAUSurfaceAccessNVFn vDPAUSurfaceAccessNV;
	proto::VDPAUUnmapSurfacesNVFn vDPAUUnmapSurfacesNV;
	proto::VDPAUUnregisterSurfaceNVFn vDPAUUnregisterSurfaceNV;
	//- end: NV_vdpau_interop

	//-//-- 
	//- Ext: NV_vertex_array_range
	bool NV_vertex_array_range;

	proto::FlushVertexArrayRangeNVFn flushVertexArrayRangeNV;
	proto::VertexArrayRangeNVFn vertexArrayRangeNV;
	//- end: NV_vertex_array_range

	//-//-- 
	//- Ext: NV_vertex_attrib_integer_64bit
	bool NV_vertex_attrib_integer_64bit;

	proto::GetVertexAttribLi64vNVFn getVertexAttribLi64vNV;
	proto::GetVertexAttribLui64vNVFn getVertexAttribLui64vNV;
	proto::VertexAttribL1i64NVFn vertexAttribL1i64NV;
	proto::VertexAttribL1i64vNVFn vertexAttribL1i64vNV;
	proto::VertexAttribL1ui64NVFn vertexAttribL1ui64NV;
	proto::VertexAttribL1ui64vNVFn vertexAttribL1ui64vNV;
	proto::VertexAttribL2i64NVFn vertexAttribL2i64NV;
	proto::VertexAttribL2i64vNVFn vertexAttribL2i64vNV;
	proto::VertexAttribL2ui64NVFn vertexAttribL2ui64NV;
	proto::VertexAttribL2ui64vNVFn vertexAttribL2ui64vNV;
	proto::VertexAttribL3i64NVFn vertexAttribL3i64NV;
	proto::VertexAttribL3i64vNVFn vertexAttribL3i64vNV;
	proto::VertexAttribL3ui64NVFn vertexAttribL3ui64NV;
	proto::VertexAttribL3ui64vNVFn vertexAttribL3ui64vNV;
	proto::VertexAttribL4i64NVFn vertexAttribL4i64NV;
	proto::VertexAttribL4i64vNVFn vertexAttribL4i64vNV;
	proto::VertexAttribL4ui64NVFn vertexAttribL4ui64NV;
	proto::VertexAttribL4ui64vNVFn vertexAttribL4ui64vNV;
	proto::VertexAttribLFormatNVFn vertexAttribLFormatNV;
	//- end: NV_vertex_attrib_integer_64bit

	//-//-- 
	//- Ext: NV_vertex_buffer_unified_memory
	bool NV_vertex_buffer_unified_memory;

	proto::BufferAddressRangeNVFn bufferAddressRangeNV;
	proto::ColorFormatNVFn colorFormatNV;
	proto::EdgeFlagFormatNVFn edgeFlagFormatNV;
	proto::FogCoordFormatNVFn fogCoordFormatNV;
	proto::GetIntegerui64i_vNVFn getIntegerui64i_vNV;
	proto::IndexFormatNVFn indexFormatNV;
	proto::NormalFormatNVFn normalFormatNV;
	proto::SecondaryColorFormatNVFn secondaryColorFormatNV;
	proto::TexCoordFormatNVFn texCoordFormatNV;
	proto::VertexAttribFormatNVFn vertexAttribFormatNV;
	proto::VertexAttribIFormatNVFn vertexAttribIFormatNV;
	proto::VertexFormatNVFn vertexFormatNV;
	//- end: NV_vertex_buffer_unified_memory

	//-//-- 
	//- Ext: NV_vertex_program
	bool NV_vertex_program;

	proto::AreProgramsResidentNVFn areProgramsResidentNV;
	proto::BindProgramNVFn bindProgramNV;
	proto::DeleteProgramsNVFn deleteProgramsNV;
	proto::ExecuteProgramNVFn executeProgramNV;
	proto::GenProgramsNVFn genProgramsNV;
	proto::GetProgramParameterdvNVFn getProgramParameterdvNV;
	proto::GetProgramParameterfvNVFn getProgramParameterfvNV;
	proto::GetProgramStringNVFn getProgramStringNV;
	proto::GetProgramivNVFn getProgramivNV;
	proto::GetTrackMatrixivNVFn getTrackMatrixivNV;
	proto::GetVertexAttribPointervNVFn getVertexAttribPointervNV;
	proto::GetVertexAttribdvNVFn getVertexAttribdvNV;
	proto::GetVertexAttribfvNVFn getVertexAttribfvNV;
	proto::GetVertexAttribivNVFn getVertexAttribivNV;
	proto::IsProgramNVFn isProgramNV;
	proto::LoadProgramNVFn loadProgramNV;
	proto::ProgramParameter4dNVFn programParameter4dNV;
	proto::ProgramParameter4dvNVFn programParameter4dvNV;
	proto::ProgramParameter4fNVFn programParameter4fNV;
	proto::ProgramParameter4fvNVFn programParameter4fvNV;
	proto::ProgramParameters4dvNVFn programParameters4dvNV;
	proto::ProgramParameters4fvNVFn programParameters4fvNV;
	proto::RequestResidentProgramsNVFn requestResidentProgramsNV;
	proto::TrackMatrixNVFn trackMatrixNV;
	proto::VertexAttrib1dNVFn vertexAttrib1dNV;
	proto::VertexAttrib1dvNVFn vertexAttrib1dvNV;
	proto::VertexAttrib1fNVFn vertexAttrib1fNV;
	proto::VertexAttrib1fvNVFn vertexAttrib1fvNV;
	proto::VertexAttrib1sNVFn vertexAttrib1sNV;
	proto::VertexAttrib1svNVFn vertexAttrib1svNV;
	proto::VertexAttrib2dNVFn vertexAttrib2dNV;
	proto::VertexAttrib2dvNVFn vertexAttrib2dvNV;
	proto::VertexAttrib2fNVFn vertexAttrib2fNV;
	proto::VertexAttrib2fvNVFn vertexAttrib2fvNV;
	proto::VertexAttrib2sNVFn vertexAttrib2sNV;
	proto::VertexAttrib2svNVFn vertexAttrib2svNV;
	proto::VertexAttrib3dNVFn vertexAttrib3dNV;
	proto::VertexAttrib3dvNVFn vertexAttrib3dvNV;
	proto::VertexAttrib3fNVFn vertexAttrib3fNV;
	proto::VertexAttrib3fvNVFn vertexAttrib3fvNV;
	proto::VertexAttrib3sNVFn vertexAttrib3sNV;
	proto::VertexAttrib3svNVFn vertexAttrib3svNV;
	proto::VertexAttrib4dNVFn vertexAttrib4dNV;
	proto::VertexAttrib4dvNVFn vertexAttrib4dvNV;
	proto::VertexAttrib4fNVFn vertexAttrib4fNV;
	proto::VertexAttrib4fvNVFn vertexAttrib4fvNV;
	proto::VertexAttrib4sNVFn vertexAttrib4sNV;
	proto::VertexAttrib4svNVFn vertexAttrib4svNV;
	proto::VertexAttrib4ubNVFn vertexAttrib4ubNV;
	proto::VertexAttrib4ubvNVFn vertexAttrib4ubvNV;
	proto::VertexAttribPointerNVFn vertexAttribPointerNV;
	proto::VertexAttribs1dvNVFn vertexAttribs1dvNV;
	proto::VertexAttribs1fvNVFn vertexAttribs1fvNV;
	proto::VertexAttribs1svNVFn vertexAttribs1svNV;
	proto::VertexAttribs2dvNVFn vertexAttribs2dvNV;
	proto::VertexAttribs2fvNVFn vertexAttribs2fvNV;
	proto::VertexAttribs2svNVFn vertexAttribs2svNV;
	proto::VertexAttribs3dvNVFn vertexAttribs3dvNV;
	proto::VertexAttribs3fvNVFn vertexAttribs3fvNV;
	proto::VertexAttribs3svNVFn vertexAttribs3svNV;
	proto::VertexAttribs4dvNVFn vertexAttribs4dvNV;
	proto::VertexAttribs4fvNVFn vertexAttribs4fvNV;
	proto::VertexAttribs4svNVFn vertexAttribs4svNV;
	proto::VertexAttribs4ubvNVFn vertexAttribs4ubvNV;
	//- end: NV_vertex_program

	//-//-- 
	//- Ext: NV_vertex_program4
	bool NV_vertex_program4;

	proto::GetVertexAttribIivEXTFn getVertexAttribIivEXT;
	proto::GetVertexAttribIuivEXTFn getVertexAttribIuivEXT;
	proto::VertexAttribI1iEXTFn vertexAttribI1iEXT;
	proto::VertexAttribI1ivEXTFn vertexAttribI1ivEXT;
	proto::VertexAttribI1uiEXTFn vertexAttribI1uiEXT;
	proto::VertexAttribI1uivEXTFn vertexAttribI1uivEXT;
	proto::VertexAttribI2iEXTFn vertexAttribI2iEXT;
	proto::VertexAttribI2ivEXTFn vertexAttribI2ivEXT;
	proto::VertexAttribI2uiEXTFn vertexAttribI2uiEXT;
	proto::VertexAttribI2uivEXTFn vertexAttribI2uivEXT;
	proto::VertexAttribI3iEXTFn vertexAttribI3iEXT;
	proto::VertexAttribI3ivEXTFn vertexAttribI3ivEXT;
	proto::VertexAttribI3uiEXTFn vertexAttribI3uiEXT;
	proto::VertexAttribI3uivEXTFn vertexAttribI3uivEXT;
	proto::VertexAttribI4bvEXTFn vertexAttribI4bvEXT;
	proto::VertexAttribI4iEXTFn vertexAttribI4iEXT;
	proto::VertexAttribI4ivEXTFn vertexAttribI4ivEXT;
	proto::VertexAttribI4svEXTFn vertexAttribI4svEXT;
	proto::VertexAttribI4ubvEXTFn vertexAttribI4ubvEXT;
	proto::VertexAttribI4uiEXTFn vertexAttribI4uiEXT;
	proto::VertexAttribI4uivEXTFn vertexAttribI4uivEXT;
	proto::VertexAttribI4usvEXTFn vertexAttribI4usvEXT;
	proto::VertexAttribIPointerEXTFn vertexAttribIPointerEXT;
	//- end: NV_vertex_program4

	//-//-- 
	//- Ext: NV_video_capture
	bool NV_video_capture;

	proto::BeginVideoCaptureNVFn beginVideoCaptureNV;
	proto::BindVideoCaptureStreamBufferNVFn bindVideoCaptureStreamBufferNV;
	proto::BindVideoCaptureStreamTextureNVFn bindVideoCaptureStreamTextureNV;
	proto::EndVideoCaptureNVFn endVideoCaptureNV;
	proto::GetVideoCaptureStreamdvNVFn getVideoCaptureStreamdvNV;
	proto::GetVideoCaptureStreamfvNVFn getVideoCaptureStreamfvNV;
	proto::GetVideoCaptureStreamivNVFn getVideoCaptureStreamivNV;
	proto::GetVideoCaptureivNVFn getVideoCaptureivNV;
	proto::VideoCaptureNVFn videoCaptureNV;
	proto::VideoCaptureStreamParameterdvNVFn videoCaptureStreamParameterdvNV;
	proto::VideoCaptureStreamParameterfvNVFn videoCaptureStreamParameterfvNV;
	proto::VideoCaptureStreamParameterivNVFn videoCaptureStreamParameterivNV;
	//- end: NV_video_capture

	//-//-- 
	//- Ext: OES_byte_coordinates
	bool OES_byte_coordinates;

	proto::MultiTexCoord1bOESFn multiTexCoord1bOES;
	proto::MultiTexCoord1bvOESFn multiTexCoord1bvOES;
	proto::MultiTexCoord2bOESFn multiTexCoord2bOES;
	proto::MultiTexCoord2bvOESFn multiTexCoord2bvOES;
	proto::MultiTexCoord3bOESFn multiTexCoord3bOES;
	proto::MultiTexCoord3bvOESFn multiTexCoord3bvOES;
	proto::MultiTexCoord4bOESFn multiTexCoord4bOES;
	proto::MultiTexCoord4bvOESFn multiTexCoord4bvOES;
	proto::TexCoord1bOESFn texCoord1bOES;
	proto::TexCoord1bvOESFn texCoord1bvOES;
	proto::TexCoord2bOESFn texCoord2bOES;
	proto::TexCoord2bvOESFn texCoord2bvOES;
	proto::TexCoord3bOESFn texCoord3bOES;
	proto::TexCoord3bvOESFn texCoord3bvOES;
	proto::TexCoord4bOESFn texCoord4bOES;
	proto::TexCoord4bvOESFn texCoord4bvOES;
	proto::Vertex2bOESFn vertex2bOES;
	proto::Vertex2bvOESFn vertex2bvOES;
	proto::Vertex3bOESFn vertex3bOES;
	proto::Vertex3bvOESFn vertex3bvOES;
	proto::Vertex4bOESFn vertex4bOES;
	proto::Vertex4bvOESFn vertex4bvOES;
	//- end: OES_byte_coordinates

	//-//-- 
	//- Ext: OES_fixed_point
	bool OES_fixed_point;

	proto::AccumxOESFn accumxOES;
	proto::AlphaFuncxOESFn alphaFuncxOES;
	proto::BitmapxOESFn bitmapxOES;
	proto::BlendColorxOESFn blendColorxOES;
	proto::ClearAccumxOESFn clearAccumxOES;
	proto::ClearColorxOESFn clearColorxOES;
	proto::ClearDepthxOESFn clearDepthxOES;
	proto::ClipPlanexOESFn clipPlanexOES;
	proto::Color3xOESFn color3xOES;
	proto::Color3xvOESFn color3xvOES;
	proto::Color4xOESFn color4xOES;
	proto::Color4xvOESFn color4xvOES;
	proto::ConvolutionParameterxOESFn convolutionParameterxOES;
	proto::ConvolutionParameterxvOESFn convolutionParameterxvOES;
	proto::DepthRangexOESFn depthRangexOES;
	proto::EvalCoord1xOESFn evalCoord1xOES;
	proto::EvalCoord1xvOESFn evalCoord1xvOES;
	proto::EvalCoord2xOESFn evalCoord2xOES;
	proto::EvalCoord2xvOESFn evalCoord2xvOES;
	proto::FeedbackBufferxOESFn feedbackBufferxOES;
	proto::FogxOESFn fogxOES;
	proto::FogxvOESFn fogxvOES;
	proto::FrustumxOESFn frustumxOES;
	proto::GetClipPlanexOESFn getClipPlanexOES;
	proto::GetConvolutionParameterxvOESFn getConvolutionParameterxvOES;
	proto::GetFixedvOESFn getFixedvOES;
	proto::GetHistogramParameterxvOESFn getHistogramParameterxvOES;
	proto::GetLightxOESFn getLightxOES;
	proto::GetMapxvOESFn getMapxvOES;
	proto::GetMaterialxOESFn getMaterialxOES;
	proto::GetPixelMapxvFn getPixelMapxv;
	proto::GetTexEnvxvOESFn getTexEnvxvOES;
	proto::GetTexGenxvOESFn getTexGenxvOES;
	proto::GetTexLevelParameterxvOESFn getTexLevelParameterxvOES;
	proto::GetTexParameterxvOESFn getTexParameterxvOES;
	proto::IndexxOESFn indexxOES;
	proto::IndexxvOESFn indexxvOES;
	proto::LightModelxOESFn lightModelxOES;
	proto::LightModelxvOESFn lightModelxvOES;
	proto::LightxOESFn lightxOES;
	proto::LightxvOESFn lightxvOES;
	proto::LineWidthxOESFn lineWidthxOES;
	proto::LoadMatrixxOESFn loadMatrixxOES;
	proto::LoadTransposeMatrixxOESFn loadTransposeMatrixxOES;
	proto::Map1xOESFn map1xOES;
	proto::Map2xOESFn map2xOES;
	proto::MapGrid1xOESFn mapGrid1xOES;
	proto::MapGrid2xOESFn mapGrid2xOES;
	proto::MaterialxOESFn materialxOES;
	proto::MaterialxvOESFn materialxvOES;
	proto::MultMatrixxOESFn multMatrixxOES;
	proto::MultTransposeMatrixxOESFn multTransposeMatrixxOES;
	proto::MultiTexCoord1xOESFn multiTexCoord1xOES;
	proto::MultiTexCoord1xvOESFn multiTexCoord1xvOES;
	proto::MultiTexCoord2xOESFn multiTexCoord2xOES;
	proto::MultiTexCoord2xvOESFn multiTexCoord2xvOES;
	proto::MultiTexCoord3xOESFn multiTexCoord3xOES;
	proto::MultiTexCoord3xvOESFn multiTexCoord3xvOES;
	proto::MultiTexCoord4xOESFn multiTexCoord4xOES;
	proto::MultiTexCoord4xvOESFn multiTexCoord4xvOES;
	proto::Normal3xOESFn normal3xOES;
	proto::Normal3xvOESFn normal3xvOES;
	proto::OrthoxOESFn orthoxOES;
	proto::PassThroughxOESFn passThroughxOES;
	proto::PixelMapxFn pixelMapx;
	proto::PixelStorexFn pixelStorex;
	proto::PixelTransferxOESFn pixelTransferxOES;
	proto::PixelZoomxOESFn pixelZoomxOES;
	proto::PointParameterxvOESFn pointParameterxvOES;
	proto::PointSizexOESFn pointSizexOES;
	proto::PolygonOffsetxOESFn polygonOffsetxOES;
	proto::PrioritizeTexturesxOESFn prioritizeTexturesxOES;
	proto::RasterPos2xOESFn rasterPos2xOES;
	proto::RasterPos2xvOESFn rasterPos2xvOES;
	proto::RasterPos3xOESFn rasterPos3xOES;
	proto::RasterPos3xvOESFn rasterPos3xvOES;
	proto::RasterPos4xOESFn rasterPos4xOES;
	proto::RasterPos4xvOESFn rasterPos4xvOES;
	proto::RectxOESFn rectxOES;
	proto::RectxvOESFn rectxvOES;
	proto::RotatexOESFn rotatexOES;
	proto::ScalexOESFn scalexOES;
	proto::TexCoord1xOESFn texCoord1xOES;
	proto::TexCoord1xvOESFn texCoord1xvOES;
	proto::TexCoord2xOESFn texCoord2xOES;
	proto::TexCoord2xvOESFn texCoord2xvOES;
	proto::TexCoord3xOESFn texCoord3xOES;
	proto::TexCoord3xvOESFn texCoord3xvOES;
	proto::TexCoord4xOESFn texCoord4xOES;
	proto::TexCoord4xvOESFn texCoord4xvOES;
	proto::TexEnvxOESFn texEnvxOES;
	proto::TexEnvxvOESFn texEnvxvOES;
	proto::TexGenxOESFn texGenxOES;
	proto::TexGenxvOESFn texGenxvOES;
	proto::TexParameterxOESFn texParameterxOES;
	proto::TexParameterxvOESFn texParameterxvOES;
	proto::TranslatexOESFn translatexOES;
	proto::Vertex2xOESFn vertex2xOES;
	proto::Vertex2xvOESFn vertex2xvOES;
	proto::Vertex3xOESFn vertex3xOES;
	proto::Vertex3xvOESFn vertex3xvOES;
	proto::Vertex4xOESFn vertex4xOES;
	proto::Vertex4xvOESFn vertex4xvOES;
	//- end: OES_fixed_point

	//-//-- 
	//- Ext: OES_query_matrix
	bool OES_query_matrix;

	proto::QueryMatrixxOESFn queryMatrixxOES;
	//- end: OES_query_matrix

	//-//-- 
	//- Ext: OES_single_precision
	bool OES_single_precision;

	proto::ClearDepthfOESFn clearDepthfOES;
	proto::ClipPlanefOESFn clipPlanefOES;
	proto::DepthRangefOESFn depthRangefOES;
	proto::FrustumfOESFn frustumfOES;
	proto::GetClipPlanefOESFn getClipPlanefOES;
	proto::OrthofOESFn orthofOES;
	//- end: OES_single_precision

	//-//-- 
	//- Ext: OVR_multiview
	bool OVR_multiview;

	proto::FramebufferTextureMultiviewOVRFn framebufferTextureMultiviewOVR;
	//- end: OVR_multiview

	//-//-- 
	//- Ext: PGI_misc_hints
	bool PGI_misc_hints;

	proto::HintPGIFn hintPGI;
	//- end: PGI_misc_hints

	//-//-- 
	//- Ext: SGIS_detail_texture
	bool SGIS_detail_texture;

	proto::DetailTexFuncSGISFn detailTexFuncSGIS;
	proto::GetDetailTexFuncSGISFn getDetailTexFuncSGIS;
	//- end: SGIS_detail_texture

	//-//-- 
	//- Ext: SGIS_fog_function
	bool SGIS_fog_function;

	proto::FogFuncSGISFn fogFuncSGIS;
	proto::GetFogFuncSGISFn getFogFuncSGIS;
	//- end: SGIS_fog_function

	//-//-- 
	//- Ext: SGIS_multisample
	bool SGIS_multisample;

	proto::SampleMaskSGISFn sampleMaskSGIS;
	proto::SamplePatternSGISFn samplePatternSGIS;
	//- end: SGIS_multisample

	//-//-- 
	//- Ext: SGIS_pixel_texture
	bool SGIS_pixel_texture;

	proto::GetPixelTexGenParameterfvSGISFn getPixelTexGenParameterfvSGIS;
	proto::GetPixelTexGenParameterivSGISFn getPixelTexGenParameterivSGIS;
	proto::PixelTexGenParameterfSGISFn pixelTexGenParameterfSGIS;
	proto::PixelTexGenParameterfvSGISFn pixelTexGenParameterfvSGIS;
	proto::PixelTexGenParameteriSGISFn pixelTexGenParameteriSGIS;
	proto::PixelTexGenParameterivSGISFn pixelTexGenParameterivSGIS;
	//- end: SGIS_pixel_texture

	//-//-- 
	//- Ext: SGIS_point_parameters
	bool SGIS_point_parameters;

	proto::PointParameterfSGISFn pointParameterfSGIS;
	proto::PointParameterfvSGISFn pointParameterfvSGIS;
	//- end: SGIS_point_parameters

	//-//-- 
	//- Ext: SGIS_sharpen_texture
	bool SGIS_sharpen_texture;

	proto::GetSharpenTexFuncSGISFn getSharpenTexFuncSGIS;
	proto::SharpenTexFuncSGISFn sharpenTexFuncSGIS;
	//- end: SGIS_sharpen_texture

	//-//-- 
	//- Ext: SGIS_texture4D
	bool SGIS_texture4D;

	proto::TexImage4DSGISFn texImage4DSGIS;
	proto::TexSubImage4DSGISFn texSubImage4DSGIS;
	//- end: SGIS_texture4D

	//-//-- 
	//- Ext: SGIS_texture_color_mask
	bool SGIS_texture_color_mask;

	proto::TextureColorMaskSGISFn textureColorMaskSGIS;
	//- end: SGIS_texture_color_mask

	//-//-- 
	//- Ext: SGIS_texture_filter4
	bool SGIS_texture_filter4;

	proto::GetTexFilterFuncSGISFn getTexFilterFuncSGIS;
	proto::TexFilterFuncSGISFn texFilterFuncSGIS;
	//- end: SGIS_texture_filter4

	//-//-- 
	//- Ext: SGIX_async
	bool SGIX_async;

	proto::AsyncMarkerSGIXFn asyncMarkerSGIX;
	proto::DeleteAsyncMarkersSGIXFn deleteAsyncMarkersSGIX;
	proto::FinishAsyncSGIXFn finishAsyncSGIX;
	proto::GenAsyncMarkersSGIXFn genAsyncMarkersSGIX;
	proto::IsAsyncMarkerSGIXFn isAsyncMarkerSGIX;
	proto::PollAsyncSGIXFn pollAsyncSGIX;
	//- end: SGIX_async

	//-//-- 
	//- Ext: SGIX_flush_raster
	bool SGIX_flush_raster;

	proto::FlushRasterSGIXFn flushRasterSGIX;
	//- end: SGIX_flush_raster

	//-//-- 
	//- Ext: SGIX_fragment_lighting
	bool SGIX_fragment_lighting;

	proto::FragmentColorMaterialSGIXFn fragmentColorMaterialSGIX;
	proto::FragmentLightModelfSGIXFn fragmentLightModelfSGIX;
	proto::FragmentLightModelfvSGIXFn fragmentLightModelfvSGIX;
	proto::FragmentLightModeliSGIXFn fragmentLightModeliSGIX;
	proto::FragmentLightModelivSGIXFn fragmentLightModelivSGIX;
	proto::FragmentLightfSGIXFn fragmentLightfSGIX;
	proto::FragmentLightfvSGIXFn fragmentLightfvSGIX;
	proto::FragmentLightiSGIXFn fragmentLightiSGIX;
	proto::FragmentLightivSGIXFn fragmentLightivSGIX;
	proto::FragmentMaterialfSGIXFn fragmentMaterialfSGIX;
	proto::FragmentMaterialfvSGIXFn fragmentMaterialfvSGIX;
	proto::FragmentMaterialiSGIXFn fragmentMaterialiSGIX;
	proto::FragmentMaterialivSGIXFn fragmentMaterialivSGIX;
	proto::GetFragmentLightfvSGIXFn getFragmentLightfvSGIX;
	proto::GetFragmentLightivSGIXFn getFragmentLightivSGIX;
	proto::GetFragmentMaterialfvSGIXFn getFragmentMaterialfvSGIX;
	proto::GetFragmentMaterialivSGIXFn getFragmentMaterialivSGIX;
	proto::LightEnviSGIXFn lightEnviSGIX;
	//- end: SGIX_fragment_lighting

	//-//-- 
	//- Ext: SGIX_framezoom
	bool SGIX_framezoom;

	proto::FrameZoomSGIXFn frameZoomSGIX;
	//- end: SGIX_framezoom

	//-//-- 
	//- Ext: SGIX_igloo_interface
	bool SGIX_igloo_interface;

	proto::IglooInterfaceSGIXFn iglooInterfaceSGIX;
	//- end: SGIX_igloo_interface

	//-//-- 
	//- Ext: SGIX_instruments
	bool SGIX_instruments;

	proto::GetInstrumentsSGIXFn getInstrumentsSGIX;
	proto::InstrumentsBufferSGIXFn instrumentsBufferSGIX;
	proto::PollInstrumentsSGIXFn pollInstrumentsSGIX;
	proto::ReadInstrumentsSGIXFn readInstrumentsSGIX;
	proto::StartInstrumentsSGIXFn startInstrumentsSGIX;
	proto::StopInstrumentsSGIXFn stopInstrumentsSGIX;
	//- end: SGIX_instruments

	//-//-- 
	//- Ext: SGIX_list_priority
	bool SGIX_list_priority;

	proto::GetListParameterfvSGIXFn getListParameterfvSGIX;
	proto::GetListParameterivSGIXFn getListParameterivSGIX;
	proto::ListParameterfSGIXFn listParameterfSGIX;
	proto::ListParameterfvSGIXFn listParameterfvSGIX;
	proto::ListParameteriSGIXFn listParameteriSGIX;
	proto::ListParameterivSGIXFn listParameterivSGIX;
	//- end: SGIX_list_priority

	//-//-- 
	//- Ext: SGIX_pixel_texture
	bool SGIX_pixel_texture;

	proto::PixelTexGenSGIXFn pixelTexGenSGIX;
	//- end: SGIX_pixel_texture

	//-//-- 
	//- Ext: SGIX_polynomial_ffd
	bool SGIX_polynomial_ffd;

	proto::DeformSGIXFn deformSGIX;
	proto::DeformationMap3dSGIXFn deformationMap3dSGIX;
	proto::DeformationMap3fSGIXFn deformationMap3fSGIX;
	proto::LoadIdentityDeformationMapSGIXFn loadIdentityDeformationMapSGIX;
	//- end: SGIX_polynomial_ffd

	//-//-- 
	//- Ext: SGIX_reference_plane
	bool SGIX_reference_plane;

	proto::ReferencePlaneSGIXFn referencePlaneSGIX;
	//- end: SGIX_reference_plane

	//-//-- 
	//- Ext: SGIX_sprite
	bool SGIX_sprite;

	proto::SpriteParameterfSGIXFn spriteParameterfSGIX;
	proto::SpriteParameterfvSGIXFn spriteParameterfvSGIX;
	proto::SpriteParameteriSGIXFn spriteParameteriSGIX;
	proto::SpriteParameterivSGIXFn spriteParameterivSGIX;
	//- end: SGIX_sprite

	//-//-- 
	//- Ext: SGIX_tag_sample_buffer
	bool SGIX_tag_sample_buffer;

	proto::TagSampleBufferSGIXFn tagSampleBufferSGIX;
	//- end: SGIX_tag_sample_buffer

	//-//-- 
	//- Ext: SGI_color_table
	bool SGI_color_table;

	proto::ColorTableParameterfvSGIFn colorTableParameterfvSGI;
	proto::ColorTableParameterivSGIFn colorTableParameterivSGI;
	proto::ColorTableSGIFn colorTableSGI;
	proto::CopyColorTableSGIFn copyColorTableSGI;
	proto::GetColorTableParameterfvSGIFn getColorTableParameterfvSGI;
	proto::GetColorTableParameterivSGIFn getColorTableParameterivSGI;
	proto::GetColorTableSGIFn getColorTableSGI;
	//- end: SGI_color_table

	//-//-- 
	//- Ext: ARB_gl_spirv
	bool ARB_gl_spirv;

	proto::SpecializeShaderARBFn specializeShaderARB;
	//- end: ARB_gl_spirv

	size_t referenceCount_;

}; // ~ struct GLapi

//--    <<< ~ dlapi::gl namespace <<<           ///{{{1///////////////////////
FLUX_NAMESPACE_LEAVE2(dlapi,gl)
//--///}}}1/////////////// vim:syntax=cpp:foldmethod=marker:ts=4:noexpandtab: 
#endif // FLUXDLAPI_GL_GL_HPP_CD5E1692_0F6A_4721_8758_9EAE1A91CC66
